
freq_in.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004368  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  080044f8  080044f8  000144f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080045e8  080045e8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080045e8  080045e8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080045e8  080045e8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080045e8  080045e8  000145e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080045ec  080045ec  000145ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080045f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000200  20000070  08004660  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000270  08004660  00020270  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dcf0  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f67  00000000  00000000  0002dd90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cd8  00000000  00000000  0002fcf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c10  00000000  00000000  000309d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c65e  00000000  00000000  000315e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e558  00000000  00000000  0004dc3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a5ff3  00000000  00000000  0005c196  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00102189  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003db0  00000000  00000000  001021dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080044e0 	.word	0x080044e0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080044e0 	.word	0x080044e0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <getTimeUs>:
 */

#include "DWT.h"

float getTimeUs(uint32_t count)
{
 8000270:	b480      	push	{r7}
 8000272:	b085      	sub	sp, #20
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
  float us = 1000000 * (float)count / (float)SystemCoreClock;
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	ee07 3a90 	vmov	s15, r3
 800027e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000282:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80002b4 <getTimeUs+0x44>
 8000286:	ee67 6a87 	vmul.f32	s13, s15, s14
 800028a:	4b0b      	ldr	r3, [pc, #44]	; (80002b8 <getTimeUs+0x48>)
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	ee07 3a90 	vmov	s15, r3
 8000292:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000296:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800029a:	edc7 7a03 	vstr	s15, [r7, #12]
  return us;
 800029e:	68fb      	ldr	r3, [r7, #12]
 80002a0:	ee07 3a90 	vmov	s15, r3
}
 80002a4:	eeb0 0a67 	vmov.f32	s0, s15
 80002a8:	3714      	adds	r7, #20
 80002aa:	46bd      	mov	sp, r7
 80002ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b0:	4770      	bx	lr
 80002b2:	bf00      	nop
 80002b4:	49742400 	.word	0x49742400
 80002b8:	20000000 	.word	0x20000000

080002bc <HAL_GPIO_EXTI_Callback>:
/* USER CODE BEGIN 0 */

float us[4] = {};

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b082      	sub	sp, #8
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	4603      	mov	r3, r0
 80002c4:	80fb      	strh	r3, [r7, #6]
	//経過時間を計測し、タイマーをリセット
	switch(GPIO_Pin) {
 80002c6:	88fb      	ldrh	r3, [r7, #6]
 80002c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80002cc:	d044      	beq.n	8000358 <HAL_GPIO_EXTI_Callback+0x9c>
 80002ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80002d2:	dc54      	bgt.n	800037e <HAL_GPIO_EXTI_Callback+0xc2>
 80002d4:	2b20      	cmp	r3, #32
 80002d6:	d02c      	beq.n	8000332 <HAL_GPIO_EXTI_Callback+0x76>
 80002d8:	2b20      	cmp	r3, #32
 80002da:	dc50      	bgt.n	800037e <HAL_GPIO_EXTI_Callback+0xc2>
 80002dc:	2b08      	cmp	r3, #8
 80002de:	d002      	beq.n	80002e6 <HAL_GPIO_EXTI_Callback+0x2a>
 80002e0:	2b10      	cmp	r3, #16
 80002e2:	d013      	beq.n	800030c <HAL_GPIO_EXTI_Callback+0x50>

			htim15.Instance->CNT = 0;
			HAL_TIM_Base_Start_IT(&htim15);
			break;
	}
}
 80002e4:	e04b      	b.n	800037e <HAL_GPIO_EXTI_Callback+0xc2>
			us[0] = getTimeUs(htim1.Instance->CNT);
 80002e6:	4b28      	ldr	r3, [pc, #160]	; (8000388 <HAL_GPIO_EXTI_Callback+0xcc>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002ec:	4618      	mov	r0, r3
 80002ee:	f7ff ffbf 	bl	8000270 <getTimeUs>
 80002f2:	eef0 7a40 	vmov.f32	s15, s0
 80002f6:	4b25      	ldr	r3, [pc, #148]	; (800038c <HAL_GPIO_EXTI_Callback+0xd0>)
 80002f8:	edc3 7a00 	vstr	s15, [r3]
			htim1.Instance->CNT = 0;
 80002fc:	4b22      	ldr	r3, [pc, #136]	; (8000388 <HAL_GPIO_EXTI_Callback+0xcc>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	2200      	movs	r2, #0
 8000302:	625a      	str	r2, [r3, #36]	; 0x24
			HAL_TIM_Base_Start_IT(&htim1);
 8000304:	4820      	ldr	r0, [pc, #128]	; (8000388 <HAL_GPIO_EXTI_Callback+0xcc>)
 8000306:	f002 fa6b 	bl	80027e0 <HAL_TIM_Base_Start_IT>
			break;
 800030a:	e038      	b.n	800037e <HAL_GPIO_EXTI_Callback+0xc2>
			us[1] = getTimeUs(htim2.Instance->CNT);
 800030c:	4b20      	ldr	r3, [pc, #128]	; (8000390 <HAL_GPIO_EXTI_Callback+0xd4>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000312:	4618      	mov	r0, r3
 8000314:	f7ff ffac 	bl	8000270 <getTimeUs>
 8000318:	eef0 7a40 	vmov.f32	s15, s0
 800031c:	4b1b      	ldr	r3, [pc, #108]	; (800038c <HAL_GPIO_EXTI_Callback+0xd0>)
 800031e:	edc3 7a01 	vstr	s15, [r3, #4]
			htim2.Instance->CNT = 0;
 8000322:	4b1b      	ldr	r3, [pc, #108]	; (8000390 <HAL_GPIO_EXTI_Callback+0xd4>)
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	2200      	movs	r2, #0
 8000328:	625a      	str	r2, [r3, #36]	; 0x24
			HAL_TIM_Base_Start_IT(&htim2);
 800032a:	4819      	ldr	r0, [pc, #100]	; (8000390 <HAL_GPIO_EXTI_Callback+0xd4>)
 800032c:	f002 fa58 	bl	80027e0 <HAL_TIM_Base_Start_IT>
			break;
 8000330:	e025      	b.n	800037e <HAL_GPIO_EXTI_Callback+0xc2>
			us[2] = getTimeUs(htim3.Instance->CNT);
 8000332:	4b18      	ldr	r3, [pc, #96]	; (8000394 <HAL_GPIO_EXTI_Callback+0xd8>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000338:	4618      	mov	r0, r3
 800033a:	f7ff ff99 	bl	8000270 <getTimeUs>
 800033e:	eef0 7a40 	vmov.f32	s15, s0
 8000342:	4b12      	ldr	r3, [pc, #72]	; (800038c <HAL_GPIO_EXTI_Callback+0xd0>)
 8000344:	edc3 7a02 	vstr	s15, [r3, #8]
			htim3.Instance->CNT = 0;
 8000348:	4b12      	ldr	r3, [pc, #72]	; (8000394 <HAL_GPIO_EXTI_Callback+0xd8>)
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	2200      	movs	r2, #0
 800034e:	625a      	str	r2, [r3, #36]	; 0x24
			HAL_TIM_Base_Start_IT(&htim3);
 8000350:	4810      	ldr	r0, [pc, #64]	; (8000394 <HAL_GPIO_EXTI_Callback+0xd8>)
 8000352:	f002 fa45 	bl	80027e0 <HAL_TIM_Base_Start_IT>
			break;
 8000356:	e012      	b.n	800037e <HAL_GPIO_EXTI_Callback+0xc2>
			us[3] = getTimeUs(htim15.Instance->CNT);
 8000358:	4b0f      	ldr	r3, [pc, #60]	; (8000398 <HAL_GPIO_EXTI_Callback+0xdc>)
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800035e:	4618      	mov	r0, r3
 8000360:	f7ff ff86 	bl	8000270 <getTimeUs>
 8000364:	eef0 7a40 	vmov.f32	s15, s0
 8000368:	4b08      	ldr	r3, [pc, #32]	; (800038c <HAL_GPIO_EXTI_Callback+0xd0>)
 800036a:	edc3 7a03 	vstr	s15, [r3, #12]
			htim15.Instance->CNT = 0;
 800036e:	4b0a      	ldr	r3, [pc, #40]	; (8000398 <HAL_GPIO_EXTI_Callback+0xdc>)
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	2200      	movs	r2, #0
 8000374:	625a      	str	r2, [r3, #36]	; 0x24
			HAL_TIM_Base_Start_IT(&htim15);
 8000376:	4808      	ldr	r0, [pc, #32]	; (8000398 <HAL_GPIO_EXTI_Callback+0xdc>)
 8000378:	f002 fa32 	bl	80027e0 <HAL_TIM_Base_Start_IT>
			break;
 800037c:	bf00      	nop
}
 800037e:	bf00      	nop
 8000380:	3708      	adds	r7, #8
 8000382:	46bd      	mov	sp, r7
 8000384:	bd80      	pop	{r7, pc}
 8000386:	bf00      	nop
 8000388:	20000140 	.word	0x20000140
 800038c:	2000008c 	.word	0x2000008c
 8000390:	2000018c 	.word	0x2000018c
 8000394:	200000f4 	.word	0x200000f4
 8000398:	200000a8 	.word	0x200000a8

0800039c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b082      	sub	sp, #8
 80003a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	setbuf(stdout, NULL);
 80003a2:	4b1e      	ldr	r3, [pc, #120]	; (800041c <main+0x80>)
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	689b      	ldr	r3, [r3, #8]
 80003a8:	2100      	movs	r1, #0
 80003aa:	4618      	mov	r0, r3
 80003ac:	f003 f884 	bl	80034b8 <setbuf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003b0:	f000 fc34 	bl	8000c1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003b4:	f000 f83e 	bl	8000434 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003b8:	f000 fa02 	bl	80007c0 <MX_GPIO_Init>
  MX_TIM2_Init();
 80003bc:	f000 f8e2 	bl	8000584 <MX_TIM2_Init>
  MX_TIM3_Init();
 80003c0:	f000 f92e 	bl	8000620 <MX_TIM3_Init>
  MX_TIM1_Init();
 80003c4:	f000 f88a 	bl	80004dc <MX_TIM1_Init>
  MX_TIM15_Init();
 80003c8:	f000 f978 	bl	80006bc <MX_TIM15_Init>
  MX_USART2_UART_Init();
 80003cc:	f000 f9c8 	bl	8000760 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  printf("Hello World!\n\r");
 80003d0:	4813      	ldr	r0, [pc, #76]	; (8000420 <main+0x84>)
 80003d2:	f003 f859 	bl	8003488 <iprintf>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_Delay(500);
 80003d6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80003da:	f000 fc85 	bl	8000ce8 <HAL_Delay>
	  for(int i = 0; i < 4; i++) {
 80003de:	2300      	movs	r3, #0
 80003e0:	607b      	str	r3, [r7, #4]
 80003e2:	e014      	b.n	800040e <main+0x72>
		  printf("OUT%d:%d ", i, (int)(500000 / us[i]));
 80003e4:	4a0f      	ldr	r2, [pc, #60]	; (8000424 <main+0x88>)
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	009b      	lsls	r3, r3, #2
 80003ea:	4413      	add	r3, r2
 80003ec:	ed93 7a00 	vldr	s14, [r3]
 80003f0:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8000428 <main+0x8c>
 80003f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80003f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80003fc:	ee17 2a90 	vmov	r2, s15
 8000400:	6879      	ldr	r1, [r7, #4]
 8000402:	480a      	ldr	r0, [pc, #40]	; (800042c <main+0x90>)
 8000404:	f003 f840 	bl	8003488 <iprintf>
	  for(int i = 0; i < 4; i++) {
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	3301      	adds	r3, #1
 800040c:	607b      	str	r3, [r7, #4]
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	2b03      	cmp	r3, #3
 8000412:	dde7      	ble.n	80003e4 <main+0x48>
	  }
	  printf("\n\r");
 8000414:	4806      	ldr	r0, [pc, #24]	; (8000430 <main+0x94>)
 8000416:	f003 f837 	bl	8003488 <iprintf>
	  HAL_Delay(500);
 800041a:	e7dc      	b.n	80003d6 <main+0x3a>
 800041c:	2000000c 	.word	0x2000000c
 8000420:	080044f8 	.word	0x080044f8
 8000424:	2000008c 	.word	0x2000008c
 8000428:	48f42400 	.word	0x48f42400
 800042c:	08004508 	.word	0x08004508
 8000430:	08004514 	.word	0x08004514

08000434 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b096      	sub	sp, #88	; 0x58
 8000438:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800043a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800043e:	2228      	movs	r2, #40	; 0x28
 8000440:	2100      	movs	r1, #0
 8000442:	4618      	mov	r0, r3
 8000444:	f003 f818 	bl	8003478 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000448:	f107 031c 	add.w	r3, r7, #28
 800044c:	2200      	movs	r2, #0
 800044e:	601a      	str	r2, [r3, #0]
 8000450:	605a      	str	r2, [r3, #4]
 8000452:	609a      	str	r2, [r3, #8]
 8000454:	60da      	str	r2, [r3, #12]
 8000456:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000458:	1d3b      	adds	r3, r7, #4
 800045a:	2200      	movs	r2, #0
 800045c:	601a      	str	r2, [r3, #0]
 800045e:	605a      	str	r2, [r3, #4]
 8000460:	609a      	str	r2, [r3, #8]
 8000462:	60da      	str	r2, [r3, #12]
 8000464:	611a      	str	r2, [r3, #16]
 8000466:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000468:	2302      	movs	r3, #2
 800046a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800046c:	2301      	movs	r3, #1
 800046e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000470:	2310      	movs	r3, #16
 8000472:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000474:	2300      	movs	r3, #0
 8000476:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000478:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800047c:	4618      	mov	r0, r3
 800047e:	f000 fef3 	bl	8001268 <HAL_RCC_OscConfig>
 8000482:	4603      	mov	r3, r0
 8000484:	2b00      	cmp	r3, #0
 8000486:	d001      	beq.n	800048c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000488:	f000 fa06 	bl	8000898 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800048c:	230f      	movs	r3, #15
 800048e:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000490:	2300      	movs	r3, #0
 8000492:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000494:	2300      	movs	r3, #0
 8000496:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000498:	2300      	movs	r3, #0
 800049a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800049c:	2300      	movs	r3, #0
 800049e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80004a0:	f107 031c 	add.w	r3, r7, #28
 80004a4:	2100      	movs	r1, #0
 80004a6:	4618      	mov	r0, r3
 80004a8:	f001 fde6 	bl	8002078 <HAL_RCC_ClockConfig>
 80004ac:	4603      	mov	r3, r0
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d001      	beq.n	80004b6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80004b2:	f000 f9f1 	bl	8000898 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 80004b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004ba:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80004bc:	2300      	movs	r3, #0
 80004be:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004c0:	1d3b      	adds	r3, r7, #4
 80004c2:	4618      	mov	r0, r3
 80004c4:	f002 f80e 	bl	80024e4 <HAL_RCCEx_PeriphCLKConfig>
 80004c8:	4603      	mov	r3, r0
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d001      	beq.n	80004d2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80004ce:	f000 f9e3 	bl	8000898 <Error_Handler>
  }
}
 80004d2:	bf00      	nop
 80004d4:	3758      	adds	r7, #88	; 0x58
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bd80      	pop	{r7, pc}
	...

080004dc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b088      	sub	sp, #32
 80004e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004e2:	f107 0310 	add.w	r3, r7, #16
 80004e6:	2200      	movs	r2, #0
 80004e8:	601a      	str	r2, [r3, #0]
 80004ea:	605a      	str	r2, [r3, #4]
 80004ec:	609a      	str	r2, [r3, #8]
 80004ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004f0:	1d3b      	adds	r3, r7, #4
 80004f2:	2200      	movs	r2, #0
 80004f4:	601a      	str	r2, [r3, #0]
 80004f6:	605a      	str	r2, [r3, #4]
 80004f8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80004fa:	4b20      	ldr	r3, [pc, #128]	; (800057c <MX_TIM1_Init+0xa0>)
 80004fc:	4a20      	ldr	r2, [pc, #128]	; (8000580 <MX_TIM1_Init+0xa4>)
 80004fe:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000500:	4b1e      	ldr	r3, [pc, #120]	; (800057c <MX_TIM1_Init+0xa0>)
 8000502:	2200      	movs	r2, #0
 8000504:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000506:	4b1d      	ldr	r3, [pc, #116]	; (800057c <MX_TIM1_Init+0xa0>)
 8000508:	2200      	movs	r2, #0
 800050a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800050c:	4b1b      	ldr	r3, [pc, #108]	; (800057c <MX_TIM1_Init+0xa0>)
 800050e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000512:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000514:	4b19      	ldr	r3, [pc, #100]	; (800057c <MX_TIM1_Init+0xa0>)
 8000516:	2200      	movs	r2, #0
 8000518:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800051a:	4b18      	ldr	r3, [pc, #96]	; (800057c <MX_TIM1_Init+0xa0>)
 800051c:	2200      	movs	r2, #0
 800051e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000520:	4b16      	ldr	r3, [pc, #88]	; (800057c <MX_TIM1_Init+0xa0>)
 8000522:	2200      	movs	r2, #0
 8000524:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000526:	4815      	ldr	r0, [pc, #84]	; (800057c <MX_TIM1_Init+0xa0>)
 8000528:	f002 f902 	bl	8002730 <HAL_TIM_Base_Init>
 800052c:	4603      	mov	r3, r0
 800052e:	2b00      	cmp	r3, #0
 8000530:	d001      	beq.n	8000536 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000532:	f000 f9b1 	bl	8000898 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000536:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800053a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800053c:	f107 0310 	add.w	r3, r7, #16
 8000540:	4619      	mov	r1, r3
 8000542:	480e      	ldr	r0, [pc, #56]	; (800057c <MX_TIM1_Init+0xa0>)
 8000544:	f002 f9a8 	bl	8002898 <HAL_TIM_ConfigClockSource>
 8000548:	4603      	mov	r3, r0
 800054a:	2b00      	cmp	r3, #0
 800054c:	d001      	beq.n	8000552 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800054e:	f000 f9a3 	bl	8000898 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000552:	2300      	movs	r3, #0
 8000554:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000556:	2300      	movs	r3, #0
 8000558:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800055a:	2300      	movs	r3, #0
 800055c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800055e:	1d3b      	adds	r3, r7, #4
 8000560:	4619      	mov	r1, r3
 8000562:	4806      	ldr	r0, [pc, #24]	; (800057c <MX_TIM1_Init+0xa0>)
 8000564:	f002 fb70 	bl	8002c48 <HAL_TIMEx_MasterConfigSynchronization>
 8000568:	4603      	mov	r3, r0
 800056a:	2b00      	cmp	r3, #0
 800056c:	d001      	beq.n	8000572 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800056e:	f000 f993 	bl	8000898 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000572:	bf00      	nop
 8000574:	3720      	adds	r7, #32
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	20000140 	.word	0x20000140
 8000580:	40012c00 	.word	0x40012c00

08000584 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b088      	sub	sp, #32
 8000588:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800058a:	f107 0310 	add.w	r3, r7, #16
 800058e:	2200      	movs	r2, #0
 8000590:	601a      	str	r2, [r3, #0]
 8000592:	605a      	str	r2, [r3, #4]
 8000594:	609a      	str	r2, [r3, #8]
 8000596:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000598:	1d3b      	adds	r3, r7, #4
 800059a:	2200      	movs	r2, #0
 800059c:	601a      	str	r2, [r3, #0]
 800059e:	605a      	str	r2, [r3, #4]
 80005a0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80005a2:	4b1e      	ldr	r3, [pc, #120]	; (800061c <MX_TIM2_Init+0x98>)
 80005a4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80005a8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80005aa:	4b1c      	ldr	r3, [pc, #112]	; (800061c <MX_TIM2_Init+0x98>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005b0:	4b1a      	ldr	r3, [pc, #104]	; (800061c <MX_TIM2_Init+0x98>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80005b6:	4b19      	ldr	r3, [pc, #100]	; (800061c <MX_TIM2_Init+0x98>)
 80005b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80005bc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005be:	4b17      	ldr	r3, [pc, #92]	; (800061c <MX_TIM2_Init+0x98>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005c4:	4b15      	ldr	r3, [pc, #84]	; (800061c <MX_TIM2_Init+0x98>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80005ca:	4814      	ldr	r0, [pc, #80]	; (800061c <MX_TIM2_Init+0x98>)
 80005cc:	f002 f8b0 	bl	8002730 <HAL_TIM_Base_Init>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80005d6:	f000 f95f 	bl	8000898 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005de:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80005e0:	f107 0310 	add.w	r3, r7, #16
 80005e4:	4619      	mov	r1, r3
 80005e6:	480d      	ldr	r0, [pc, #52]	; (800061c <MX_TIM2_Init+0x98>)
 80005e8:	f002 f956 	bl	8002898 <HAL_TIM_ConfigClockSource>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80005f2:	f000 f951 	bl	8000898 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005f6:	2300      	movs	r3, #0
 80005f8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005fa:	2300      	movs	r3, #0
 80005fc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80005fe:	1d3b      	adds	r3, r7, #4
 8000600:	4619      	mov	r1, r3
 8000602:	4806      	ldr	r0, [pc, #24]	; (800061c <MX_TIM2_Init+0x98>)
 8000604:	f002 fb20 	bl	8002c48 <HAL_TIMEx_MasterConfigSynchronization>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800060e:	f000 f943 	bl	8000898 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000612:	bf00      	nop
 8000614:	3720      	adds	r7, #32
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	2000018c 	.word	0x2000018c

08000620 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b088      	sub	sp, #32
 8000624:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000626:	f107 0310 	add.w	r3, r7, #16
 800062a:	2200      	movs	r2, #0
 800062c:	601a      	str	r2, [r3, #0]
 800062e:	605a      	str	r2, [r3, #4]
 8000630:	609a      	str	r2, [r3, #8]
 8000632:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000634:	1d3b      	adds	r3, r7, #4
 8000636:	2200      	movs	r2, #0
 8000638:	601a      	str	r2, [r3, #0]
 800063a:	605a      	str	r2, [r3, #4]
 800063c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800063e:	4b1d      	ldr	r3, [pc, #116]	; (80006b4 <MX_TIM3_Init+0x94>)
 8000640:	4a1d      	ldr	r2, [pc, #116]	; (80006b8 <MX_TIM3_Init+0x98>)
 8000642:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000644:	4b1b      	ldr	r3, [pc, #108]	; (80006b4 <MX_TIM3_Init+0x94>)
 8000646:	2200      	movs	r2, #0
 8000648:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800064a:	4b1a      	ldr	r3, [pc, #104]	; (80006b4 <MX_TIM3_Init+0x94>)
 800064c:	2200      	movs	r2, #0
 800064e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000650:	4b18      	ldr	r3, [pc, #96]	; (80006b4 <MX_TIM3_Init+0x94>)
 8000652:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000656:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000658:	4b16      	ldr	r3, [pc, #88]	; (80006b4 <MX_TIM3_Init+0x94>)
 800065a:	2200      	movs	r2, #0
 800065c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800065e:	4b15      	ldr	r3, [pc, #84]	; (80006b4 <MX_TIM3_Init+0x94>)
 8000660:	2200      	movs	r2, #0
 8000662:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000664:	4813      	ldr	r0, [pc, #76]	; (80006b4 <MX_TIM3_Init+0x94>)
 8000666:	f002 f863 	bl	8002730 <HAL_TIM_Base_Init>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000670:	f000 f912 	bl	8000898 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000674:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000678:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800067a:	f107 0310 	add.w	r3, r7, #16
 800067e:	4619      	mov	r1, r3
 8000680:	480c      	ldr	r0, [pc, #48]	; (80006b4 <MX_TIM3_Init+0x94>)
 8000682:	f002 f909 	bl	8002898 <HAL_TIM_ConfigClockSource>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800068c:	f000 f904 	bl	8000898 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000690:	2300      	movs	r3, #0
 8000692:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000694:	2300      	movs	r3, #0
 8000696:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000698:	1d3b      	adds	r3, r7, #4
 800069a:	4619      	mov	r1, r3
 800069c:	4805      	ldr	r0, [pc, #20]	; (80006b4 <MX_TIM3_Init+0x94>)
 800069e:	f002 fad3 	bl	8002c48 <HAL_TIMEx_MasterConfigSynchronization>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80006a8:	f000 f8f6 	bl	8000898 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80006ac:	bf00      	nop
 80006ae:	3720      	adds	r7, #32
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	200000f4 	.word	0x200000f4
 80006b8:	40000400 	.word	0x40000400

080006bc <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b088      	sub	sp, #32
 80006c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006c2:	f107 0310 	add.w	r3, r7, #16
 80006c6:	2200      	movs	r2, #0
 80006c8:	601a      	str	r2, [r3, #0]
 80006ca:	605a      	str	r2, [r3, #4]
 80006cc:	609a      	str	r2, [r3, #8]
 80006ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006d0:	1d3b      	adds	r3, r7, #4
 80006d2:	2200      	movs	r2, #0
 80006d4:	601a      	str	r2, [r3, #0]
 80006d6:	605a      	str	r2, [r3, #4]
 80006d8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80006da:	4b1f      	ldr	r3, [pc, #124]	; (8000758 <MX_TIM15_Init+0x9c>)
 80006dc:	4a1f      	ldr	r2, [pc, #124]	; (800075c <MX_TIM15_Init+0xa0>)
 80006de:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 80006e0:	4b1d      	ldr	r3, [pc, #116]	; (8000758 <MX_TIM15_Init+0x9c>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006e6:	4b1c      	ldr	r3, [pc, #112]	; (8000758 <MX_TIM15_Init+0x9c>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 80006ec:	4b1a      	ldr	r3, [pc, #104]	; (8000758 <MX_TIM15_Init+0x9c>)
 80006ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80006f2:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006f4:	4b18      	ldr	r3, [pc, #96]	; (8000758 <MX_TIM15_Init+0x9c>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80006fa:	4b17      	ldr	r3, [pc, #92]	; (8000758 <MX_TIM15_Init+0x9c>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000700:	4b15      	ldr	r3, [pc, #84]	; (8000758 <MX_TIM15_Init+0x9c>)
 8000702:	2200      	movs	r2, #0
 8000704:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8000706:	4814      	ldr	r0, [pc, #80]	; (8000758 <MX_TIM15_Init+0x9c>)
 8000708:	f002 f812 	bl	8002730 <HAL_TIM_Base_Init>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 8000712:	f000 f8c1 	bl	8000898 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000716:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800071a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 800071c:	f107 0310 	add.w	r3, r7, #16
 8000720:	4619      	mov	r1, r3
 8000722:	480d      	ldr	r0, [pc, #52]	; (8000758 <MX_TIM15_Init+0x9c>)
 8000724:	f002 f8b8 	bl	8002898 <HAL_TIM_ConfigClockSource>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 800072e:	f000 f8b3 	bl	8000898 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000732:	2300      	movs	r3, #0
 8000734:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000736:	2300      	movs	r3, #0
 8000738:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800073a:	1d3b      	adds	r3, r7, #4
 800073c:	4619      	mov	r1, r3
 800073e:	4806      	ldr	r0, [pc, #24]	; (8000758 <MX_TIM15_Init+0x9c>)
 8000740:	f002 fa82 	bl	8002c48 <HAL_TIMEx_MasterConfigSynchronization>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 800074a:	f000 f8a5 	bl	8000898 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 800074e:	bf00      	nop
 8000750:	3720      	adds	r7, #32
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	200000a8 	.word	0x200000a8
 800075c:	40014000 	.word	0x40014000

08000760 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000764:	4b14      	ldr	r3, [pc, #80]	; (80007b8 <MX_USART2_UART_Init+0x58>)
 8000766:	4a15      	ldr	r2, [pc, #84]	; (80007bc <MX_USART2_UART_Init+0x5c>)
 8000768:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800076a:	4b13      	ldr	r3, [pc, #76]	; (80007b8 <MX_USART2_UART_Init+0x58>)
 800076c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000770:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000772:	4b11      	ldr	r3, [pc, #68]	; (80007b8 <MX_USART2_UART_Init+0x58>)
 8000774:	2200      	movs	r2, #0
 8000776:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000778:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <MX_USART2_UART_Init+0x58>)
 800077a:	2200      	movs	r2, #0
 800077c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800077e:	4b0e      	ldr	r3, [pc, #56]	; (80007b8 <MX_USART2_UART_Init+0x58>)
 8000780:	2200      	movs	r2, #0
 8000782:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000784:	4b0c      	ldr	r3, [pc, #48]	; (80007b8 <MX_USART2_UART_Init+0x58>)
 8000786:	220c      	movs	r2, #12
 8000788:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800078a:	4b0b      	ldr	r3, [pc, #44]	; (80007b8 <MX_USART2_UART_Init+0x58>)
 800078c:	2200      	movs	r2, #0
 800078e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000790:	4b09      	ldr	r3, [pc, #36]	; (80007b8 <MX_USART2_UART_Init+0x58>)
 8000792:	2200      	movs	r2, #0
 8000794:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000796:	4b08      	ldr	r3, [pc, #32]	; (80007b8 <MX_USART2_UART_Init+0x58>)
 8000798:	2200      	movs	r2, #0
 800079a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800079c:	4b06      	ldr	r3, [pc, #24]	; (80007b8 <MX_USART2_UART_Init+0x58>)
 800079e:	2200      	movs	r2, #0
 80007a0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007a2:	4805      	ldr	r0, [pc, #20]	; (80007b8 <MX_USART2_UART_Init+0x58>)
 80007a4:	f002 fabe 	bl	8002d24 <HAL_UART_Init>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80007ae:	f000 f873 	bl	8000898 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007b2:	bf00      	nop
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	200001d8 	.word	0x200001d8
 80007bc:	40004400 	.word	0x40004400

080007c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b088      	sub	sp, #32
 80007c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c6:	f107 030c 	add.w	r3, r7, #12
 80007ca:	2200      	movs	r2, #0
 80007cc:	601a      	str	r2, [r3, #0]
 80007ce:	605a      	str	r2, [r3, #4]
 80007d0:	609a      	str	r2, [r3, #8]
 80007d2:	60da      	str	r2, [r3, #12]
 80007d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d6:	4b23      	ldr	r3, [pc, #140]	; (8000864 <MX_GPIO_Init+0xa4>)
 80007d8:	695b      	ldr	r3, [r3, #20]
 80007da:	4a22      	ldr	r2, [pc, #136]	; (8000864 <MX_GPIO_Init+0xa4>)
 80007dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007e0:	6153      	str	r3, [r2, #20]
 80007e2:	4b20      	ldr	r3, [pc, #128]	; (8000864 <MX_GPIO_Init+0xa4>)
 80007e4:	695b      	ldr	r3, [r3, #20]
 80007e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007ea:	60bb      	str	r3, [r7, #8]
 80007ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ee:	4b1d      	ldr	r3, [pc, #116]	; (8000864 <MX_GPIO_Init+0xa4>)
 80007f0:	695b      	ldr	r3, [r3, #20]
 80007f2:	4a1c      	ldr	r2, [pc, #112]	; (8000864 <MX_GPIO_Init+0xa4>)
 80007f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80007f8:	6153      	str	r3, [r2, #20]
 80007fa:	4b1a      	ldr	r3, [pc, #104]	; (8000864 <MX_GPIO_Init+0xa4>)
 80007fc:	695b      	ldr	r3, [r3, #20]
 80007fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000802:	607b      	str	r3, [r7, #4]
 8000804:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : OUT4_Pin OUT5_Pin OUT0_Pin OUT1_Pin
                           OUT2_Pin */
  GPIO_InitStruct.Pin = OUT4_Pin|OUT5_Pin|OUT0_Pin|OUT1_Pin
 8000806:	233b      	movs	r3, #59	; 0x3b
 8000808:	60fb      	str	r3, [r7, #12]
                          |OUT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800080a:	4b17      	ldr	r3, [pc, #92]	; (8000868 <MX_GPIO_Init+0xa8>)
 800080c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080e:	2300      	movs	r3, #0
 8000810:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000812:	f107 030c 	add.w	r3, r7, #12
 8000816:	4619      	mov	r1, r3
 8000818:	4814      	ldr	r0, [pc, #80]	; (800086c <MX_GPIO_Init+0xac>)
 800081a:	f000 fb9b 	bl	8000f54 <HAL_GPIO_Init>

  /*Configure GPIO pin : OUT3_Pin */
  GPIO_InitStruct.Pin = OUT3_Pin;
 800081e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000822:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000824:	4b10      	ldr	r3, [pc, #64]	; (8000868 <MX_GPIO_Init+0xa8>)
 8000826:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000828:	2300      	movs	r3, #0
 800082a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(OUT3_GPIO_Port, &GPIO_InitStruct);
 800082c:	f107 030c 	add.w	r3, r7, #12
 8000830:	4619      	mov	r1, r3
 8000832:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000836:	f000 fb8d 	bl	8000f54 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800083a:	2200      	movs	r2, #0
 800083c:	2100      	movs	r1, #0
 800083e:	2009      	movs	r0, #9
 8000840:	f000 fb51 	bl	8000ee6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000844:	2009      	movs	r0, #9
 8000846:	f000 fb6a 	bl	8000f1e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800084a:	2200      	movs	r2, #0
 800084c:	2100      	movs	r1, #0
 800084e:	2028      	movs	r0, #40	; 0x28
 8000850:	f000 fb49 	bl	8000ee6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000854:	2028      	movs	r0, #40	; 0x28
 8000856:	f000 fb62 	bl	8000f1e <HAL_NVIC_EnableIRQ>

}
 800085a:	bf00      	nop
 800085c:	3720      	adds	r7, #32
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	40021000 	.word	0x40021000
 8000868:	10310000 	.word	0x10310000
 800086c:	48000400 	.word	0x48000400

08000870 <_write>:

/* USER CODE BEGIN 4 */

int _write(int file, char *ptr, int len)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b084      	sub	sp, #16
 8000874:	af00      	add	r7, sp, #0
 8000876:	60f8      	str	r0, [r7, #12]
 8000878:	60b9      	str	r1, [r7, #8]
 800087a:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2,(uint8_t *)ptr,len,10);
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	b29a      	uxth	r2, r3
 8000880:	230a      	movs	r3, #10
 8000882:	68b9      	ldr	r1, [r7, #8]
 8000884:	4803      	ldr	r0, [pc, #12]	; (8000894 <_write+0x24>)
 8000886:	f002 fa9b 	bl	8002dc0 <HAL_UART_Transmit>
  return len;
 800088a:	687b      	ldr	r3, [r7, #4]
}
 800088c:	4618      	mov	r0, r3
 800088e:	3710      	adds	r7, #16
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	200001d8 	.word	0x200001d8

08000898 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800089c:	b672      	cpsid	i
}
 800089e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008a0:	e7fe      	b.n	80008a0 <Error_Handler+0x8>
	...

080008a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	b083      	sub	sp, #12
 80008a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008aa:	4b0f      	ldr	r3, [pc, #60]	; (80008e8 <HAL_MspInit+0x44>)
 80008ac:	699b      	ldr	r3, [r3, #24]
 80008ae:	4a0e      	ldr	r2, [pc, #56]	; (80008e8 <HAL_MspInit+0x44>)
 80008b0:	f043 0301 	orr.w	r3, r3, #1
 80008b4:	6193      	str	r3, [r2, #24]
 80008b6:	4b0c      	ldr	r3, [pc, #48]	; (80008e8 <HAL_MspInit+0x44>)
 80008b8:	699b      	ldr	r3, [r3, #24]
 80008ba:	f003 0301 	and.w	r3, r3, #1
 80008be:	607b      	str	r3, [r7, #4]
 80008c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008c2:	4b09      	ldr	r3, [pc, #36]	; (80008e8 <HAL_MspInit+0x44>)
 80008c4:	69db      	ldr	r3, [r3, #28]
 80008c6:	4a08      	ldr	r2, [pc, #32]	; (80008e8 <HAL_MspInit+0x44>)
 80008c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008cc:	61d3      	str	r3, [r2, #28]
 80008ce:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <HAL_MspInit+0x44>)
 80008d0:	69db      	ldr	r3, [r3, #28]
 80008d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008d6:	603b      	str	r3, [r7, #0]
 80008d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008da:	bf00      	nop
 80008dc:	370c      	adds	r7, #12
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop
 80008e8:	40021000 	.word	0x40021000

080008ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b087      	sub	sp, #28
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a25      	ldr	r2, [pc, #148]	; (8000990 <HAL_TIM_Base_MspInit+0xa4>)
 80008fa:	4293      	cmp	r3, r2
 80008fc:	d10c      	bne.n	8000918 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80008fe:	4b25      	ldr	r3, [pc, #148]	; (8000994 <HAL_TIM_Base_MspInit+0xa8>)
 8000900:	699b      	ldr	r3, [r3, #24]
 8000902:	4a24      	ldr	r2, [pc, #144]	; (8000994 <HAL_TIM_Base_MspInit+0xa8>)
 8000904:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000908:	6193      	str	r3, [r2, #24]
 800090a:	4b22      	ldr	r3, [pc, #136]	; (8000994 <HAL_TIM_Base_MspInit+0xa8>)
 800090c:	699b      	ldr	r3, [r3, #24]
 800090e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000912:	617b      	str	r3, [r7, #20]
 8000914:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8000916:	e034      	b.n	8000982 <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM2)
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000920:	d10c      	bne.n	800093c <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000922:	4b1c      	ldr	r3, [pc, #112]	; (8000994 <HAL_TIM_Base_MspInit+0xa8>)
 8000924:	69db      	ldr	r3, [r3, #28]
 8000926:	4a1b      	ldr	r2, [pc, #108]	; (8000994 <HAL_TIM_Base_MspInit+0xa8>)
 8000928:	f043 0301 	orr.w	r3, r3, #1
 800092c:	61d3      	str	r3, [r2, #28]
 800092e:	4b19      	ldr	r3, [pc, #100]	; (8000994 <HAL_TIM_Base_MspInit+0xa8>)
 8000930:	69db      	ldr	r3, [r3, #28]
 8000932:	f003 0301 	and.w	r3, r3, #1
 8000936:	613b      	str	r3, [r7, #16]
 8000938:	693b      	ldr	r3, [r7, #16]
}
 800093a:	e022      	b.n	8000982 <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM3)
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a15      	ldr	r2, [pc, #84]	; (8000998 <HAL_TIM_Base_MspInit+0xac>)
 8000942:	4293      	cmp	r3, r2
 8000944:	d10c      	bne.n	8000960 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000946:	4b13      	ldr	r3, [pc, #76]	; (8000994 <HAL_TIM_Base_MspInit+0xa8>)
 8000948:	69db      	ldr	r3, [r3, #28]
 800094a:	4a12      	ldr	r2, [pc, #72]	; (8000994 <HAL_TIM_Base_MspInit+0xa8>)
 800094c:	f043 0302 	orr.w	r3, r3, #2
 8000950:	61d3      	str	r3, [r2, #28]
 8000952:	4b10      	ldr	r3, [pc, #64]	; (8000994 <HAL_TIM_Base_MspInit+0xa8>)
 8000954:	69db      	ldr	r3, [r3, #28]
 8000956:	f003 0302 	and.w	r3, r3, #2
 800095a:	60fb      	str	r3, [r7, #12]
 800095c:	68fb      	ldr	r3, [r7, #12]
}
 800095e:	e010      	b.n	8000982 <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM15)
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4a0d      	ldr	r2, [pc, #52]	; (800099c <HAL_TIM_Base_MspInit+0xb0>)
 8000966:	4293      	cmp	r3, r2
 8000968:	d10b      	bne.n	8000982 <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800096a:	4b0a      	ldr	r3, [pc, #40]	; (8000994 <HAL_TIM_Base_MspInit+0xa8>)
 800096c:	699b      	ldr	r3, [r3, #24]
 800096e:	4a09      	ldr	r2, [pc, #36]	; (8000994 <HAL_TIM_Base_MspInit+0xa8>)
 8000970:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000974:	6193      	str	r3, [r2, #24]
 8000976:	4b07      	ldr	r3, [pc, #28]	; (8000994 <HAL_TIM_Base_MspInit+0xa8>)
 8000978:	699b      	ldr	r3, [r3, #24]
 800097a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800097e:	60bb      	str	r3, [r7, #8]
 8000980:	68bb      	ldr	r3, [r7, #8]
}
 8000982:	bf00      	nop
 8000984:	371c      	adds	r7, #28
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	40012c00 	.word	0x40012c00
 8000994:	40021000 	.word	0x40021000
 8000998:	40000400 	.word	0x40000400
 800099c:	40014000 	.word	0x40014000

080009a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b08a      	sub	sp, #40	; 0x28
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a8:	f107 0314 	add.w	r3, r7, #20
 80009ac:	2200      	movs	r2, #0
 80009ae:	601a      	str	r2, [r3, #0]
 80009b0:	605a      	str	r2, [r3, #4]
 80009b2:	609a      	str	r2, [r3, #8]
 80009b4:	60da      	str	r2, [r3, #12]
 80009b6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4a17      	ldr	r2, [pc, #92]	; (8000a1c <HAL_UART_MspInit+0x7c>)
 80009be:	4293      	cmp	r3, r2
 80009c0:	d128      	bne.n	8000a14 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009c2:	4b17      	ldr	r3, [pc, #92]	; (8000a20 <HAL_UART_MspInit+0x80>)
 80009c4:	69db      	ldr	r3, [r3, #28]
 80009c6:	4a16      	ldr	r2, [pc, #88]	; (8000a20 <HAL_UART_MspInit+0x80>)
 80009c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009cc:	61d3      	str	r3, [r2, #28]
 80009ce:	4b14      	ldr	r3, [pc, #80]	; (8000a20 <HAL_UART_MspInit+0x80>)
 80009d0:	69db      	ldr	r3, [r3, #28]
 80009d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009d6:	613b      	str	r3, [r7, #16]
 80009d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009da:	4b11      	ldr	r3, [pc, #68]	; (8000a20 <HAL_UART_MspInit+0x80>)
 80009dc:	695b      	ldr	r3, [r3, #20]
 80009de:	4a10      	ldr	r2, [pc, #64]	; (8000a20 <HAL_UART_MspInit+0x80>)
 80009e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009e4:	6153      	str	r3, [r2, #20]
 80009e6:	4b0e      	ldr	r3, [pc, #56]	; (8000a20 <HAL_UART_MspInit+0x80>)
 80009e8:	695b      	ldr	r3, [r3, #20]
 80009ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009ee:	60fb      	str	r3, [r7, #12]
 80009f0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80009f2:	230c      	movs	r3, #12
 80009f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f6:	2302      	movs	r3, #2
 80009f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009fe:	2303      	movs	r3, #3
 8000a00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a02:	2307      	movs	r3, #7
 8000a04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a06:	f107 0314 	add.w	r3, r7, #20
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a10:	f000 faa0 	bl	8000f54 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a14:	bf00      	nop
 8000a16:	3728      	adds	r7, #40	; 0x28
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	40004400 	.word	0x40004400
 8000a20:	40021000 	.word	0x40021000

08000a24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a28:	e7fe      	b.n	8000a28 <NMI_Handler+0x4>

08000a2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a2a:	b480      	push	{r7}
 8000a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a2e:	e7fe      	b.n	8000a2e <HardFault_Handler+0x4>

08000a30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a34:	e7fe      	b.n	8000a34 <MemManage_Handler+0x4>

08000a36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a36:	b480      	push	{r7}
 8000a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a3a:	e7fe      	b.n	8000a3a <BusFault_Handler+0x4>

08000a3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a40:	e7fe      	b.n	8000a40 <UsageFault_Handler+0x4>

08000a42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a42:	b480      	push	{r7}
 8000a44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a46:	bf00      	nop
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4e:	4770      	bx	lr

08000a50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a54:	bf00      	nop
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr

08000a5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a5e:	b480      	push	{r7}
 8000a60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a62:	bf00      	nop
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr

08000a6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a70:	f000 f91a 	bl	8000ca8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a74:	bf00      	nop
 8000a76:	bd80      	pop	{r7, pc}

08000a78 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line 3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8000a7c:	2008      	movs	r0, #8
 8000a7e:	f000 fbdb 	bl	8001238 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000a82:	bf00      	nop
 8000a84:	bd80      	pop	{r7, pc}

08000a86 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000a86:	b580      	push	{r7, lr}
 8000a88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8000a8a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000a8e:	f000 fbd3 	bl	8001238 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000a92:	bf00      	nop
 8000a94:	bd80      	pop	{r7, pc}

08000a96 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a96:	b580      	push	{r7, lr}
 8000a98:	b086      	sub	sp, #24
 8000a9a:	af00      	add	r7, sp, #0
 8000a9c:	60f8      	str	r0, [r7, #12]
 8000a9e:	60b9      	str	r1, [r7, #8]
 8000aa0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	617b      	str	r3, [r7, #20]
 8000aa6:	e00a      	b.n	8000abe <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000aa8:	f3af 8000 	nop.w
 8000aac:	4601      	mov	r1, r0
 8000aae:	68bb      	ldr	r3, [r7, #8]
 8000ab0:	1c5a      	adds	r2, r3, #1
 8000ab2:	60ba      	str	r2, [r7, #8]
 8000ab4:	b2ca      	uxtb	r2, r1
 8000ab6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	3301      	adds	r3, #1
 8000abc:	617b      	str	r3, [r7, #20]
 8000abe:	697a      	ldr	r2, [r7, #20]
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	429a      	cmp	r2, r3
 8000ac4:	dbf0      	blt.n	8000aa8 <_read+0x12>
	}

return len;
 8000ac6:	687b      	ldr	r3, [r7, #4]
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	3718      	adds	r7, #24
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}

08000ad0 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b083      	sub	sp, #12
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
	return -1;
 8000ad8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	370c      	adds	r7, #12
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr

08000ae8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b083      	sub	sp, #12
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
 8000af0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000af8:	605a      	str	r2, [r3, #4]
	return 0;
 8000afa:	2300      	movs	r3, #0
}
 8000afc:	4618      	mov	r0, r3
 8000afe:	370c      	adds	r7, #12
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr

08000b08 <_isatty>:

int _isatty(int file)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b083      	sub	sp, #12
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
	return 1;
 8000b10:	2301      	movs	r3, #1
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	370c      	adds	r7, #12
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr

08000b1e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b1e:	b480      	push	{r7}
 8000b20:	b085      	sub	sp, #20
 8000b22:	af00      	add	r7, sp, #0
 8000b24:	60f8      	str	r0, [r7, #12]
 8000b26:	60b9      	str	r1, [r7, #8]
 8000b28:	607a      	str	r2, [r7, #4]
	return 0;
 8000b2a:	2300      	movs	r3, #0
}
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	3714      	adds	r7, #20
 8000b30:	46bd      	mov	sp, r7
 8000b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b36:	4770      	bx	lr

08000b38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b086      	sub	sp, #24
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b40:	4a14      	ldr	r2, [pc, #80]	; (8000b94 <_sbrk+0x5c>)
 8000b42:	4b15      	ldr	r3, [pc, #84]	; (8000b98 <_sbrk+0x60>)
 8000b44:	1ad3      	subs	r3, r2, r3
 8000b46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b48:	697b      	ldr	r3, [r7, #20]
 8000b4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b4c:	4b13      	ldr	r3, [pc, #76]	; (8000b9c <_sbrk+0x64>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d102      	bne.n	8000b5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b54:	4b11      	ldr	r3, [pc, #68]	; (8000b9c <_sbrk+0x64>)
 8000b56:	4a12      	ldr	r2, [pc, #72]	; (8000ba0 <_sbrk+0x68>)
 8000b58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b5a:	4b10      	ldr	r3, [pc, #64]	; (8000b9c <_sbrk+0x64>)
 8000b5c:	681a      	ldr	r2, [r3, #0]
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	4413      	add	r3, r2
 8000b62:	693a      	ldr	r2, [r7, #16]
 8000b64:	429a      	cmp	r2, r3
 8000b66:	d207      	bcs.n	8000b78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b68:	f002 fc5c 	bl	8003424 <__errno>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	220c      	movs	r2, #12
 8000b70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b76:	e009      	b.n	8000b8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b78:	4b08      	ldr	r3, [pc, #32]	; (8000b9c <_sbrk+0x64>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b7e:	4b07      	ldr	r3, [pc, #28]	; (8000b9c <_sbrk+0x64>)
 8000b80:	681a      	ldr	r2, [r3, #0]
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	4413      	add	r3, r2
 8000b86:	4a05      	ldr	r2, [pc, #20]	; (8000b9c <_sbrk+0x64>)
 8000b88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b8a:	68fb      	ldr	r3, [r7, #12]
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	3718      	adds	r7, #24
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	20003000 	.word	0x20003000
 8000b98:	00000400 	.word	0x00000400
 8000b9c:	2000009c 	.word	0x2000009c
 8000ba0:	20000270 	.word	0x20000270

08000ba4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ba8:	4b06      	ldr	r3, [pc, #24]	; (8000bc4 <SystemInit+0x20>)
 8000baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bae:	4a05      	ldr	r2, [pc, #20]	; (8000bc4 <SystemInit+0x20>)
 8000bb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bb8:	bf00      	nop
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	e000ed00 	.word	0xe000ed00

08000bc8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000bc8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c00 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bcc:	480d      	ldr	r0, [pc, #52]	; (8000c04 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bce:	490e      	ldr	r1, [pc, #56]	; (8000c08 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bd0:	4a0e      	ldr	r2, [pc, #56]	; (8000c0c <LoopForever+0xe>)
  movs r3, #0
 8000bd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bd4:	e002      	b.n	8000bdc <LoopCopyDataInit>

08000bd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bda:	3304      	adds	r3, #4

08000bdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000be0:	d3f9      	bcc.n	8000bd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000be2:	4a0b      	ldr	r2, [pc, #44]	; (8000c10 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000be4:	4c0b      	ldr	r4, [pc, #44]	; (8000c14 <LoopForever+0x16>)
  movs r3, #0
 8000be6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000be8:	e001      	b.n	8000bee <LoopFillZerobss>

08000bea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bec:	3204      	adds	r2, #4

08000bee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bf0:	d3fb      	bcc.n	8000bea <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000bf2:	f7ff ffd7 	bl	8000ba4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bf6:	f002 fc1b 	bl	8003430 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bfa:	f7ff fbcf 	bl	800039c <main>

08000bfe <LoopForever>:

LoopForever:
    b LoopForever
 8000bfe:	e7fe      	b.n	8000bfe <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c00:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000c04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c08:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000c0c:	080045f0 	.word	0x080045f0
  ldr r2, =_sbss
 8000c10:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000c14:	20000270 	.word	0x20000270

08000c18 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c18:	e7fe      	b.n	8000c18 <ADC1_2_IRQHandler>
	...

08000c1c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c20:	4b08      	ldr	r3, [pc, #32]	; (8000c44 <HAL_Init+0x28>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a07      	ldr	r2, [pc, #28]	; (8000c44 <HAL_Init+0x28>)
 8000c26:	f043 0310 	orr.w	r3, r3, #16
 8000c2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c2c:	2003      	movs	r0, #3
 8000c2e:	f000 f94f 	bl	8000ed0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c32:	2000      	movs	r0, #0
 8000c34:	f000 f808 	bl	8000c48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c38:	f7ff fe34 	bl	80008a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c3c:	2300      	movs	r3, #0
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	40022000 	.word	0x40022000

08000c48 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c50:	4b12      	ldr	r3, [pc, #72]	; (8000c9c <HAL_InitTick+0x54>)
 8000c52:	681a      	ldr	r2, [r3, #0]
 8000c54:	4b12      	ldr	r3, [pc, #72]	; (8000ca0 <HAL_InitTick+0x58>)
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	4619      	mov	r1, r3
 8000c5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c62:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c66:	4618      	mov	r0, r3
 8000c68:	f000 f967 	bl	8000f3a <HAL_SYSTICK_Config>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c72:	2301      	movs	r3, #1
 8000c74:	e00e      	b.n	8000c94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	2b0f      	cmp	r3, #15
 8000c7a:	d80a      	bhi.n	8000c92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	6879      	ldr	r1, [r7, #4]
 8000c80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c84:	f000 f92f 	bl	8000ee6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c88:	4a06      	ldr	r2, [pc, #24]	; (8000ca4 <HAL_InitTick+0x5c>)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	e000      	b.n	8000c94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c92:	2301      	movs	r3, #1
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	3708      	adds	r7, #8
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	20000000 	.word	0x20000000
 8000ca0:	20000008 	.word	0x20000008
 8000ca4:	20000004 	.word	0x20000004

08000ca8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cac:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <HAL_IncTick+0x20>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	461a      	mov	r2, r3
 8000cb2:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <HAL_IncTick+0x24>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	4413      	add	r3, r2
 8000cb8:	4a04      	ldr	r2, [pc, #16]	; (8000ccc <HAL_IncTick+0x24>)
 8000cba:	6013      	str	r3, [r2, #0]
}
 8000cbc:	bf00      	nop
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	20000008 	.word	0x20000008
 8000ccc:	2000025c 	.word	0x2000025c

08000cd0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  return uwTick;  
 8000cd4:	4b03      	ldr	r3, [pc, #12]	; (8000ce4 <HAL_GetTick+0x14>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	2000025c 	.word	0x2000025c

08000ce8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b084      	sub	sp, #16
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cf0:	f7ff ffee 	bl	8000cd0 <HAL_GetTick>
 8000cf4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000d00:	d005      	beq.n	8000d0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d02:	4b0a      	ldr	r3, [pc, #40]	; (8000d2c <HAL_Delay+0x44>)
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	461a      	mov	r2, r3
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	4413      	add	r3, r2
 8000d0c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000d0e:	bf00      	nop
 8000d10:	f7ff ffde 	bl	8000cd0 <HAL_GetTick>
 8000d14:	4602      	mov	r2, r0
 8000d16:	68bb      	ldr	r3, [r7, #8]
 8000d18:	1ad3      	subs	r3, r2, r3
 8000d1a:	68fa      	ldr	r2, [r7, #12]
 8000d1c:	429a      	cmp	r2, r3
 8000d1e:	d8f7      	bhi.n	8000d10 <HAL_Delay+0x28>
  {
  }
}
 8000d20:	bf00      	nop
 8000d22:	bf00      	nop
 8000d24:	3710      	adds	r7, #16
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	20000008 	.word	0x20000008

08000d30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b085      	sub	sp, #20
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	f003 0307 	and.w	r3, r3, #7
 8000d3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d40:	4b0c      	ldr	r3, [pc, #48]	; (8000d74 <__NVIC_SetPriorityGrouping+0x44>)
 8000d42:	68db      	ldr	r3, [r3, #12]
 8000d44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d46:	68ba      	ldr	r2, [r7, #8]
 8000d48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d54:	68bb      	ldr	r3, [r7, #8]
 8000d56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d62:	4a04      	ldr	r2, [pc, #16]	; (8000d74 <__NVIC_SetPriorityGrouping+0x44>)
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	60d3      	str	r3, [r2, #12]
}
 8000d68:	bf00      	nop
 8000d6a:	3714      	adds	r7, #20
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr
 8000d74:	e000ed00 	.word	0xe000ed00

08000d78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d7c:	4b04      	ldr	r3, [pc, #16]	; (8000d90 <__NVIC_GetPriorityGrouping+0x18>)
 8000d7e:	68db      	ldr	r3, [r3, #12]
 8000d80:	0a1b      	lsrs	r3, r3, #8
 8000d82:	f003 0307 	and.w	r3, r3, #7
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr
 8000d90:	e000ed00 	.word	0xe000ed00

08000d94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b083      	sub	sp, #12
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	db0b      	blt.n	8000dbe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000da6:	79fb      	ldrb	r3, [r7, #7]
 8000da8:	f003 021f 	and.w	r2, r3, #31
 8000dac:	4907      	ldr	r1, [pc, #28]	; (8000dcc <__NVIC_EnableIRQ+0x38>)
 8000dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db2:	095b      	lsrs	r3, r3, #5
 8000db4:	2001      	movs	r0, #1
 8000db6:	fa00 f202 	lsl.w	r2, r0, r2
 8000dba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dbe:	bf00      	nop
 8000dc0:	370c      	adds	r7, #12
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	e000e100 	.word	0xe000e100

08000dd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b083      	sub	sp, #12
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	6039      	str	r1, [r7, #0]
 8000dda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ddc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	db0a      	blt.n	8000dfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	b2da      	uxtb	r2, r3
 8000de8:	490c      	ldr	r1, [pc, #48]	; (8000e1c <__NVIC_SetPriority+0x4c>)
 8000dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dee:	0112      	lsls	r2, r2, #4
 8000df0:	b2d2      	uxtb	r2, r2
 8000df2:	440b      	add	r3, r1
 8000df4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000df8:	e00a      	b.n	8000e10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	b2da      	uxtb	r2, r3
 8000dfe:	4908      	ldr	r1, [pc, #32]	; (8000e20 <__NVIC_SetPriority+0x50>)
 8000e00:	79fb      	ldrb	r3, [r7, #7]
 8000e02:	f003 030f 	and.w	r3, r3, #15
 8000e06:	3b04      	subs	r3, #4
 8000e08:	0112      	lsls	r2, r2, #4
 8000e0a:	b2d2      	uxtb	r2, r2
 8000e0c:	440b      	add	r3, r1
 8000e0e:	761a      	strb	r2, [r3, #24]
}
 8000e10:	bf00      	nop
 8000e12:	370c      	adds	r7, #12
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr
 8000e1c:	e000e100 	.word	0xe000e100
 8000e20:	e000ed00 	.word	0xe000ed00

08000e24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b089      	sub	sp, #36	; 0x24
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	60f8      	str	r0, [r7, #12]
 8000e2c:	60b9      	str	r1, [r7, #8]
 8000e2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	f003 0307 	and.w	r3, r3, #7
 8000e36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e38:	69fb      	ldr	r3, [r7, #28]
 8000e3a:	f1c3 0307 	rsb	r3, r3, #7
 8000e3e:	2b04      	cmp	r3, #4
 8000e40:	bf28      	it	cs
 8000e42:	2304      	movcs	r3, #4
 8000e44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e46:	69fb      	ldr	r3, [r7, #28]
 8000e48:	3304      	adds	r3, #4
 8000e4a:	2b06      	cmp	r3, #6
 8000e4c:	d902      	bls.n	8000e54 <NVIC_EncodePriority+0x30>
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	3b03      	subs	r3, #3
 8000e52:	e000      	b.n	8000e56 <NVIC_EncodePriority+0x32>
 8000e54:	2300      	movs	r3, #0
 8000e56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e5c:	69bb      	ldr	r3, [r7, #24]
 8000e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e62:	43da      	mvns	r2, r3
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	401a      	ands	r2, r3
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e6c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	fa01 f303 	lsl.w	r3, r1, r3
 8000e76:	43d9      	mvns	r1, r3
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e7c:	4313      	orrs	r3, r2
         );
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3724      	adds	r7, #36	; 0x24
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
	...

08000e8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	3b01      	subs	r3, #1
 8000e98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e9c:	d301      	bcc.n	8000ea2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	e00f      	b.n	8000ec2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ea2:	4a0a      	ldr	r2, [pc, #40]	; (8000ecc <SysTick_Config+0x40>)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	3b01      	subs	r3, #1
 8000ea8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eaa:	210f      	movs	r1, #15
 8000eac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000eb0:	f7ff ff8e 	bl	8000dd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000eb4:	4b05      	ldr	r3, [pc, #20]	; (8000ecc <SysTick_Config+0x40>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eba:	4b04      	ldr	r3, [pc, #16]	; (8000ecc <SysTick_Config+0x40>)
 8000ebc:	2207      	movs	r2, #7
 8000ebe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ec0:	2300      	movs	r3, #0
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	e000e010 	.word	0xe000e010

08000ed0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ed8:	6878      	ldr	r0, [r7, #4]
 8000eda:	f7ff ff29 	bl	8000d30 <__NVIC_SetPriorityGrouping>
}
 8000ede:	bf00      	nop
 8000ee0:	3708      	adds	r7, #8
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}

08000ee6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ee6:	b580      	push	{r7, lr}
 8000ee8:	b086      	sub	sp, #24
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	4603      	mov	r3, r0
 8000eee:	60b9      	str	r1, [r7, #8]
 8000ef0:	607a      	str	r2, [r7, #4]
 8000ef2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ef8:	f7ff ff3e 	bl	8000d78 <__NVIC_GetPriorityGrouping>
 8000efc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000efe:	687a      	ldr	r2, [r7, #4]
 8000f00:	68b9      	ldr	r1, [r7, #8]
 8000f02:	6978      	ldr	r0, [r7, #20]
 8000f04:	f7ff ff8e 	bl	8000e24 <NVIC_EncodePriority>
 8000f08:	4602      	mov	r2, r0
 8000f0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f0e:	4611      	mov	r1, r2
 8000f10:	4618      	mov	r0, r3
 8000f12:	f7ff ff5d 	bl	8000dd0 <__NVIC_SetPriority>
}
 8000f16:	bf00      	nop
 8000f18:	3718      	adds	r7, #24
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	b082      	sub	sp, #8
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	4603      	mov	r3, r0
 8000f26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f7ff ff31 	bl	8000d94 <__NVIC_EnableIRQ>
}
 8000f32:	bf00      	nop
 8000f34:	3708      	adds	r7, #8
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}

08000f3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f3a:	b580      	push	{r7, lr}
 8000f3c:	b082      	sub	sp, #8
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f42:	6878      	ldr	r0, [r7, #4]
 8000f44:	f7ff ffa2 	bl	8000e8c <SysTick_Config>
 8000f48:	4603      	mov	r3, r0
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
	...

08000f54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b087      	sub	sp, #28
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
 8000f5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f62:	e14e      	b.n	8001202 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	681a      	ldr	r2, [r3, #0]
 8000f68:	2101      	movs	r1, #1
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f70:	4013      	ands	r3, r2
 8000f72:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	f000 8140 	beq.w	80011fc <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	2b01      	cmp	r3, #1
 8000f82:	d00b      	beq.n	8000f9c <HAL_GPIO_Init+0x48>
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	2b02      	cmp	r3, #2
 8000f8a:	d007      	beq.n	8000f9c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f90:	2b11      	cmp	r3, #17
 8000f92:	d003      	beq.n	8000f9c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	2b12      	cmp	r3, #18
 8000f9a:	d130      	bne.n	8000ffe <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	689b      	ldr	r3, [r3, #8]
 8000fa0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	005b      	lsls	r3, r3, #1
 8000fa6:	2203      	movs	r2, #3
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	43db      	mvns	r3, r3
 8000fae:	693a      	ldr	r2, [r7, #16]
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	68da      	ldr	r2, [r3, #12]
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	005b      	lsls	r3, r3, #1
 8000fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc0:	693a      	ldr	r2, [r7, #16]
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	693a      	ldr	r2, [r7, #16]
 8000fca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fda:	43db      	mvns	r3, r3
 8000fdc:	693a      	ldr	r2, [r7, #16]
 8000fde:	4013      	ands	r3, r2
 8000fe0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	091b      	lsrs	r3, r3, #4
 8000fe8:	f003 0201 	and.w	r2, r3, #1
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff2:	693a      	ldr	r2, [r7, #16]
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	693a      	ldr	r2, [r7, #16]
 8000ffc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	68db      	ldr	r3, [r3, #12]
 8001002:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	005b      	lsls	r3, r3, #1
 8001008:	2203      	movs	r2, #3
 800100a:	fa02 f303 	lsl.w	r3, r2, r3
 800100e:	43db      	mvns	r3, r3
 8001010:	693a      	ldr	r2, [r7, #16]
 8001012:	4013      	ands	r3, r2
 8001014:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	689a      	ldr	r2, [r3, #8]
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	005b      	lsls	r3, r3, #1
 800101e:	fa02 f303 	lsl.w	r3, r2, r3
 8001022:	693a      	ldr	r2, [r7, #16]
 8001024:	4313      	orrs	r3, r2
 8001026:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	693a      	ldr	r2, [r7, #16]
 800102c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	2b02      	cmp	r3, #2
 8001034:	d003      	beq.n	800103e <HAL_GPIO_Init+0xea>
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	2b12      	cmp	r3, #18
 800103c:	d123      	bne.n	8001086 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	08da      	lsrs	r2, r3, #3
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	3208      	adds	r2, #8
 8001046:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800104a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	f003 0307 	and.w	r3, r3, #7
 8001052:	009b      	lsls	r3, r3, #2
 8001054:	220f      	movs	r2, #15
 8001056:	fa02 f303 	lsl.w	r3, r2, r3
 800105a:	43db      	mvns	r3, r3
 800105c:	693a      	ldr	r2, [r7, #16]
 800105e:	4013      	ands	r3, r2
 8001060:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	691a      	ldr	r2, [r3, #16]
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	f003 0307 	and.w	r3, r3, #7
 800106c:	009b      	lsls	r3, r3, #2
 800106e:	fa02 f303 	lsl.w	r3, r2, r3
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	4313      	orrs	r3, r2
 8001076:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	08da      	lsrs	r2, r3, #3
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	3208      	adds	r2, #8
 8001080:	6939      	ldr	r1, [r7, #16]
 8001082:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	005b      	lsls	r3, r3, #1
 8001090:	2203      	movs	r2, #3
 8001092:	fa02 f303 	lsl.w	r3, r2, r3
 8001096:	43db      	mvns	r3, r3
 8001098:	693a      	ldr	r2, [r7, #16]
 800109a:	4013      	ands	r3, r2
 800109c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	f003 0203 	and.w	r2, r3, #3
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	005b      	lsls	r3, r3, #1
 80010aa:	fa02 f303 	lsl.w	r3, r2, r3
 80010ae:	693a      	ldr	r2, [r7, #16]
 80010b0:	4313      	orrs	r3, r2
 80010b2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	693a      	ldr	r2, [r7, #16]
 80010b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	f000 809a 	beq.w	80011fc <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010c8:	4b55      	ldr	r3, [pc, #340]	; (8001220 <HAL_GPIO_Init+0x2cc>)
 80010ca:	699b      	ldr	r3, [r3, #24]
 80010cc:	4a54      	ldr	r2, [pc, #336]	; (8001220 <HAL_GPIO_Init+0x2cc>)
 80010ce:	f043 0301 	orr.w	r3, r3, #1
 80010d2:	6193      	str	r3, [r2, #24]
 80010d4:	4b52      	ldr	r3, [pc, #328]	; (8001220 <HAL_GPIO_Init+0x2cc>)
 80010d6:	699b      	ldr	r3, [r3, #24]
 80010d8:	f003 0301 	and.w	r3, r3, #1
 80010dc:	60bb      	str	r3, [r7, #8]
 80010de:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80010e0:	4a50      	ldr	r2, [pc, #320]	; (8001224 <HAL_GPIO_Init+0x2d0>)
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	089b      	lsrs	r3, r3, #2
 80010e6:	3302      	adds	r3, #2
 80010e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	f003 0303 	and.w	r3, r3, #3
 80010f4:	009b      	lsls	r3, r3, #2
 80010f6:	220f      	movs	r2, #15
 80010f8:	fa02 f303 	lsl.w	r3, r2, r3
 80010fc:	43db      	mvns	r3, r3
 80010fe:	693a      	ldr	r2, [r7, #16]
 8001100:	4013      	ands	r3, r2
 8001102:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800110a:	d013      	beq.n	8001134 <HAL_GPIO_Init+0x1e0>
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	4a46      	ldr	r2, [pc, #280]	; (8001228 <HAL_GPIO_Init+0x2d4>)
 8001110:	4293      	cmp	r3, r2
 8001112:	d00d      	beq.n	8001130 <HAL_GPIO_Init+0x1dc>
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	4a45      	ldr	r2, [pc, #276]	; (800122c <HAL_GPIO_Init+0x2d8>)
 8001118:	4293      	cmp	r3, r2
 800111a:	d007      	beq.n	800112c <HAL_GPIO_Init+0x1d8>
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	4a44      	ldr	r2, [pc, #272]	; (8001230 <HAL_GPIO_Init+0x2dc>)
 8001120:	4293      	cmp	r3, r2
 8001122:	d101      	bne.n	8001128 <HAL_GPIO_Init+0x1d4>
 8001124:	2303      	movs	r3, #3
 8001126:	e006      	b.n	8001136 <HAL_GPIO_Init+0x1e2>
 8001128:	2305      	movs	r3, #5
 800112a:	e004      	b.n	8001136 <HAL_GPIO_Init+0x1e2>
 800112c:	2302      	movs	r3, #2
 800112e:	e002      	b.n	8001136 <HAL_GPIO_Init+0x1e2>
 8001130:	2301      	movs	r3, #1
 8001132:	e000      	b.n	8001136 <HAL_GPIO_Init+0x1e2>
 8001134:	2300      	movs	r3, #0
 8001136:	697a      	ldr	r2, [r7, #20]
 8001138:	f002 0203 	and.w	r2, r2, #3
 800113c:	0092      	lsls	r2, r2, #2
 800113e:	4093      	lsls	r3, r2
 8001140:	693a      	ldr	r2, [r7, #16]
 8001142:	4313      	orrs	r3, r2
 8001144:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001146:	4937      	ldr	r1, [pc, #220]	; (8001224 <HAL_GPIO_Init+0x2d0>)
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	089b      	lsrs	r3, r3, #2
 800114c:	3302      	adds	r3, #2
 800114e:	693a      	ldr	r2, [r7, #16]
 8001150:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001154:	4b37      	ldr	r3, [pc, #220]	; (8001234 <HAL_GPIO_Init+0x2e0>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	43db      	mvns	r3, r3
 800115e:	693a      	ldr	r2, [r7, #16]
 8001160:	4013      	ands	r3, r2
 8001162:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800116c:	2b00      	cmp	r3, #0
 800116e:	d003      	beq.n	8001178 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001170:	693a      	ldr	r2, [r7, #16]
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	4313      	orrs	r3, r2
 8001176:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001178:	4a2e      	ldr	r2, [pc, #184]	; (8001234 <HAL_GPIO_Init+0x2e0>)
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800117e:	4b2d      	ldr	r3, [pc, #180]	; (8001234 <HAL_GPIO_Init+0x2e0>)
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	43db      	mvns	r3, r3
 8001188:	693a      	ldr	r2, [r7, #16]
 800118a:	4013      	ands	r3, r2
 800118c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001196:	2b00      	cmp	r3, #0
 8001198:	d003      	beq.n	80011a2 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800119a:	693a      	ldr	r2, [r7, #16]
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	4313      	orrs	r3, r2
 80011a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80011a2:	4a24      	ldr	r2, [pc, #144]	; (8001234 <HAL_GPIO_Init+0x2e0>)
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011a8:	4b22      	ldr	r3, [pc, #136]	; (8001234 <HAL_GPIO_Init+0x2e0>)
 80011aa:	689b      	ldr	r3, [r3, #8]
 80011ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	43db      	mvns	r3, r3
 80011b2:	693a      	ldr	r2, [r7, #16]
 80011b4:	4013      	ands	r3, r2
 80011b6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d003      	beq.n	80011cc <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80011c4:	693a      	ldr	r2, [r7, #16]
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	4313      	orrs	r3, r2
 80011ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80011cc:	4a19      	ldr	r2, [pc, #100]	; (8001234 <HAL_GPIO_Init+0x2e0>)
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011d2:	4b18      	ldr	r3, [pc, #96]	; (8001234 <HAL_GPIO_Init+0x2e0>)
 80011d4:	68db      	ldr	r3, [r3, #12]
 80011d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	43db      	mvns	r3, r3
 80011dc:	693a      	ldr	r2, [r7, #16]
 80011de:	4013      	ands	r3, r2
 80011e0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d003      	beq.n	80011f6 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80011ee:	693a      	ldr	r2, [r7, #16]
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	4313      	orrs	r3, r2
 80011f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80011f6:	4a0f      	ldr	r2, [pc, #60]	; (8001234 <HAL_GPIO_Init+0x2e0>)
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	3301      	adds	r3, #1
 8001200:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	fa22 f303 	lsr.w	r3, r2, r3
 800120c:	2b00      	cmp	r3, #0
 800120e:	f47f aea9 	bne.w	8000f64 <HAL_GPIO_Init+0x10>
  }
}
 8001212:	bf00      	nop
 8001214:	bf00      	nop
 8001216:	371c      	adds	r7, #28
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr
 8001220:	40021000 	.word	0x40021000
 8001224:	40010000 	.word	0x40010000
 8001228:	48000400 	.word	0x48000400
 800122c:	48000800 	.word	0x48000800
 8001230:	48000c00 	.word	0x48000c00
 8001234:	40010400 	.word	0x40010400

08001238 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	4603      	mov	r3, r0
 8001240:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001242:	4b08      	ldr	r3, [pc, #32]	; (8001264 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001244:	695a      	ldr	r2, [r3, #20]
 8001246:	88fb      	ldrh	r3, [r7, #6]
 8001248:	4013      	ands	r3, r2
 800124a:	2b00      	cmp	r3, #0
 800124c:	d006      	beq.n	800125c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800124e:	4a05      	ldr	r2, [pc, #20]	; (8001264 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001250:	88fb      	ldrh	r3, [r7, #6]
 8001252:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001254:	88fb      	ldrh	r3, [r7, #6]
 8001256:	4618      	mov	r0, r3
 8001258:	f7ff f830 	bl	80002bc <HAL_GPIO_EXTI_Callback>
  }
}
 800125c:	bf00      	nop
 800125e:	3708      	adds	r7, #8
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	40010400 	.word	0x40010400

08001268 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800126e:	af00      	add	r7, sp, #0
 8001270:	1d3b      	adds	r3, r7, #4
 8001272:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001274:	1d3b      	adds	r3, r7, #4
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d102      	bne.n	8001282 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800127c:	2301      	movs	r3, #1
 800127e:	f000 bef4 	b.w	800206a <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001282:	1d3b      	adds	r3, r7, #4
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f003 0301 	and.w	r3, r3, #1
 800128c:	2b00      	cmp	r3, #0
 800128e:	f000 816a 	beq.w	8001566 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001292:	4bb3      	ldr	r3, [pc, #716]	; (8001560 <HAL_RCC_OscConfig+0x2f8>)
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	f003 030c 	and.w	r3, r3, #12
 800129a:	2b04      	cmp	r3, #4
 800129c:	d00c      	beq.n	80012b8 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800129e:	4bb0      	ldr	r3, [pc, #704]	; (8001560 <HAL_RCC_OscConfig+0x2f8>)
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	f003 030c 	and.w	r3, r3, #12
 80012a6:	2b08      	cmp	r3, #8
 80012a8:	d159      	bne.n	800135e <HAL_RCC_OscConfig+0xf6>
 80012aa:	4bad      	ldr	r3, [pc, #692]	; (8001560 <HAL_RCC_OscConfig+0x2f8>)
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012b6:	d152      	bne.n	800135e <HAL_RCC_OscConfig+0xf6>
 80012b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012bc:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012c0:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80012c4:	fa93 f3a3 	rbit	r3, r3
 80012c8:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80012cc:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012d0:	fab3 f383 	clz	r3, r3
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	095b      	lsrs	r3, r3, #5
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	f043 0301 	orr.w	r3, r3, #1
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d102      	bne.n	80012ea <HAL_RCC_OscConfig+0x82>
 80012e4:	4b9e      	ldr	r3, [pc, #632]	; (8001560 <HAL_RCC_OscConfig+0x2f8>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	e015      	b.n	8001316 <HAL_RCC_OscConfig+0xae>
 80012ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012ee:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012f2:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80012f6:	fa93 f3a3 	rbit	r3, r3
 80012fa:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80012fe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001302:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001306:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800130a:	fa93 f3a3 	rbit	r3, r3
 800130e:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001312:	4b93      	ldr	r3, [pc, #588]	; (8001560 <HAL_RCC_OscConfig+0x2f8>)
 8001314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001316:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800131a:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800131e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001322:	fa92 f2a2 	rbit	r2, r2
 8001326:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800132a:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800132e:	fab2 f282 	clz	r2, r2
 8001332:	b2d2      	uxtb	r2, r2
 8001334:	f042 0220 	orr.w	r2, r2, #32
 8001338:	b2d2      	uxtb	r2, r2
 800133a:	f002 021f 	and.w	r2, r2, #31
 800133e:	2101      	movs	r1, #1
 8001340:	fa01 f202 	lsl.w	r2, r1, r2
 8001344:	4013      	ands	r3, r2
 8001346:	2b00      	cmp	r3, #0
 8001348:	f000 810c 	beq.w	8001564 <HAL_RCC_OscConfig+0x2fc>
 800134c:	1d3b      	adds	r3, r7, #4
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	2b00      	cmp	r3, #0
 8001354:	f040 8106 	bne.w	8001564 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8001358:	2301      	movs	r3, #1
 800135a:	f000 be86 	b.w	800206a <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800135e:	1d3b      	adds	r3, r7, #4
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001368:	d106      	bne.n	8001378 <HAL_RCC_OscConfig+0x110>
 800136a:	4b7d      	ldr	r3, [pc, #500]	; (8001560 <HAL_RCC_OscConfig+0x2f8>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a7c      	ldr	r2, [pc, #496]	; (8001560 <HAL_RCC_OscConfig+0x2f8>)
 8001370:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001374:	6013      	str	r3, [r2, #0]
 8001376:	e030      	b.n	80013da <HAL_RCC_OscConfig+0x172>
 8001378:	1d3b      	adds	r3, r7, #4
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d10c      	bne.n	800139c <HAL_RCC_OscConfig+0x134>
 8001382:	4b77      	ldr	r3, [pc, #476]	; (8001560 <HAL_RCC_OscConfig+0x2f8>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a76      	ldr	r2, [pc, #472]	; (8001560 <HAL_RCC_OscConfig+0x2f8>)
 8001388:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800138c:	6013      	str	r3, [r2, #0]
 800138e:	4b74      	ldr	r3, [pc, #464]	; (8001560 <HAL_RCC_OscConfig+0x2f8>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a73      	ldr	r2, [pc, #460]	; (8001560 <HAL_RCC_OscConfig+0x2f8>)
 8001394:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001398:	6013      	str	r3, [r2, #0]
 800139a:	e01e      	b.n	80013da <HAL_RCC_OscConfig+0x172>
 800139c:	1d3b      	adds	r3, r7, #4
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013a6:	d10c      	bne.n	80013c2 <HAL_RCC_OscConfig+0x15a>
 80013a8:	4b6d      	ldr	r3, [pc, #436]	; (8001560 <HAL_RCC_OscConfig+0x2f8>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a6c      	ldr	r2, [pc, #432]	; (8001560 <HAL_RCC_OscConfig+0x2f8>)
 80013ae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013b2:	6013      	str	r3, [r2, #0]
 80013b4:	4b6a      	ldr	r3, [pc, #424]	; (8001560 <HAL_RCC_OscConfig+0x2f8>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a69      	ldr	r2, [pc, #420]	; (8001560 <HAL_RCC_OscConfig+0x2f8>)
 80013ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013be:	6013      	str	r3, [r2, #0]
 80013c0:	e00b      	b.n	80013da <HAL_RCC_OscConfig+0x172>
 80013c2:	4b67      	ldr	r3, [pc, #412]	; (8001560 <HAL_RCC_OscConfig+0x2f8>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a66      	ldr	r2, [pc, #408]	; (8001560 <HAL_RCC_OscConfig+0x2f8>)
 80013c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013cc:	6013      	str	r3, [r2, #0]
 80013ce:	4b64      	ldr	r3, [pc, #400]	; (8001560 <HAL_RCC_OscConfig+0x2f8>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4a63      	ldr	r2, [pc, #396]	; (8001560 <HAL_RCC_OscConfig+0x2f8>)
 80013d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013d8:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80013da:	4b61      	ldr	r3, [pc, #388]	; (8001560 <HAL_RCC_OscConfig+0x2f8>)
 80013dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013de:	f023 020f 	bic.w	r2, r3, #15
 80013e2:	1d3b      	adds	r3, r7, #4
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	495d      	ldr	r1, [pc, #372]	; (8001560 <HAL_RCC_OscConfig+0x2f8>)
 80013ea:	4313      	orrs	r3, r2
 80013ec:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013ee:	1d3b      	adds	r3, r7, #4
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d059      	beq.n	80014ac <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013f8:	f7ff fc6a 	bl	8000cd0 <HAL_GetTick>
 80013fc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001400:	e00a      	b.n	8001418 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001402:	f7ff fc65 	bl	8000cd0 <HAL_GetTick>
 8001406:	4602      	mov	r2, r0
 8001408:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800140c:	1ad3      	subs	r3, r2, r3
 800140e:	2b64      	cmp	r3, #100	; 0x64
 8001410:	d902      	bls.n	8001418 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8001412:	2303      	movs	r3, #3
 8001414:	f000 be29 	b.w	800206a <HAL_RCC_OscConfig+0xe02>
 8001418:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800141c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001420:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001424:	fa93 f3a3 	rbit	r3, r3
 8001428:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800142c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001430:	fab3 f383 	clz	r3, r3
 8001434:	b2db      	uxtb	r3, r3
 8001436:	095b      	lsrs	r3, r3, #5
 8001438:	b2db      	uxtb	r3, r3
 800143a:	f043 0301 	orr.w	r3, r3, #1
 800143e:	b2db      	uxtb	r3, r3
 8001440:	2b01      	cmp	r3, #1
 8001442:	d102      	bne.n	800144a <HAL_RCC_OscConfig+0x1e2>
 8001444:	4b46      	ldr	r3, [pc, #280]	; (8001560 <HAL_RCC_OscConfig+0x2f8>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	e015      	b.n	8001476 <HAL_RCC_OscConfig+0x20e>
 800144a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800144e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001452:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001456:	fa93 f3a3 	rbit	r3, r3
 800145a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800145e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001462:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001466:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800146a:	fa93 f3a3 	rbit	r3, r3
 800146e:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001472:	4b3b      	ldr	r3, [pc, #236]	; (8001560 <HAL_RCC_OscConfig+0x2f8>)
 8001474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001476:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800147a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800147e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001482:	fa92 f2a2 	rbit	r2, r2
 8001486:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800148a:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800148e:	fab2 f282 	clz	r2, r2
 8001492:	b2d2      	uxtb	r2, r2
 8001494:	f042 0220 	orr.w	r2, r2, #32
 8001498:	b2d2      	uxtb	r2, r2
 800149a:	f002 021f 	and.w	r2, r2, #31
 800149e:	2101      	movs	r1, #1
 80014a0:	fa01 f202 	lsl.w	r2, r1, r2
 80014a4:	4013      	ands	r3, r2
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d0ab      	beq.n	8001402 <HAL_RCC_OscConfig+0x19a>
 80014aa:	e05c      	b.n	8001566 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ac:	f7ff fc10 	bl	8000cd0 <HAL_GetTick>
 80014b0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014b4:	e00a      	b.n	80014cc <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014b6:	f7ff fc0b 	bl	8000cd0 <HAL_GetTick>
 80014ba:	4602      	mov	r2, r0
 80014bc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	2b64      	cmp	r3, #100	; 0x64
 80014c4:	d902      	bls.n	80014cc <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 80014c6:	2303      	movs	r3, #3
 80014c8:	f000 bdcf 	b.w	800206a <HAL_RCC_OscConfig+0xe02>
 80014cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014d0:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014d4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80014d8:	fa93 f3a3 	rbit	r3, r3
 80014dc:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80014e0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014e4:	fab3 f383 	clz	r3, r3
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	095b      	lsrs	r3, r3, #5
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	f043 0301 	orr.w	r3, r3, #1
 80014f2:	b2db      	uxtb	r3, r3
 80014f4:	2b01      	cmp	r3, #1
 80014f6:	d102      	bne.n	80014fe <HAL_RCC_OscConfig+0x296>
 80014f8:	4b19      	ldr	r3, [pc, #100]	; (8001560 <HAL_RCC_OscConfig+0x2f8>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	e015      	b.n	800152a <HAL_RCC_OscConfig+0x2c2>
 80014fe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001502:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001506:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800150a:	fa93 f3a3 	rbit	r3, r3
 800150e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001512:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001516:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800151a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800151e:	fa93 f3a3 	rbit	r3, r3
 8001522:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001526:	4b0e      	ldr	r3, [pc, #56]	; (8001560 <HAL_RCC_OscConfig+0x2f8>)
 8001528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800152a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800152e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001532:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001536:	fa92 f2a2 	rbit	r2, r2
 800153a:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800153e:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001542:	fab2 f282 	clz	r2, r2
 8001546:	b2d2      	uxtb	r2, r2
 8001548:	f042 0220 	orr.w	r2, r2, #32
 800154c:	b2d2      	uxtb	r2, r2
 800154e:	f002 021f 	and.w	r2, r2, #31
 8001552:	2101      	movs	r1, #1
 8001554:	fa01 f202 	lsl.w	r2, r1, r2
 8001558:	4013      	ands	r3, r2
 800155a:	2b00      	cmp	r3, #0
 800155c:	d1ab      	bne.n	80014b6 <HAL_RCC_OscConfig+0x24e>
 800155e:	e002      	b.n	8001566 <HAL_RCC_OscConfig+0x2fe>
 8001560:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001564:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001566:	1d3b      	adds	r3, r7, #4
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f003 0302 	and.w	r3, r3, #2
 8001570:	2b00      	cmp	r3, #0
 8001572:	f000 816f 	beq.w	8001854 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001576:	4bd0      	ldr	r3, [pc, #832]	; (80018b8 <HAL_RCC_OscConfig+0x650>)
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	f003 030c 	and.w	r3, r3, #12
 800157e:	2b00      	cmp	r3, #0
 8001580:	d00b      	beq.n	800159a <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001582:	4bcd      	ldr	r3, [pc, #820]	; (80018b8 <HAL_RCC_OscConfig+0x650>)
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	f003 030c 	and.w	r3, r3, #12
 800158a:	2b08      	cmp	r3, #8
 800158c:	d16c      	bne.n	8001668 <HAL_RCC_OscConfig+0x400>
 800158e:	4bca      	ldr	r3, [pc, #808]	; (80018b8 <HAL_RCC_OscConfig+0x650>)
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001596:	2b00      	cmp	r3, #0
 8001598:	d166      	bne.n	8001668 <HAL_RCC_OscConfig+0x400>
 800159a:	2302      	movs	r3, #2
 800159c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015a0:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80015a4:	fa93 f3a3 	rbit	r3, r3
 80015a8:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80015ac:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015b0:	fab3 f383 	clz	r3, r3
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	095b      	lsrs	r3, r3, #5
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	f043 0301 	orr.w	r3, r3, #1
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d102      	bne.n	80015ca <HAL_RCC_OscConfig+0x362>
 80015c4:	4bbc      	ldr	r3, [pc, #752]	; (80018b8 <HAL_RCC_OscConfig+0x650>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	e013      	b.n	80015f2 <HAL_RCC_OscConfig+0x38a>
 80015ca:	2302      	movs	r3, #2
 80015cc:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015d0:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80015d4:	fa93 f3a3 	rbit	r3, r3
 80015d8:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80015dc:	2302      	movs	r3, #2
 80015de:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80015e2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80015e6:	fa93 f3a3 	rbit	r3, r3
 80015ea:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80015ee:	4bb2      	ldr	r3, [pc, #712]	; (80018b8 <HAL_RCC_OscConfig+0x650>)
 80015f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f2:	2202      	movs	r2, #2
 80015f4:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80015f8:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80015fc:	fa92 f2a2 	rbit	r2, r2
 8001600:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001604:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001608:	fab2 f282 	clz	r2, r2
 800160c:	b2d2      	uxtb	r2, r2
 800160e:	f042 0220 	orr.w	r2, r2, #32
 8001612:	b2d2      	uxtb	r2, r2
 8001614:	f002 021f 	and.w	r2, r2, #31
 8001618:	2101      	movs	r1, #1
 800161a:	fa01 f202 	lsl.w	r2, r1, r2
 800161e:	4013      	ands	r3, r2
 8001620:	2b00      	cmp	r3, #0
 8001622:	d007      	beq.n	8001634 <HAL_RCC_OscConfig+0x3cc>
 8001624:	1d3b      	adds	r3, r7, #4
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	691b      	ldr	r3, [r3, #16]
 800162a:	2b01      	cmp	r3, #1
 800162c:	d002      	beq.n	8001634 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
 8001630:	f000 bd1b 	b.w	800206a <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001634:	4ba0      	ldr	r3, [pc, #640]	; (80018b8 <HAL_RCC_OscConfig+0x650>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800163c:	1d3b      	adds	r3, r7, #4
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	695b      	ldr	r3, [r3, #20]
 8001642:	21f8      	movs	r1, #248	; 0xf8
 8001644:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001648:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800164c:	fa91 f1a1 	rbit	r1, r1
 8001650:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001654:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001658:	fab1 f181 	clz	r1, r1
 800165c:	b2c9      	uxtb	r1, r1
 800165e:	408b      	lsls	r3, r1
 8001660:	4995      	ldr	r1, [pc, #596]	; (80018b8 <HAL_RCC_OscConfig+0x650>)
 8001662:	4313      	orrs	r3, r2
 8001664:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001666:	e0f5      	b.n	8001854 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001668:	1d3b      	adds	r3, r7, #4
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	691b      	ldr	r3, [r3, #16]
 800166e:	2b00      	cmp	r3, #0
 8001670:	f000 8085 	beq.w	800177e <HAL_RCC_OscConfig+0x516>
 8001674:	2301      	movs	r3, #1
 8001676:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800167a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800167e:	fa93 f3a3 	rbit	r3, r3
 8001682:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001686:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800168a:	fab3 f383 	clz	r3, r3
 800168e:	b2db      	uxtb	r3, r3
 8001690:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001694:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001698:	009b      	lsls	r3, r3, #2
 800169a:	461a      	mov	r2, r3
 800169c:	2301      	movs	r3, #1
 800169e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a0:	f7ff fb16 	bl	8000cd0 <HAL_GetTick>
 80016a4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016a8:	e00a      	b.n	80016c0 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016aa:	f7ff fb11 	bl	8000cd0 <HAL_GetTick>
 80016ae:	4602      	mov	r2, r0
 80016b0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	2b02      	cmp	r3, #2
 80016b8:	d902      	bls.n	80016c0 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 80016ba:	2303      	movs	r3, #3
 80016bc:	f000 bcd5 	b.w	800206a <HAL_RCC_OscConfig+0xe02>
 80016c0:	2302      	movs	r3, #2
 80016c2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016c6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80016ca:	fa93 f3a3 	rbit	r3, r3
 80016ce:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80016d2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016d6:	fab3 f383 	clz	r3, r3
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	095b      	lsrs	r3, r3, #5
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	f043 0301 	orr.w	r3, r3, #1
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d102      	bne.n	80016f0 <HAL_RCC_OscConfig+0x488>
 80016ea:	4b73      	ldr	r3, [pc, #460]	; (80018b8 <HAL_RCC_OscConfig+0x650>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	e013      	b.n	8001718 <HAL_RCC_OscConfig+0x4b0>
 80016f0:	2302      	movs	r3, #2
 80016f2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016f6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80016fa:	fa93 f3a3 	rbit	r3, r3
 80016fe:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001702:	2302      	movs	r3, #2
 8001704:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001708:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800170c:	fa93 f3a3 	rbit	r3, r3
 8001710:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001714:	4b68      	ldr	r3, [pc, #416]	; (80018b8 <HAL_RCC_OscConfig+0x650>)
 8001716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001718:	2202      	movs	r2, #2
 800171a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800171e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001722:	fa92 f2a2 	rbit	r2, r2
 8001726:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800172a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800172e:	fab2 f282 	clz	r2, r2
 8001732:	b2d2      	uxtb	r2, r2
 8001734:	f042 0220 	orr.w	r2, r2, #32
 8001738:	b2d2      	uxtb	r2, r2
 800173a:	f002 021f 	and.w	r2, r2, #31
 800173e:	2101      	movs	r1, #1
 8001740:	fa01 f202 	lsl.w	r2, r1, r2
 8001744:	4013      	ands	r3, r2
 8001746:	2b00      	cmp	r3, #0
 8001748:	d0af      	beq.n	80016aa <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800174a:	4b5b      	ldr	r3, [pc, #364]	; (80018b8 <HAL_RCC_OscConfig+0x650>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001752:	1d3b      	adds	r3, r7, #4
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	695b      	ldr	r3, [r3, #20]
 8001758:	21f8      	movs	r1, #248	; 0xf8
 800175a:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800175e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001762:	fa91 f1a1 	rbit	r1, r1
 8001766:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800176a:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800176e:	fab1 f181 	clz	r1, r1
 8001772:	b2c9      	uxtb	r1, r1
 8001774:	408b      	lsls	r3, r1
 8001776:	4950      	ldr	r1, [pc, #320]	; (80018b8 <HAL_RCC_OscConfig+0x650>)
 8001778:	4313      	orrs	r3, r2
 800177a:	600b      	str	r3, [r1, #0]
 800177c:	e06a      	b.n	8001854 <HAL_RCC_OscConfig+0x5ec>
 800177e:	2301      	movs	r3, #1
 8001780:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001784:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001788:	fa93 f3a3 	rbit	r3, r3
 800178c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001790:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001794:	fab3 f383 	clz	r3, r3
 8001798:	b2db      	uxtb	r3, r3
 800179a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800179e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	461a      	mov	r2, r3
 80017a6:	2300      	movs	r3, #0
 80017a8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017aa:	f7ff fa91 	bl	8000cd0 <HAL_GetTick>
 80017ae:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017b2:	e00a      	b.n	80017ca <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017b4:	f7ff fa8c 	bl	8000cd0 <HAL_GetTick>
 80017b8:	4602      	mov	r2, r0
 80017ba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80017be:	1ad3      	subs	r3, r2, r3
 80017c0:	2b02      	cmp	r3, #2
 80017c2:	d902      	bls.n	80017ca <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 80017c4:	2303      	movs	r3, #3
 80017c6:	f000 bc50 	b.w	800206a <HAL_RCC_OscConfig+0xe02>
 80017ca:	2302      	movs	r3, #2
 80017cc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017d0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80017d4:	fa93 f3a3 	rbit	r3, r3
 80017d8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80017dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017e0:	fab3 f383 	clz	r3, r3
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	095b      	lsrs	r3, r3, #5
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	f043 0301 	orr.w	r3, r3, #1
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d102      	bne.n	80017fa <HAL_RCC_OscConfig+0x592>
 80017f4:	4b30      	ldr	r3, [pc, #192]	; (80018b8 <HAL_RCC_OscConfig+0x650>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	e013      	b.n	8001822 <HAL_RCC_OscConfig+0x5ba>
 80017fa:	2302      	movs	r3, #2
 80017fc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001800:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001804:	fa93 f3a3 	rbit	r3, r3
 8001808:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800180c:	2302      	movs	r3, #2
 800180e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001812:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001816:	fa93 f3a3 	rbit	r3, r3
 800181a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800181e:	4b26      	ldr	r3, [pc, #152]	; (80018b8 <HAL_RCC_OscConfig+0x650>)
 8001820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001822:	2202      	movs	r2, #2
 8001824:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001828:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800182c:	fa92 f2a2 	rbit	r2, r2
 8001830:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001834:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001838:	fab2 f282 	clz	r2, r2
 800183c:	b2d2      	uxtb	r2, r2
 800183e:	f042 0220 	orr.w	r2, r2, #32
 8001842:	b2d2      	uxtb	r2, r2
 8001844:	f002 021f 	and.w	r2, r2, #31
 8001848:	2101      	movs	r1, #1
 800184a:	fa01 f202 	lsl.w	r2, r1, r2
 800184e:	4013      	ands	r3, r2
 8001850:	2b00      	cmp	r3, #0
 8001852:	d1af      	bne.n	80017b4 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001854:	1d3b      	adds	r3, r7, #4
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 0308 	and.w	r3, r3, #8
 800185e:	2b00      	cmp	r3, #0
 8001860:	f000 80da 	beq.w	8001a18 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001864:	1d3b      	adds	r3, r7, #4
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	699b      	ldr	r3, [r3, #24]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d069      	beq.n	8001942 <HAL_RCC_OscConfig+0x6da>
 800186e:	2301      	movs	r3, #1
 8001870:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001874:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001878:	fa93 f3a3 	rbit	r3, r3
 800187c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001880:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001884:	fab3 f383 	clz	r3, r3
 8001888:	b2db      	uxtb	r3, r3
 800188a:	461a      	mov	r2, r3
 800188c:	4b0b      	ldr	r3, [pc, #44]	; (80018bc <HAL_RCC_OscConfig+0x654>)
 800188e:	4413      	add	r3, r2
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	461a      	mov	r2, r3
 8001894:	2301      	movs	r3, #1
 8001896:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001898:	f7ff fa1a 	bl	8000cd0 <HAL_GetTick>
 800189c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018a0:	e00e      	b.n	80018c0 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018a2:	f7ff fa15 	bl	8000cd0 <HAL_GetTick>
 80018a6:	4602      	mov	r2, r0
 80018a8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	2b02      	cmp	r3, #2
 80018b0:	d906      	bls.n	80018c0 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 80018b2:	2303      	movs	r3, #3
 80018b4:	e3d9      	b.n	800206a <HAL_RCC_OscConfig+0xe02>
 80018b6:	bf00      	nop
 80018b8:	40021000 	.word	0x40021000
 80018bc:	10908120 	.word	0x10908120
 80018c0:	2302      	movs	r3, #2
 80018c2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018c6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80018ca:	fa93 f3a3 	rbit	r3, r3
 80018ce:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80018d2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80018d6:	2202      	movs	r2, #2
 80018d8:	601a      	str	r2, [r3, #0]
 80018da:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	fa93 f2a3 	rbit	r2, r3
 80018e4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80018e8:	601a      	str	r2, [r3, #0]
 80018ea:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80018ee:	2202      	movs	r2, #2
 80018f0:	601a      	str	r2, [r3, #0]
 80018f2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	fa93 f2a3 	rbit	r2, r3
 80018fc:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001900:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001902:	4ba5      	ldr	r3, [pc, #660]	; (8001b98 <HAL_RCC_OscConfig+0x930>)
 8001904:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001906:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800190a:	2102      	movs	r1, #2
 800190c:	6019      	str	r1, [r3, #0]
 800190e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	fa93 f1a3 	rbit	r1, r3
 8001918:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800191c:	6019      	str	r1, [r3, #0]
  return result;
 800191e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	fab3 f383 	clz	r3, r3
 8001928:	b2db      	uxtb	r3, r3
 800192a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800192e:	b2db      	uxtb	r3, r3
 8001930:	f003 031f 	and.w	r3, r3, #31
 8001934:	2101      	movs	r1, #1
 8001936:	fa01 f303 	lsl.w	r3, r1, r3
 800193a:	4013      	ands	r3, r2
 800193c:	2b00      	cmp	r3, #0
 800193e:	d0b0      	beq.n	80018a2 <HAL_RCC_OscConfig+0x63a>
 8001940:	e06a      	b.n	8001a18 <HAL_RCC_OscConfig+0x7b0>
 8001942:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001946:	2201      	movs	r2, #1
 8001948:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800194a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	fa93 f2a3 	rbit	r2, r3
 8001954:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001958:	601a      	str	r2, [r3, #0]
  return result;
 800195a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800195e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001960:	fab3 f383 	clz	r3, r3
 8001964:	b2db      	uxtb	r3, r3
 8001966:	461a      	mov	r2, r3
 8001968:	4b8c      	ldr	r3, [pc, #560]	; (8001b9c <HAL_RCC_OscConfig+0x934>)
 800196a:	4413      	add	r3, r2
 800196c:	009b      	lsls	r3, r3, #2
 800196e:	461a      	mov	r2, r3
 8001970:	2300      	movs	r3, #0
 8001972:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001974:	f7ff f9ac 	bl	8000cd0 <HAL_GetTick>
 8001978:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800197c:	e009      	b.n	8001992 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800197e:	f7ff f9a7 	bl	8000cd0 <HAL_GetTick>
 8001982:	4602      	mov	r2, r0
 8001984:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	2b02      	cmp	r3, #2
 800198c:	d901      	bls.n	8001992 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 800198e:	2303      	movs	r3, #3
 8001990:	e36b      	b.n	800206a <HAL_RCC_OscConfig+0xe02>
 8001992:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001996:	2202      	movs	r2, #2
 8001998:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800199a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	fa93 f2a3 	rbit	r2, r3
 80019a4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80019a8:	601a      	str	r2, [r3, #0]
 80019aa:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80019ae:	2202      	movs	r2, #2
 80019b0:	601a      	str	r2, [r3, #0]
 80019b2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	fa93 f2a3 	rbit	r2, r3
 80019bc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80019c0:	601a      	str	r2, [r3, #0]
 80019c2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80019c6:	2202      	movs	r2, #2
 80019c8:	601a      	str	r2, [r3, #0]
 80019ca:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	fa93 f2a3 	rbit	r2, r3
 80019d4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80019d8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019da:	4b6f      	ldr	r3, [pc, #444]	; (8001b98 <HAL_RCC_OscConfig+0x930>)
 80019dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019de:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80019e2:	2102      	movs	r1, #2
 80019e4:	6019      	str	r1, [r3, #0]
 80019e6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	fa93 f1a3 	rbit	r1, r3
 80019f0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80019f4:	6019      	str	r1, [r3, #0]
  return result;
 80019f6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	fab3 f383 	clz	r3, r3
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	f003 031f 	and.w	r3, r3, #31
 8001a0c:	2101      	movs	r1, #1
 8001a0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a12:	4013      	ands	r3, r2
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d1b2      	bne.n	800197e <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a18:	1d3b      	adds	r3, r7, #4
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 0304 	and.w	r3, r3, #4
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	f000 8158 	beq.w	8001cd8 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a2e:	4b5a      	ldr	r3, [pc, #360]	; (8001b98 <HAL_RCC_OscConfig+0x930>)
 8001a30:	69db      	ldr	r3, [r3, #28]
 8001a32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d112      	bne.n	8001a60 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a3a:	4b57      	ldr	r3, [pc, #348]	; (8001b98 <HAL_RCC_OscConfig+0x930>)
 8001a3c:	69db      	ldr	r3, [r3, #28]
 8001a3e:	4a56      	ldr	r2, [pc, #344]	; (8001b98 <HAL_RCC_OscConfig+0x930>)
 8001a40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a44:	61d3      	str	r3, [r2, #28]
 8001a46:	4b54      	ldr	r3, [pc, #336]	; (8001b98 <HAL_RCC_OscConfig+0x930>)
 8001a48:	69db      	ldr	r3, [r3, #28]
 8001a4a:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001a4e:	f107 0308 	add.w	r3, r7, #8
 8001a52:	601a      	str	r2, [r3, #0]
 8001a54:	f107 0308 	add.w	r3, r7, #8
 8001a58:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a60:	4b4f      	ldr	r3, [pc, #316]	; (8001ba0 <HAL_RCC_OscConfig+0x938>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d11a      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a6c:	4b4c      	ldr	r3, [pc, #304]	; (8001ba0 <HAL_RCC_OscConfig+0x938>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a4b      	ldr	r2, [pc, #300]	; (8001ba0 <HAL_RCC_OscConfig+0x938>)
 8001a72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a76:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a78:	f7ff f92a 	bl	8000cd0 <HAL_GetTick>
 8001a7c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a80:	e009      	b.n	8001a96 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a82:	f7ff f925 	bl	8000cd0 <HAL_GetTick>
 8001a86:	4602      	mov	r2, r0
 8001a88:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	2b64      	cmp	r3, #100	; 0x64
 8001a90:	d901      	bls.n	8001a96 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8001a92:	2303      	movs	r3, #3
 8001a94:	e2e9      	b.n	800206a <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a96:	4b42      	ldr	r3, [pc, #264]	; (8001ba0 <HAL_RCC_OscConfig+0x938>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d0ef      	beq.n	8001a82 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001aa2:	1d3b      	adds	r3, r7, #4
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	68db      	ldr	r3, [r3, #12]
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d106      	bne.n	8001aba <HAL_RCC_OscConfig+0x852>
 8001aac:	4b3a      	ldr	r3, [pc, #232]	; (8001b98 <HAL_RCC_OscConfig+0x930>)
 8001aae:	6a1b      	ldr	r3, [r3, #32]
 8001ab0:	4a39      	ldr	r2, [pc, #228]	; (8001b98 <HAL_RCC_OscConfig+0x930>)
 8001ab2:	f043 0301 	orr.w	r3, r3, #1
 8001ab6:	6213      	str	r3, [r2, #32]
 8001ab8:	e02f      	b.n	8001b1a <HAL_RCC_OscConfig+0x8b2>
 8001aba:	1d3b      	adds	r3, r7, #4
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	68db      	ldr	r3, [r3, #12]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d10c      	bne.n	8001ade <HAL_RCC_OscConfig+0x876>
 8001ac4:	4b34      	ldr	r3, [pc, #208]	; (8001b98 <HAL_RCC_OscConfig+0x930>)
 8001ac6:	6a1b      	ldr	r3, [r3, #32]
 8001ac8:	4a33      	ldr	r2, [pc, #204]	; (8001b98 <HAL_RCC_OscConfig+0x930>)
 8001aca:	f023 0301 	bic.w	r3, r3, #1
 8001ace:	6213      	str	r3, [r2, #32]
 8001ad0:	4b31      	ldr	r3, [pc, #196]	; (8001b98 <HAL_RCC_OscConfig+0x930>)
 8001ad2:	6a1b      	ldr	r3, [r3, #32]
 8001ad4:	4a30      	ldr	r2, [pc, #192]	; (8001b98 <HAL_RCC_OscConfig+0x930>)
 8001ad6:	f023 0304 	bic.w	r3, r3, #4
 8001ada:	6213      	str	r3, [r2, #32]
 8001adc:	e01d      	b.n	8001b1a <HAL_RCC_OscConfig+0x8b2>
 8001ade:	1d3b      	adds	r3, r7, #4
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	68db      	ldr	r3, [r3, #12]
 8001ae4:	2b05      	cmp	r3, #5
 8001ae6:	d10c      	bne.n	8001b02 <HAL_RCC_OscConfig+0x89a>
 8001ae8:	4b2b      	ldr	r3, [pc, #172]	; (8001b98 <HAL_RCC_OscConfig+0x930>)
 8001aea:	6a1b      	ldr	r3, [r3, #32]
 8001aec:	4a2a      	ldr	r2, [pc, #168]	; (8001b98 <HAL_RCC_OscConfig+0x930>)
 8001aee:	f043 0304 	orr.w	r3, r3, #4
 8001af2:	6213      	str	r3, [r2, #32]
 8001af4:	4b28      	ldr	r3, [pc, #160]	; (8001b98 <HAL_RCC_OscConfig+0x930>)
 8001af6:	6a1b      	ldr	r3, [r3, #32]
 8001af8:	4a27      	ldr	r2, [pc, #156]	; (8001b98 <HAL_RCC_OscConfig+0x930>)
 8001afa:	f043 0301 	orr.w	r3, r3, #1
 8001afe:	6213      	str	r3, [r2, #32]
 8001b00:	e00b      	b.n	8001b1a <HAL_RCC_OscConfig+0x8b2>
 8001b02:	4b25      	ldr	r3, [pc, #148]	; (8001b98 <HAL_RCC_OscConfig+0x930>)
 8001b04:	6a1b      	ldr	r3, [r3, #32]
 8001b06:	4a24      	ldr	r2, [pc, #144]	; (8001b98 <HAL_RCC_OscConfig+0x930>)
 8001b08:	f023 0301 	bic.w	r3, r3, #1
 8001b0c:	6213      	str	r3, [r2, #32]
 8001b0e:	4b22      	ldr	r3, [pc, #136]	; (8001b98 <HAL_RCC_OscConfig+0x930>)
 8001b10:	6a1b      	ldr	r3, [r3, #32]
 8001b12:	4a21      	ldr	r2, [pc, #132]	; (8001b98 <HAL_RCC_OscConfig+0x930>)
 8001b14:	f023 0304 	bic.w	r3, r3, #4
 8001b18:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b1a:	1d3b      	adds	r3, r7, #4
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d06b      	beq.n	8001bfc <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b24:	f7ff f8d4 	bl	8000cd0 <HAL_GetTick>
 8001b28:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b2c:	e00b      	b.n	8001b46 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b2e:	f7ff f8cf 	bl	8000cd0 <HAL_GetTick>
 8001b32:	4602      	mov	r2, r0
 8001b34:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d901      	bls.n	8001b46 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8001b42:	2303      	movs	r3, #3
 8001b44:	e291      	b.n	800206a <HAL_RCC_OscConfig+0xe02>
 8001b46:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001b4a:	2202      	movs	r2, #2
 8001b4c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b4e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	fa93 f2a3 	rbit	r2, r3
 8001b58:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001b5c:	601a      	str	r2, [r3, #0]
 8001b5e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001b62:	2202      	movs	r2, #2
 8001b64:	601a      	str	r2, [r3, #0]
 8001b66:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	fa93 f2a3 	rbit	r2, r3
 8001b70:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001b74:	601a      	str	r2, [r3, #0]
  return result;
 8001b76:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001b7a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b7c:	fab3 f383 	clz	r3, r3
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	095b      	lsrs	r3, r3, #5
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	f043 0302 	orr.w	r3, r3, #2
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	2b02      	cmp	r3, #2
 8001b8e:	d109      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x93c>
 8001b90:	4b01      	ldr	r3, [pc, #4]	; (8001b98 <HAL_RCC_OscConfig+0x930>)
 8001b92:	6a1b      	ldr	r3, [r3, #32]
 8001b94:	e014      	b.n	8001bc0 <HAL_RCC_OscConfig+0x958>
 8001b96:	bf00      	nop
 8001b98:	40021000 	.word	0x40021000
 8001b9c:	10908120 	.word	0x10908120
 8001ba0:	40007000 	.word	0x40007000
 8001ba4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001ba8:	2202      	movs	r2, #2
 8001baa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bac:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	fa93 f2a3 	rbit	r2, r3
 8001bb6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001bba:	601a      	str	r2, [r3, #0]
 8001bbc:	4bbb      	ldr	r3, [pc, #748]	; (8001eac <HAL_RCC_OscConfig+0xc44>)
 8001bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001bc4:	2102      	movs	r1, #2
 8001bc6:	6011      	str	r1, [r2, #0]
 8001bc8:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001bcc:	6812      	ldr	r2, [r2, #0]
 8001bce:	fa92 f1a2 	rbit	r1, r2
 8001bd2:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001bd6:	6011      	str	r1, [r2, #0]
  return result;
 8001bd8:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001bdc:	6812      	ldr	r2, [r2, #0]
 8001bde:	fab2 f282 	clz	r2, r2
 8001be2:	b2d2      	uxtb	r2, r2
 8001be4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001be8:	b2d2      	uxtb	r2, r2
 8001bea:	f002 021f 	and.w	r2, r2, #31
 8001bee:	2101      	movs	r1, #1
 8001bf0:	fa01 f202 	lsl.w	r2, r1, r2
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d099      	beq.n	8001b2e <HAL_RCC_OscConfig+0x8c6>
 8001bfa:	e063      	b.n	8001cc4 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bfc:	f7ff f868 	bl	8000cd0 <HAL_GetTick>
 8001c00:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c04:	e00b      	b.n	8001c1e <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c06:	f7ff f863 	bl	8000cd0 <HAL_GetTick>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d901      	bls.n	8001c1e <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e225      	b.n	800206a <HAL_RCC_OscConfig+0xe02>
 8001c1e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001c22:	2202      	movs	r2, #2
 8001c24:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c26:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	fa93 f2a3 	rbit	r2, r3
 8001c30:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001c34:	601a      	str	r2, [r3, #0]
 8001c36:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001c3a:	2202      	movs	r2, #2
 8001c3c:	601a      	str	r2, [r3, #0]
 8001c3e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	fa93 f2a3 	rbit	r2, r3
 8001c48:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001c4c:	601a      	str	r2, [r3, #0]
  return result;
 8001c4e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001c52:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c54:	fab3 f383 	clz	r3, r3
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	095b      	lsrs	r3, r3, #5
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	f043 0302 	orr.w	r3, r3, #2
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	2b02      	cmp	r3, #2
 8001c66:	d102      	bne.n	8001c6e <HAL_RCC_OscConfig+0xa06>
 8001c68:	4b90      	ldr	r3, [pc, #576]	; (8001eac <HAL_RCC_OscConfig+0xc44>)
 8001c6a:	6a1b      	ldr	r3, [r3, #32]
 8001c6c:	e00d      	b.n	8001c8a <HAL_RCC_OscConfig+0xa22>
 8001c6e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001c72:	2202      	movs	r2, #2
 8001c74:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c76:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	fa93 f2a3 	rbit	r2, r3
 8001c80:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001c84:	601a      	str	r2, [r3, #0]
 8001c86:	4b89      	ldr	r3, [pc, #548]	; (8001eac <HAL_RCC_OscConfig+0xc44>)
 8001c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c8a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001c8e:	2102      	movs	r1, #2
 8001c90:	6011      	str	r1, [r2, #0]
 8001c92:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001c96:	6812      	ldr	r2, [r2, #0]
 8001c98:	fa92 f1a2 	rbit	r1, r2
 8001c9c:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001ca0:	6011      	str	r1, [r2, #0]
  return result;
 8001ca2:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001ca6:	6812      	ldr	r2, [r2, #0]
 8001ca8:	fab2 f282 	clz	r2, r2
 8001cac:	b2d2      	uxtb	r2, r2
 8001cae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001cb2:	b2d2      	uxtb	r2, r2
 8001cb4:	f002 021f 	and.w	r2, r2, #31
 8001cb8:	2101      	movs	r1, #1
 8001cba:	fa01 f202 	lsl.w	r2, r1, r2
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d1a0      	bne.n	8001c06 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001cc4:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d105      	bne.n	8001cd8 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ccc:	4b77      	ldr	r3, [pc, #476]	; (8001eac <HAL_RCC_OscConfig+0xc44>)
 8001cce:	69db      	ldr	r3, [r3, #28]
 8001cd0:	4a76      	ldr	r2, [pc, #472]	; (8001eac <HAL_RCC_OscConfig+0xc44>)
 8001cd2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cd6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cd8:	1d3b      	adds	r3, r7, #4
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	69db      	ldr	r3, [r3, #28]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	f000 81c2 	beq.w	8002068 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ce4:	4b71      	ldr	r3, [pc, #452]	; (8001eac <HAL_RCC_OscConfig+0xc44>)
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f003 030c 	and.w	r3, r3, #12
 8001cec:	2b08      	cmp	r3, #8
 8001cee:	f000 819c 	beq.w	800202a <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cf2:	1d3b      	adds	r3, r7, #4
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	69db      	ldr	r3, [r3, #28]
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	f040 8114 	bne.w	8001f26 <HAL_RCC_OscConfig+0xcbe>
 8001cfe:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001d02:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001d06:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d08:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	fa93 f2a3 	rbit	r2, r3
 8001d12:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001d16:	601a      	str	r2, [r3, #0]
  return result;
 8001d18:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001d1c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d1e:	fab3 f383 	clz	r3, r3
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001d28:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	461a      	mov	r2, r3
 8001d30:	2300      	movs	r3, #0
 8001d32:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d34:	f7fe ffcc 	bl	8000cd0 <HAL_GetTick>
 8001d38:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d3c:	e009      	b.n	8001d52 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d3e:	f7fe ffc7 	bl	8000cd0 <HAL_GetTick>
 8001d42:	4602      	mov	r2, r0
 8001d44:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	2b02      	cmp	r3, #2
 8001d4c:	d901      	bls.n	8001d52 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e18b      	b.n	800206a <HAL_RCC_OscConfig+0xe02>
 8001d52:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001d56:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d5a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d5c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	fa93 f2a3 	rbit	r2, r3
 8001d66:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001d6a:	601a      	str	r2, [r3, #0]
  return result;
 8001d6c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001d70:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d72:	fab3 f383 	clz	r3, r3
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	095b      	lsrs	r3, r3, #5
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	f043 0301 	orr.w	r3, r3, #1
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d102      	bne.n	8001d8c <HAL_RCC_OscConfig+0xb24>
 8001d86:	4b49      	ldr	r3, [pc, #292]	; (8001eac <HAL_RCC_OscConfig+0xc44>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	e01b      	b.n	8001dc4 <HAL_RCC_OscConfig+0xb5c>
 8001d8c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001d90:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d94:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d96:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	fa93 f2a3 	rbit	r2, r3
 8001da0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001da4:	601a      	str	r2, [r3, #0]
 8001da6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001daa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001dae:	601a      	str	r2, [r3, #0]
 8001db0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	fa93 f2a3 	rbit	r2, r3
 8001dba:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001dbe:	601a      	str	r2, [r3, #0]
 8001dc0:	4b3a      	ldr	r3, [pc, #232]	; (8001eac <HAL_RCC_OscConfig+0xc44>)
 8001dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001dc8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001dcc:	6011      	str	r1, [r2, #0]
 8001dce:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001dd2:	6812      	ldr	r2, [r2, #0]
 8001dd4:	fa92 f1a2 	rbit	r1, r2
 8001dd8:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001ddc:	6011      	str	r1, [r2, #0]
  return result;
 8001dde:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001de2:	6812      	ldr	r2, [r2, #0]
 8001de4:	fab2 f282 	clz	r2, r2
 8001de8:	b2d2      	uxtb	r2, r2
 8001dea:	f042 0220 	orr.w	r2, r2, #32
 8001dee:	b2d2      	uxtb	r2, r2
 8001df0:	f002 021f 	and.w	r2, r2, #31
 8001df4:	2101      	movs	r1, #1
 8001df6:	fa01 f202 	lsl.w	r2, r1, r2
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d19e      	bne.n	8001d3e <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e00:	4b2a      	ldr	r3, [pc, #168]	; (8001eac <HAL_RCC_OscConfig+0xc44>)
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001e08:	1d3b      	adds	r3, r7, #4
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001e0e:	1d3b      	adds	r3, r7, #4
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	6a1b      	ldr	r3, [r3, #32]
 8001e14:	430b      	orrs	r3, r1
 8001e16:	4925      	ldr	r1, [pc, #148]	; (8001eac <HAL_RCC_OscConfig+0xc44>)
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	604b      	str	r3, [r1, #4]
 8001e1c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001e20:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001e24:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e26:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	fa93 f2a3 	rbit	r2, r3
 8001e30:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001e34:	601a      	str	r2, [r3, #0]
  return result;
 8001e36:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001e3a:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e3c:	fab3 f383 	clz	r3, r3
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e46:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	461a      	mov	r2, r3
 8001e4e:	2301      	movs	r3, #1
 8001e50:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e52:	f7fe ff3d 	bl	8000cd0 <HAL_GetTick>
 8001e56:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e5a:	e009      	b.n	8001e70 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e5c:	f7fe ff38 	bl	8000cd0 <HAL_GetTick>
 8001e60:	4602      	mov	r2, r0
 8001e62:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e66:	1ad3      	subs	r3, r2, r3
 8001e68:	2b02      	cmp	r3, #2
 8001e6a:	d901      	bls.n	8001e70 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8001e6c:	2303      	movs	r3, #3
 8001e6e:	e0fc      	b.n	800206a <HAL_RCC_OscConfig+0xe02>
 8001e70:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001e74:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e78:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e7a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	fa93 f2a3 	rbit	r2, r3
 8001e84:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001e88:	601a      	str	r2, [r3, #0]
  return result;
 8001e8a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001e8e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e90:	fab3 f383 	clz	r3, r3
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	095b      	lsrs	r3, r3, #5
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	f043 0301 	orr.w	r3, r3, #1
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d105      	bne.n	8001eb0 <HAL_RCC_OscConfig+0xc48>
 8001ea4:	4b01      	ldr	r3, [pc, #4]	; (8001eac <HAL_RCC_OscConfig+0xc44>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	e01e      	b.n	8001ee8 <HAL_RCC_OscConfig+0xc80>
 8001eaa:	bf00      	nop
 8001eac:	40021000 	.word	0x40021000
 8001eb0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001eb4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001eb8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eba:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	fa93 f2a3 	rbit	r2, r3
 8001ec4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001ec8:	601a      	str	r2, [r3, #0]
 8001eca:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001ece:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ed2:	601a      	str	r2, [r3, #0]
 8001ed4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	fa93 f2a3 	rbit	r2, r3
 8001ede:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001ee2:	601a      	str	r2, [r3, #0]
 8001ee4:	4b63      	ldr	r3, [pc, #396]	; (8002074 <HAL_RCC_OscConfig+0xe0c>)
 8001ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001eec:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001ef0:	6011      	str	r1, [r2, #0]
 8001ef2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001ef6:	6812      	ldr	r2, [r2, #0]
 8001ef8:	fa92 f1a2 	rbit	r1, r2
 8001efc:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001f00:	6011      	str	r1, [r2, #0]
  return result;
 8001f02:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001f06:	6812      	ldr	r2, [r2, #0]
 8001f08:	fab2 f282 	clz	r2, r2
 8001f0c:	b2d2      	uxtb	r2, r2
 8001f0e:	f042 0220 	orr.w	r2, r2, #32
 8001f12:	b2d2      	uxtb	r2, r2
 8001f14:	f002 021f 	and.w	r2, r2, #31
 8001f18:	2101      	movs	r1, #1
 8001f1a:	fa01 f202 	lsl.w	r2, r1, r2
 8001f1e:	4013      	ands	r3, r2
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d09b      	beq.n	8001e5c <HAL_RCC_OscConfig+0xbf4>
 8001f24:	e0a0      	b.n	8002068 <HAL_RCC_OscConfig+0xe00>
 8001f26:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001f2a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001f2e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f30:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	fa93 f2a3 	rbit	r2, r3
 8001f3a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f3e:	601a      	str	r2, [r3, #0]
  return result;
 8001f40:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f44:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f46:	fab3 f383 	clz	r3, r3
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f50:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	461a      	mov	r2, r3
 8001f58:	2300      	movs	r3, #0
 8001f5a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f5c:	f7fe feb8 	bl	8000cd0 <HAL_GetTick>
 8001f60:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f64:	e009      	b.n	8001f7a <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f66:	f7fe feb3 	bl	8000cd0 <HAL_GetTick>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	2b02      	cmp	r3, #2
 8001f74:	d901      	bls.n	8001f7a <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8001f76:	2303      	movs	r3, #3
 8001f78:	e077      	b.n	800206a <HAL_RCC_OscConfig+0xe02>
 8001f7a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f7e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f82:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f84:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	fa93 f2a3 	rbit	r2, r3
 8001f8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f92:	601a      	str	r2, [r3, #0]
  return result;
 8001f94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f98:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f9a:	fab3 f383 	clz	r3, r3
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	095b      	lsrs	r3, r3, #5
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	f043 0301 	orr.w	r3, r3, #1
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d102      	bne.n	8001fb4 <HAL_RCC_OscConfig+0xd4c>
 8001fae:	4b31      	ldr	r3, [pc, #196]	; (8002074 <HAL_RCC_OscConfig+0xe0c>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	e01b      	b.n	8001fec <HAL_RCC_OscConfig+0xd84>
 8001fb4:	f107 0320 	add.w	r3, r7, #32
 8001fb8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fbc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fbe:	f107 0320 	add.w	r3, r7, #32
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	fa93 f2a3 	rbit	r2, r3
 8001fc8:	f107 031c 	add.w	r3, r7, #28
 8001fcc:	601a      	str	r2, [r3, #0]
 8001fce:	f107 0318 	add.w	r3, r7, #24
 8001fd2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fd6:	601a      	str	r2, [r3, #0]
 8001fd8:	f107 0318 	add.w	r3, r7, #24
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	fa93 f2a3 	rbit	r2, r3
 8001fe2:	f107 0314 	add.w	r3, r7, #20
 8001fe6:	601a      	str	r2, [r3, #0]
 8001fe8:	4b22      	ldr	r3, [pc, #136]	; (8002074 <HAL_RCC_OscConfig+0xe0c>)
 8001fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fec:	f107 0210 	add.w	r2, r7, #16
 8001ff0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001ff4:	6011      	str	r1, [r2, #0]
 8001ff6:	f107 0210 	add.w	r2, r7, #16
 8001ffa:	6812      	ldr	r2, [r2, #0]
 8001ffc:	fa92 f1a2 	rbit	r1, r2
 8002000:	f107 020c 	add.w	r2, r7, #12
 8002004:	6011      	str	r1, [r2, #0]
  return result;
 8002006:	f107 020c 	add.w	r2, r7, #12
 800200a:	6812      	ldr	r2, [r2, #0]
 800200c:	fab2 f282 	clz	r2, r2
 8002010:	b2d2      	uxtb	r2, r2
 8002012:	f042 0220 	orr.w	r2, r2, #32
 8002016:	b2d2      	uxtb	r2, r2
 8002018:	f002 021f 	and.w	r2, r2, #31
 800201c:	2101      	movs	r1, #1
 800201e:	fa01 f202 	lsl.w	r2, r1, r2
 8002022:	4013      	ands	r3, r2
 8002024:	2b00      	cmp	r3, #0
 8002026:	d19e      	bne.n	8001f66 <HAL_RCC_OscConfig+0xcfe>
 8002028:	e01e      	b.n	8002068 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800202a:	1d3b      	adds	r3, r7, #4
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	69db      	ldr	r3, [r3, #28]
 8002030:	2b01      	cmp	r3, #1
 8002032:	d101      	bne.n	8002038 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e018      	b.n	800206a <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002038:	4b0e      	ldr	r3, [pc, #56]	; (8002074 <HAL_RCC_OscConfig+0xe0c>)
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002040:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002044:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002048:	1d3b      	adds	r3, r7, #4
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	6a1b      	ldr	r3, [r3, #32]
 800204e:	429a      	cmp	r2, r3
 8002050:	d108      	bne.n	8002064 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002052:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002056:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800205a:	1d3b      	adds	r3, r7, #4
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002060:	429a      	cmp	r2, r3
 8002062:	d001      	beq.n	8002068 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	e000      	b.n	800206a <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8002068:	2300      	movs	r3, #0
}
 800206a:	4618      	mov	r0, r3
 800206c:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	40021000 	.word	0x40021000

08002078 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b09e      	sub	sp, #120	; 0x78
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
 8002080:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002082:	2300      	movs	r3, #0
 8002084:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d101      	bne.n	8002090 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	e162      	b.n	8002356 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002090:	4b90      	ldr	r3, [pc, #576]	; (80022d4 <HAL_RCC_ClockConfig+0x25c>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0307 	and.w	r3, r3, #7
 8002098:	683a      	ldr	r2, [r7, #0]
 800209a:	429a      	cmp	r2, r3
 800209c:	d910      	bls.n	80020c0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800209e:	4b8d      	ldr	r3, [pc, #564]	; (80022d4 <HAL_RCC_ClockConfig+0x25c>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f023 0207 	bic.w	r2, r3, #7
 80020a6:	498b      	ldr	r1, [pc, #556]	; (80022d4 <HAL_RCC_ClockConfig+0x25c>)
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ae:	4b89      	ldr	r3, [pc, #548]	; (80022d4 <HAL_RCC_ClockConfig+0x25c>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0307 	and.w	r3, r3, #7
 80020b6:	683a      	ldr	r2, [r7, #0]
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d001      	beq.n	80020c0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	e14a      	b.n	8002356 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 0302 	and.w	r3, r3, #2
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d008      	beq.n	80020de <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020cc:	4b82      	ldr	r3, [pc, #520]	; (80022d8 <HAL_RCC_ClockConfig+0x260>)
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	497f      	ldr	r1, [pc, #508]	; (80022d8 <HAL_RCC_ClockConfig+0x260>)
 80020da:	4313      	orrs	r3, r2
 80020dc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0301 	and.w	r3, r3, #1
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	f000 80dc 	beq.w	80022a4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d13c      	bne.n	800216e <HAL_RCC_ClockConfig+0xf6>
 80020f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020f8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020fc:	fa93 f3a3 	rbit	r3, r3
 8002100:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002102:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002104:	fab3 f383 	clz	r3, r3
 8002108:	b2db      	uxtb	r3, r3
 800210a:	095b      	lsrs	r3, r3, #5
 800210c:	b2db      	uxtb	r3, r3
 800210e:	f043 0301 	orr.w	r3, r3, #1
 8002112:	b2db      	uxtb	r3, r3
 8002114:	2b01      	cmp	r3, #1
 8002116:	d102      	bne.n	800211e <HAL_RCC_ClockConfig+0xa6>
 8002118:	4b6f      	ldr	r3, [pc, #444]	; (80022d8 <HAL_RCC_ClockConfig+0x260>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	e00f      	b.n	800213e <HAL_RCC_ClockConfig+0xc6>
 800211e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002122:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002124:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002126:	fa93 f3a3 	rbit	r3, r3
 800212a:	667b      	str	r3, [r7, #100]	; 0x64
 800212c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002130:	663b      	str	r3, [r7, #96]	; 0x60
 8002132:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002134:	fa93 f3a3 	rbit	r3, r3
 8002138:	65fb      	str	r3, [r7, #92]	; 0x5c
 800213a:	4b67      	ldr	r3, [pc, #412]	; (80022d8 <HAL_RCC_ClockConfig+0x260>)
 800213c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800213e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002142:	65ba      	str	r2, [r7, #88]	; 0x58
 8002144:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002146:	fa92 f2a2 	rbit	r2, r2
 800214a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800214c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800214e:	fab2 f282 	clz	r2, r2
 8002152:	b2d2      	uxtb	r2, r2
 8002154:	f042 0220 	orr.w	r2, r2, #32
 8002158:	b2d2      	uxtb	r2, r2
 800215a:	f002 021f 	and.w	r2, r2, #31
 800215e:	2101      	movs	r1, #1
 8002160:	fa01 f202 	lsl.w	r2, r1, r2
 8002164:	4013      	ands	r3, r2
 8002166:	2b00      	cmp	r3, #0
 8002168:	d17b      	bne.n	8002262 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e0f3      	b.n	8002356 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	2b02      	cmp	r3, #2
 8002174:	d13c      	bne.n	80021f0 <HAL_RCC_ClockConfig+0x178>
 8002176:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800217a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800217c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800217e:	fa93 f3a3 	rbit	r3, r3
 8002182:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002184:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002186:	fab3 f383 	clz	r3, r3
 800218a:	b2db      	uxtb	r3, r3
 800218c:	095b      	lsrs	r3, r3, #5
 800218e:	b2db      	uxtb	r3, r3
 8002190:	f043 0301 	orr.w	r3, r3, #1
 8002194:	b2db      	uxtb	r3, r3
 8002196:	2b01      	cmp	r3, #1
 8002198:	d102      	bne.n	80021a0 <HAL_RCC_ClockConfig+0x128>
 800219a:	4b4f      	ldr	r3, [pc, #316]	; (80022d8 <HAL_RCC_ClockConfig+0x260>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	e00f      	b.n	80021c0 <HAL_RCC_ClockConfig+0x148>
 80021a0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021a4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021a8:	fa93 f3a3 	rbit	r3, r3
 80021ac:	647b      	str	r3, [r7, #68]	; 0x44
 80021ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021b2:	643b      	str	r3, [r7, #64]	; 0x40
 80021b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021b6:	fa93 f3a3 	rbit	r3, r3
 80021ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80021bc:	4b46      	ldr	r3, [pc, #280]	; (80022d8 <HAL_RCC_ClockConfig+0x260>)
 80021be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80021c4:	63ba      	str	r2, [r7, #56]	; 0x38
 80021c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80021c8:	fa92 f2a2 	rbit	r2, r2
 80021cc:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80021ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80021d0:	fab2 f282 	clz	r2, r2
 80021d4:	b2d2      	uxtb	r2, r2
 80021d6:	f042 0220 	orr.w	r2, r2, #32
 80021da:	b2d2      	uxtb	r2, r2
 80021dc:	f002 021f 	and.w	r2, r2, #31
 80021e0:	2101      	movs	r1, #1
 80021e2:	fa01 f202 	lsl.w	r2, r1, r2
 80021e6:	4013      	ands	r3, r2
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d13a      	bne.n	8002262 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e0b2      	b.n	8002356 <HAL_RCC_ClockConfig+0x2de>
 80021f0:	2302      	movs	r3, #2
 80021f2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021f6:	fa93 f3a3 	rbit	r3, r3
 80021fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80021fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021fe:	fab3 f383 	clz	r3, r3
 8002202:	b2db      	uxtb	r3, r3
 8002204:	095b      	lsrs	r3, r3, #5
 8002206:	b2db      	uxtb	r3, r3
 8002208:	f043 0301 	orr.w	r3, r3, #1
 800220c:	b2db      	uxtb	r3, r3
 800220e:	2b01      	cmp	r3, #1
 8002210:	d102      	bne.n	8002218 <HAL_RCC_ClockConfig+0x1a0>
 8002212:	4b31      	ldr	r3, [pc, #196]	; (80022d8 <HAL_RCC_ClockConfig+0x260>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	e00d      	b.n	8002234 <HAL_RCC_ClockConfig+0x1bc>
 8002218:	2302      	movs	r3, #2
 800221a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800221c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800221e:	fa93 f3a3 	rbit	r3, r3
 8002222:	627b      	str	r3, [r7, #36]	; 0x24
 8002224:	2302      	movs	r3, #2
 8002226:	623b      	str	r3, [r7, #32]
 8002228:	6a3b      	ldr	r3, [r7, #32]
 800222a:	fa93 f3a3 	rbit	r3, r3
 800222e:	61fb      	str	r3, [r7, #28]
 8002230:	4b29      	ldr	r3, [pc, #164]	; (80022d8 <HAL_RCC_ClockConfig+0x260>)
 8002232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002234:	2202      	movs	r2, #2
 8002236:	61ba      	str	r2, [r7, #24]
 8002238:	69ba      	ldr	r2, [r7, #24]
 800223a:	fa92 f2a2 	rbit	r2, r2
 800223e:	617a      	str	r2, [r7, #20]
  return result;
 8002240:	697a      	ldr	r2, [r7, #20]
 8002242:	fab2 f282 	clz	r2, r2
 8002246:	b2d2      	uxtb	r2, r2
 8002248:	f042 0220 	orr.w	r2, r2, #32
 800224c:	b2d2      	uxtb	r2, r2
 800224e:	f002 021f 	and.w	r2, r2, #31
 8002252:	2101      	movs	r1, #1
 8002254:	fa01 f202 	lsl.w	r2, r1, r2
 8002258:	4013      	ands	r3, r2
 800225a:	2b00      	cmp	r3, #0
 800225c:	d101      	bne.n	8002262 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e079      	b.n	8002356 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002262:	4b1d      	ldr	r3, [pc, #116]	; (80022d8 <HAL_RCC_ClockConfig+0x260>)
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	f023 0203 	bic.w	r2, r3, #3
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	491a      	ldr	r1, [pc, #104]	; (80022d8 <HAL_RCC_ClockConfig+0x260>)
 8002270:	4313      	orrs	r3, r2
 8002272:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002274:	f7fe fd2c 	bl	8000cd0 <HAL_GetTick>
 8002278:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800227a:	e00a      	b.n	8002292 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800227c:	f7fe fd28 	bl	8000cd0 <HAL_GetTick>
 8002280:	4602      	mov	r2, r0
 8002282:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	f241 3288 	movw	r2, #5000	; 0x1388
 800228a:	4293      	cmp	r3, r2
 800228c:	d901      	bls.n	8002292 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	e061      	b.n	8002356 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002292:	4b11      	ldr	r3, [pc, #68]	; (80022d8 <HAL_RCC_ClockConfig+0x260>)
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	f003 020c 	and.w	r2, r3, #12
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d1eb      	bne.n	800227c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022a4:	4b0b      	ldr	r3, [pc, #44]	; (80022d4 <HAL_RCC_ClockConfig+0x25c>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 0307 	and.w	r3, r3, #7
 80022ac:	683a      	ldr	r2, [r7, #0]
 80022ae:	429a      	cmp	r2, r3
 80022b0:	d214      	bcs.n	80022dc <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022b2:	4b08      	ldr	r3, [pc, #32]	; (80022d4 <HAL_RCC_ClockConfig+0x25c>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f023 0207 	bic.w	r2, r3, #7
 80022ba:	4906      	ldr	r1, [pc, #24]	; (80022d4 <HAL_RCC_ClockConfig+0x25c>)
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	4313      	orrs	r3, r2
 80022c0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022c2:	4b04      	ldr	r3, [pc, #16]	; (80022d4 <HAL_RCC_ClockConfig+0x25c>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 0307 	and.w	r3, r3, #7
 80022ca:	683a      	ldr	r2, [r7, #0]
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d005      	beq.n	80022dc <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e040      	b.n	8002356 <HAL_RCC_ClockConfig+0x2de>
 80022d4:	40022000 	.word	0x40022000
 80022d8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 0304 	and.w	r3, r3, #4
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d008      	beq.n	80022fa <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022e8:	4b1d      	ldr	r3, [pc, #116]	; (8002360 <HAL_RCC_ClockConfig+0x2e8>)
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	491a      	ldr	r1, [pc, #104]	; (8002360 <HAL_RCC_ClockConfig+0x2e8>)
 80022f6:	4313      	orrs	r3, r2
 80022f8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0308 	and.w	r3, r3, #8
 8002302:	2b00      	cmp	r3, #0
 8002304:	d009      	beq.n	800231a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002306:	4b16      	ldr	r3, [pc, #88]	; (8002360 <HAL_RCC_ClockConfig+0x2e8>)
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	691b      	ldr	r3, [r3, #16]
 8002312:	00db      	lsls	r3, r3, #3
 8002314:	4912      	ldr	r1, [pc, #72]	; (8002360 <HAL_RCC_ClockConfig+0x2e8>)
 8002316:	4313      	orrs	r3, r2
 8002318:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800231a:	f000 f829 	bl	8002370 <HAL_RCC_GetSysClockFreq>
 800231e:	4601      	mov	r1, r0
 8002320:	4b0f      	ldr	r3, [pc, #60]	; (8002360 <HAL_RCC_ClockConfig+0x2e8>)
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002328:	22f0      	movs	r2, #240	; 0xf0
 800232a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800232c:	693a      	ldr	r2, [r7, #16]
 800232e:	fa92 f2a2 	rbit	r2, r2
 8002332:	60fa      	str	r2, [r7, #12]
  return result;
 8002334:	68fa      	ldr	r2, [r7, #12]
 8002336:	fab2 f282 	clz	r2, r2
 800233a:	b2d2      	uxtb	r2, r2
 800233c:	40d3      	lsrs	r3, r2
 800233e:	4a09      	ldr	r2, [pc, #36]	; (8002364 <HAL_RCC_ClockConfig+0x2ec>)
 8002340:	5cd3      	ldrb	r3, [r2, r3]
 8002342:	fa21 f303 	lsr.w	r3, r1, r3
 8002346:	4a08      	ldr	r2, [pc, #32]	; (8002368 <HAL_RCC_ClockConfig+0x2f0>)
 8002348:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800234a:	4b08      	ldr	r3, [pc, #32]	; (800236c <HAL_RCC_ClockConfig+0x2f4>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4618      	mov	r0, r3
 8002350:	f7fe fc7a 	bl	8000c48 <HAL_InitTick>
  
  return HAL_OK;
 8002354:	2300      	movs	r3, #0
}
 8002356:	4618      	mov	r0, r3
 8002358:	3778      	adds	r7, #120	; 0x78
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	40021000 	.word	0x40021000
 8002364:	08004518 	.word	0x08004518
 8002368:	20000000 	.word	0x20000000
 800236c:	20000004 	.word	0x20000004

08002370 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002370:	b480      	push	{r7}
 8002372:	b08b      	sub	sp, #44	; 0x2c
 8002374:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002376:	2300      	movs	r3, #0
 8002378:	61fb      	str	r3, [r7, #28]
 800237a:	2300      	movs	r3, #0
 800237c:	61bb      	str	r3, [r7, #24]
 800237e:	2300      	movs	r3, #0
 8002380:	627b      	str	r3, [r7, #36]	; 0x24
 8002382:	2300      	movs	r3, #0
 8002384:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002386:	2300      	movs	r3, #0
 8002388:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800238a:	4b29      	ldr	r3, [pc, #164]	; (8002430 <HAL_RCC_GetSysClockFreq+0xc0>)
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	f003 030c 	and.w	r3, r3, #12
 8002396:	2b04      	cmp	r3, #4
 8002398:	d002      	beq.n	80023a0 <HAL_RCC_GetSysClockFreq+0x30>
 800239a:	2b08      	cmp	r3, #8
 800239c:	d003      	beq.n	80023a6 <HAL_RCC_GetSysClockFreq+0x36>
 800239e:	e03c      	b.n	800241a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80023a0:	4b24      	ldr	r3, [pc, #144]	; (8002434 <HAL_RCC_GetSysClockFreq+0xc4>)
 80023a2:	623b      	str	r3, [r7, #32]
      break;
 80023a4:	e03c      	b.n	8002420 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80023ac:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80023b0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b2:	68ba      	ldr	r2, [r7, #8]
 80023b4:	fa92 f2a2 	rbit	r2, r2
 80023b8:	607a      	str	r2, [r7, #4]
  return result;
 80023ba:	687a      	ldr	r2, [r7, #4]
 80023bc:	fab2 f282 	clz	r2, r2
 80023c0:	b2d2      	uxtb	r2, r2
 80023c2:	40d3      	lsrs	r3, r2
 80023c4:	4a1c      	ldr	r2, [pc, #112]	; (8002438 <HAL_RCC_GetSysClockFreq+0xc8>)
 80023c6:	5cd3      	ldrb	r3, [r2, r3]
 80023c8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80023ca:	4b19      	ldr	r3, [pc, #100]	; (8002430 <HAL_RCC_GetSysClockFreq+0xc0>)
 80023cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ce:	f003 030f 	and.w	r3, r3, #15
 80023d2:	220f      	movs	r2, #15
 80023d4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d6:	693a      	ldr	r2, [r7, #16]
 80023d8:	fa92 f2a2 	rbit	r2, r2
 80023dc:	60fa      	str	r2, [r7, #12]
  return result;
 80023de:	68fa      	ldr	r2, [r7, #12]
 80023e0:	fab2 f282 	clz	r2, r2
 80023e4:	b2d2      	uxtb	r2, r2
 80023e6:	40d3      	lsrs	r3, r2
 80023e8:	4a14      	ldr	r2, [pc, #80]	; (800243c <HAL_RCC_GetSysClockFreq+0xcc>)
 80023ea:	5cd3      	ldrb	r3, [r2, r3]
 80023ec:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d008      	beq.n	800240a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80023f8:	4a0e      	ldr	r2, [pc, #56]	; (8002434 <HAL_RCC_GetSysClockFreq+0xc4>)
 80023fa:	69bb      	ldr	r3, [r7, #24]
 80023fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	fb02 f303 	mul.w	r3, r2, r3
 8002406:	627b      	str	r3, [r7, #36]	; 0x24
 8002408:	e004      	b.n	8002414 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	4a0c      	ldr	r2, [pc, #48]	; (8002440 <HAL_RCC_GetSysClockFreq+0xd0>)
 800240e:	fb02 f303 	mul.w	r3, r2, r3
 8002412:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002416:	623b      	str	r3, [r7, #32]
      break;
 8002418:	e002      	b.n	8002420 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800241a:	4b06      	ldr	r3, [pc, #24]	; (8002434 <HAL_RCC_GetSysClockFreq+0xc4>)
 800241c:	623b      	str	r3, [r7, #32]
      break;
 800241e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002420:	6a3b      	ldr	r3, [r7, #32]
}
 8002422:	4618      	mov	r0, r3
 8002424:	372c      	adds	r7, #44	; 0x2c
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr
 800242e:	bf00      	nop
 8002430:	40021000 	.word	0x40021000
 8002434:	007a1200 	.word	0x007a1200
 8002438:	08004530 	.word	0x08004530
 800243c:	08004540 	.word	0x08004540
 8002440:	003d0900 	.word	0x003d0900

08002444 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002448:	4b03      	ldr	r3, [pc, #12]	; (8002458 <HAL_RCC_GetHCLKFreq+0x14>)
 800244a:	681b      	ldr	r3, [r3, #0]
}
 800244c:	4618      	mov	r0, r3
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr
 8002456:	bf00      	nop
 8002458:	20000000 	.word	0x20000000

0800245c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b082      	sub	sp, #8
 8002460:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002462:	f7ff ffef 	bl	8002444 <HAL_RCC_GetHCLKFreq>
 8002466:	4601      	mov	r1, r0
 8002468:	4b0b      	ldr	r3, [pc, #44]	; (8002498 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002470:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002474:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	fa92 f2a2 	rbit	r2, r2
 800247c:	603a      	str	r2, [r7, #0]
  return result;
 800247e:	683a      	ldr	r2, [r7, #0]
 8002480:	fab2 f282 	clz	r2, r2
 8002484:	b2d2      	uxtb	r2, r2
 8002486:	40d3      	lsrs	r3, r2
 8002488:	4a04      	ldr	r2, [pc, #16]	; (800249c <HAL_RCC_GetPCLK1Freq+0x40>)
 800248a:	5cd3      	ldrb	r3, [r2, r3]
 800248c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002490:	4618      	mov	r0, r3
 8002492:	3708      	adds	r7, #8
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}
 8002498:	40021000 	.word	0x40021000
 800249c:	08004528 	.word	0x08004528

080024a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b082      	sub	sp, #8
 80024a4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80024a6:	f7ff ffcd 	bl	8002444 <HAL_RCC_GetHCLKFreq>
 80024aa:	4601      	mov	r1, r0
 80024ac:	4b0b      	ldr	r3, [pc, #44]	; (80024dc <HAL_RCC_GetPCLK2Freq+0x3c>)
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80024b4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80024b8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	fa92 f2a2 	rbit	r2, r2
 80024c0:	603a      	str	r2, [r7, #0]
  return result;
 80024c2:	683a      	ldr	r2, [r7, #0]
 80024c4:	fab2 f282 	clz	r2, r2
 80024c8:	b2d2      	uxtb	r2, r2
 80024ca:	40d3      	lsrs	r3, r2
 80024cc:	4a04      	ldr	r2, [pc, #16]	; (80024e0 <HAL_RCC_GetPCLK2Freq+0x40>)
 80024ce:	5cd3      	ldrb	r3, [r2, r3]
 80024d0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80024d4:	4618      	mov	r0, r3
 80024d6:	3708      	adds	r7, #8
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	40021000 	.word	0x40021000
 80024e0:	08004528 	.word	0x08004528

080024e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b092      	sub	sp, #72	; 0x48
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80024ec:	2300      	movs	r3, #0
 80024ee:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80024f0:	2300      	movs	r3, #0
 80024f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80024f4:	2300      	movs	r3, #0
 80024f6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002502:	2b00      	cmp	r3, #0
 8002504:	f000 80cd 	beq.w	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002508:	4b86      	ldr	r3, [pc, #536]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800250a:	69db      	ldr	r3, [r3, #28]
 800250c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002510:	2b00      	cmp	r3, #0
 8002512:	d10e      	bne.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002514:	4b83      	ldr	r3, [pc, #524]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002516:	69db      	ldr	r3, [r3, #28]
 8002518:	4a82      	ldr	r2, [pc, #520]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800251a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800251e:	61d3      	str	r3, [r2, #28]
 8002520:	4b80      	ldr	r3, [pc, #512]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002522:	69db      	ldr	r3, [r3, #28]
 8002524:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002528:	60bb      	str	r3, [r7, #8]
 800252a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800252c:	2301      	movs	r3, #1
 800252e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002532:	4b7d      	ldr	r3, [pc, #500]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800253a:	2b00      	cmp	r3, #0
 800253c:	d118      	bne.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800253e:	4b7a      	ldr	r3, [pc, #488]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a79      	ldr	r2, [pc, #484]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002544:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002548:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800254a:	f7fe fbc1 	bl	8000cd0 <HAL_GetTick>
 800254e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002550:	e008      	b.n	8002564 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002552:	f7fe fbbd 	bl	8000cd0 <HAL_GetTick>
 8002556:	4602      	mov	r2, r0
 8002558:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800255a:	1ad3      	subs	r3, r2, r3
 800255c:	2b64      	cmp	r3, #100	; 0x64
 800255e:	d901      	bls.n	8002564 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002560:	2303      	movs	r3, #3
 8002562:	e0db      	b.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002564:	4b70      	ldr	r3, [pc, #448]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800256c:	2b00      	cmp	r3, #0
 800256e:	d0f0      	beq.n	8002552 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002570:	4b6c      	ldr	r3, [pc, #432]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002572:	6a1b      	ldr	r3, [r3, #32]
 8002574:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002578:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800257a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800257c:	2b00      	cmp	r3, #0
 800257e:	d07d      	beq.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002588:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800258a:	429a      	cmp	r2, r3
 800258c:	d076      	beq.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800258e:	4b65      	ldr	r3, [pc, #404]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002590:	6a1b      	ldr	r3, [r3, #32]
 8002592:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002596:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002598:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800259c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800259e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025a0:	fa93 f3a3 	rbit	r3, r3
 80025a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80025a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80025a8:	fab3 f383 	clz	r3, r3
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	461a      	mov	r2, r3
 80025b0:	4b5e      	ldr	r3, [pc, #376]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80025b2:	4413      	add	r3, r2
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	461a      	mov	r2, r3
 80025b8:	2301      	movs	r3, #1
 80025ba:	6013      	str	r3, [r2, #0]
 80025bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80025c0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025c4:	fa93 f3a3 	rbit	r3, r3
 80025c8:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80025ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80025cc:	fab3 f383 	clz	r3, r3
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	461a      	mov	r2, r3
 80025d4:	4b55      	ldr	r3, [pc, #340]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80025d6:	4413      	add	r3, r2
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	461a      	mov	r2, r3
 80025dc:	2300      	movs	r3, #0
 80025de:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80025e0:	4a50      	ldr	r2, [pc, #320]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80025e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025e4:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80025e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025e8:	f003 0301 	and.w	r3, r3, #1
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d045      	beq.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025f0:	f7fe fb6e 	bl	8000cd0 <HAL_GetTick>
 80025f4:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025f6:	e00a      	b.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025f8:	f7fe fb6a 	bl	8000cd0 <HAL_GetTick>
 80025fc:	4602      	mov	r2, r0
 80025fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	f241 3288 	movw	r2, #5000	; 0x1388
 8002606:	4293      	cmp	r3, r2
 8002608:	d901      	bls.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800260a:	2303      	movs	r3, #3
 800260c:	e086      	b.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x238>
 800260e:	2302      	movs	r3, #2
 8002610:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002614:	fa93 f3a3 	rbit	r3, r3
 8002618:	627b      	str	r3, [r7, #36]	; 0x24
 800261a:	2302      	movs	r3, #2
 800261c:	623b      	str	r3, [r7, #32]
 800261e:	6a3b      	ldr	r3, [r7, #32]
 8002620:	fa93 f3a3 	rbit	r3, r3
 8002624:	61fb      	str	r3, [r7, #28]
  return result;
 8002626:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002628:	fab3 f383 	clz	r3, r3
 800262c:	b2db      	uxtb	r3, r3
 800262e:	095b      	lsrs	r3, r3, #5
 8002630:	b2db      	uxtb	r3, r3
 8002632:	f043 0302 	orr.w	r3, r3, #2
 8002636:	b2db      	uxtb	r3, r3
 8002638:	2b02      	cmp	r3, #2
 800263a:	d102      	bne.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800263c:	4b39      	ldr	r3, [pc, #228]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800263e:	6a1b      	ldr	r3, [r3, #32]
 8002640:	e007      	b.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8002642:	2302      	movs	r3, #2
 8002644:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002646:	69bb      	ldr	r3, [r7, #24]
 8002648:	fa93 f3a3 	rbit	r3, r3
 800264c:	617b      	str	r3, [r7, #20]
 800264e:	4b35      	ldr	r3, [pc, #212]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002652:	2202      	movs	r2, #2
 8002654:	613a      	str	r2, [r7, #16]
 8002656:	693a      	ldr	r2, [r7, #16]
 8002658:	fa92 f2a2 	rbit	r2, r2
 800265c:	60fa      	str	r2, [r7, #12]
  return result;
 800265e:	68fa      	ldr	r2, [r7, #12]
 8002660:	fab2 f282 	clz	r2, r2
 8002664:	b2d2      	uxtb	r2, r2
 8002666:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800266a:	b2d2      	uxtb	r2, r2
 800266c:	f002 021f 	and.w	r2, r2, #31
 8002670:	2101      	movs	r1, #1
 8002672:	fa01 f202 	lsl.w	r2, r1, r2
 8002676:	4013      	ands	r3, r2
 8002678:	2b00      	cmp	r3, #0
 800267a:	d0bd      	beq.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800267c:	4b29      	ldr	r3, [pc, #164]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800267e:	6a1b      	ldr	r3, [r3, #32]
 8002680:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	4926      	ldr	r1, [pc, #152]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800268a:	4313      	orrs	r3, r2
 800268c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800268e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002692:	2b01      	cmp	r3, #1
 8002694:	d105      	bne.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002696:	4b23      	ldr	r3, [pc, #140]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002698:	69db      	ldr	r3, [r3, #28]
 800269a:	4a22      	ldr	r2, [pc, #136]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800269c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026a0:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 0301 	and.w	r3, r3, #1
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d008      	beq.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80026ae:	4b1d      	ldr	r3, [pc, #116]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80026b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b2:	f023 0203 	bic.w	r2, r3, #3
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	491a      	ldr	r1, [pc, #104]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80026bc:	4313      	orrs	r3, r2
 80026be:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 0320 	and.w	r3, r3, #32
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d008      	beq.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80026cc:	4b15      	ldr	r3, [pc, #84]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80026ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d0:	f023 0210 	bic.w	r2, r3, #16
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	4912      	ldr	r1, [pc, #72]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80026da:	4313      	orrs	r3, r2
 80026dc:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d008      	beq.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80026ea:	4b0e      	ldr	r3, [pc, #56]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80026ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ee:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	691b      	ldr	r3, [r3, #16]
 80026f6:	490b      	ldr	r1, [pc, #44]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80026f8:	4313      	orrs	r3, r2
 80026fa:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002704:	2b00      	cmp	r3, #0
 8002706:	d008      	beq.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002708:	4b06      	ldr	r3, [pc, #24]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800270a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	695b      	ldr	r3, [r3, #20]
 8002714:	4903      	ldr	r1, [pc, #12]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002716:	4313      	orrs	r3, r2
 8002718:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800271a:	2300      	movs	r3, #0
}
 800271c:	4618      	mov	r0, r3
 800271e:	3748      	adds	r7, #72	; 0x48
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}
 8002724:	40021000 	.word	0x40021000
 8002728:	40007000 	.word	0x40007000
 800272c:	10908100 	.word	0x10908100

08002730 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b082      	sub	sp, #8
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d101      	bne.n	8002742 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e049      	b.n	80027d6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002748:	b2db      	uxtb	r3, r3
 800274a:	2b00      	cmp	r3, #0
 800274c:	d106      	bne.n	800275c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2200      	movs	r2, #0
 8002752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002756:	6878      	ldr	r0, [r7, #4]
 8002758:	f7fe f8c8 	bl	80008ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2202      	movs	r2, #2
 8002760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	3304      	adds	r3, #4
 800276c:	4619      	mov	r1, r3
 800276e:	4610      	mov	r0, r2
 8002770:	f000 f958 	bl	8002a24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2201      	movs	r2, #1
 8002778:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2201      	movs	r2, #1
 8002780:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2201      	movs	r2, #1
 8002788:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2201      	movs	r2, #1
 8002790:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2201      	movs	r2, #1
 8002798:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2201      	movs	r2, #1
 80027a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2201      	movs	r2, #1
 80027a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2201      	movs	r2, #1
 80027b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2201      	movs	r2, #1
 80027b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2201      	movs	r2, #1
 80027c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2201      	movs	r2, #1
 80027c8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2201      	movs	r2, #1
 80027d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80027d4:	2300      	movs	r3, #0
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3708      	adds	r7, #8
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
	...

080027e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b085      	sub	sp, #20
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d001      	beq.n	80027f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e040      	b.n	800287a <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2202      	movs	r2, #2
 80027fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	68da      	ldr	r2, [r3, #12]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f042 0201 	orr.w	r2, r2, #1
 800280e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a1c      	ldr	r2, [pc, #112]	; (8002888 <HAL_TIM_Base_Start_IT+0xa8>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d00e      	beq.n	8002838 <HAL_TIM_Base_Start_IT+0x58>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002822:	d009      	beq.n	8002838 <HAL_TIM_Base_Start_IT+0x58>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a18      	ldr	r2, [pc, #96]	; (800288c <HAL_TIM_Base_Start_IT+0xac>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d004      	beq.n	8002838 <HAL_TIM_Base_Start_IT+0x58>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a17      	ldr	r2, [pc, #92]	; (8002890 <HAL_TIM_Base_Start_IT+0xb0>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d115      	bne.n	8002864 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	689a      	ldr	r2, [r3, #8]
 800283e:	4b15      	ldr	r3, [pc, #84]	; (8002894 <HAL_TIM_Base_Start_IT+0xb4>)
 8002840:	4013      	ands	r3, r2
 8002842:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2b06      	cmp	r3, #6
 8002848:	d015      	beq.n	8002876 <HAL_TIM_Base_Start_IT+0x96>
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002850:	d011      	beq.n	8002876 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f042 0201 	orr.w	r2, r2, #1
 8002860:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002862:	e008      	b.n	8002876 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f042 0201 	orr.w	r2, r2, #1
 8002872:	601a      	str	r2, [r3, #0]
 8002874:	e000      	b.n	8002878 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002876:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002878:	2300      	movs	r3, #0
}
 800287a:	4618      	mov	r0, r3
 800287c:	3714      	adds	r7, #20
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr
 8002886:	bf00      	nop
 8002888:	40012c00 	.word	0x40012c00
 800288c:	40000400 	.word	0x40000400
 8002890:	40014000 	.word	0x40014000
 8002894:	00010007 	.word	0x00010007

08002898 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b084      	sub	sp, #16
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d101      	bne.n	80028b0 <HAL_TIM_ConfigClockSource+0x18>
 80028ac:	2302      	movs	r3, #2
 80028ae:	e0b5      	b.n	8002a1c <HAL_TIM_ConfigClockSource+0x184>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2201      	movs	r2, #1
 80028b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2202      	movs	r2, #2
 80028bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028ce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80028d2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80028da:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	68fa      	ldr	r2, [r7, #12]
 80028e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028ec:	d03e      	beq.n	800296c <HAL_TIM_ConfigClockSource+0xd4>
 80028ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028f2:	f200 8087 	bhi.w	8002a04 <HAL_TIM_ConfigClockSource+0x16c>
 80028f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028fa:	f000 8085 	beq.w	8002a08 <HAL_TIM_ConfigClockSource+0x170>
 80028fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002902:	d87f      	bhi.n	8002a04 <HAL_TIM_ConfigClockSource+0x16c>
 8002904:	2b70      	cmp	r3, #112	; 0x70
 8002906:	d01a      	beq.n	800293e <HAL_TIM_ConfigClockSource+0xa6>
 8002908:	2b70      	cmp	r3, #112	; 0x70
 800290a:	d87b      	bhi.n	8002a04 <HAL_TIM_ConfigClockSource+0x16c>
 800290c:	2b60      	cmp	r3, #96	; 0x60
 800290e:	d050      	beq.n	80029b2 <HAL_TIM_ConfigClockSource+0x11a>
 8002910:	2b60      	cmp	r3, #96	; 0x60
 8002912:	d877      	bhi.n	8002a04 <HAL_TIM_ConfigClockSource+0x16c>
 8002914:	2b50      	cmp	r3, #80	; 0x50
 8002916:	d03c      	beq.n	8002992 <HAL_TIM_ConfigClockSource+0xfa>
 8002918:	2b50      	cmp	r3, #80	; 0x50
 800291a:	d873      	bhi.n	8002a04 <HAL_TIM_ConfigClockSource+0x16c>
 800291c:	2b40      	cmp	r3, #64	; 0x40
 800291e:	d058      	beq.n	80029d2 <HAL_TIM_ConfigClockSource+0x13a>
 8002920:	2b40      	cmp	r3, #64	; 0x40
 8002922:	d86f      	bhi.n	8002a04 <HAL_TIM_ConfigClockSource+0x16c>
 8002924:	2b30      	cmp	r3, #48	; 0x30
 8002926:	d064      	beq.n	80029f2 <HAL_TIM_ConfigClockSource+0x15a>
 8002928:	2b30      	cmp	r3, #48	; 0x30
 800292a:	d86b      	bhi.n	8002a04 <HAL_TIM_ConfigClockSource+0x16c>
 800292c:	2b20      	cmp	r3, #32
 800292e:	d060      	beq.n	80029f2 <HAL_TIM_ConfigClockSource+0x15a>
 8002930:	2b20      	cmp	r3, #32
 8002932:	d867      	bhi.n	8002a04 <HAL_TIM_ConfigClockSource+0x16c>
 8002934:	2b00      	cmp	r3, #0
 8002936:	d05c      	beq.n	80029f2 <HAL_TIM_ConfigClockSource+0x15a>
 8002938:	2b10      	cmp	r3, #16
 800293a:	d05a      	beq.n	80029f2 <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800293c:	e062      	b.n	8002a04 <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6818      	ldr	r0, [r3, #0]
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	6899      	ldr	r1, [r3, #8]
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	685a      	ldr	r2, [r3, #4]
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	68db      	ldr	r3, [r3, #12]
 800294e:	f000 f95b 	bl	8002c08 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002960:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	68fa      	ldr	r2, [r7, #12]
 8002968:	609a      	str	r2, [r3, #8]
      break;
 800296a:	e04e      	b.n	8002a0a <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6818      	ldr	r0, [r3, #0]
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	6899      	ldr	r1, [r3, #8]
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	685a      	ldr	r2, [r3, #4]
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	f000 f944 	bl	8002c08 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	689a      	ldr	r2, [r3, #8]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800298e:	609a      	str	r2, [r3, #8]
      break;
 8002990:	e03b      	b.n	8002a0a <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6818      	ldr	r0, [r3, #0]
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	6859      	ldr	r1, [r3, #4]
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	68db      	ldr	r3, [r3, #12]
 800299e:	461a      	mov	r2, r3
 80029a0:	f000 f8b8 	bl	8002b14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	2150      	movs	r1, #80	; 0x50
 80029aa:	4618      	mov	r0, r3
 80029ac:	f000 f911 	bl	8002bd2 <TIM_ITRx_SetConfig>
      break;
 80029b0:	e02b      	b.n	8002a0a <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6818      	ldr	r0, [r3, #0]
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	6859      	ldr	r1, [r3, #4]
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	68db      	ldr	r3, [r3, #12]
 80029be:	461a      	mov	r2, r3
 80029c0:	f000 f8d7 	bl	8002b72 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	2160      	movs	r1, #96	; 0x60
 80029ca:	4618      	mov	r0, r3
 80029cc:	f000 f901 	bl	8002bd2 <TIM_ITRx_SetConfig>
      break;
 80029d0:	e01b      	b.n	8002a0a <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6818      	ldr	r0, [r3, #0]
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	6859      	ldr	r1, [r3, #4]
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	68db      	ldr	r3, [r3, #12]
 80029de:	461a      	mov	r2, r3
 80029e0:	f000 f898 	bl	8002b14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	2140      	movs	r1, #64	; 0x40
 80029ea:	4618      	mov	r0, r3
 80029ec:	f000 f8f1 	bl	8002bd2 <TIM_ITRx_SetConfig>
      break;
 80029f0:	e00b      	b.n	8002a0a <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4619      	mov	r1, r3
 80029fc:	4610      	mov	r0, r2
 80029fe:	f000 f8e8 	bl	8002bd2 <TIM_ITRx_SetConfig>
        break;
 8002a02:	e002      	b.n	8002a0a <HAL_TIM_ConfigClockSource+0x172>
      break;
 8002a04:	bf00      	nop
 8002a06:	e000      	b.n	8002a0a <HAL_TIM_ConfigClockSource+0x172>
      break;
 8002a08:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2200      	movs	r2, #0
 8002a16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a1a:	2300      	movs	r3, #0
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3710      	adds	r7, #16
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b085      	sub	sp, #20
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	4a32      	ldr	r2, [pc, #200]	; (8002b00 <TIM_Base_SetConfig+0xdc>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d007      	beq.n	8002a4c <TIM_Base_SetConfig+0x28>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a42:	d003      	beq.n	8002a4c <TIM_Base_SetConfig+0x28>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	4a2f      	ldr	r2, [pc, #188]	; (8002b04 <TIM_Base_SetConfig+0xe0>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d108      	bne.n	8002a5e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	68fa      	ldr	r2, [r7, #12]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4a27      	ldr	r2, [pc, #156]	; (8002b00 <TIM_Base_SetConfig+0xdc>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d013      	beq.n	8002a8e <TIM_Base_SetConfig+0x6a>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a6c:	d00f      	beq.n	8002a8e <TIM_Base_SetConfig+0x6a>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4a24      	ldr	r2, [pc, #144]	; (8002b04 <TIM_Base_SetConfig+0xe0>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d00b      	beq.n	8002a8e <TIM_Base_SetConfig+0x6a>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4a23      	ldr	r2, [pc, #140]	; (8002b08 <TIM_Base_SetConfig+0xe4>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d007      	beq.n	8002a8e <TIM_Base_SetConfig+0x6a>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	4a22      	ldr	r2, [pc, #136]	; (8002b0c <TIM_Base_SetConfig+0xe8>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d003      	beq.n	8002a8e <TIM_Base_SetConfig+0x6a>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	4a21      	ldr	r2, [pc, #132]	; (8002b10 <TIM_Base_SetConfig+0xec>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d108      	bne.n	8002aa0 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	68db      	ldr	r3, [r3, #12]
 8002a9a:	68fa      	ldr	r2, [r7, #12]
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	695b      	ldr	r3, [r3, #20]
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	68fa      	ldr	r2, [r7, #12]
 8002ab2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	689a      	ldr	r2, [r3, #8]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	4a0e      	ldr	r2, [pc, #56]	; (8002b00 <TIM_Base_SetConfig+0xdc>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d00b      	beq.n	8002ae4 <TIM_Base_SetConfig+0xc0>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	4a0e      	ldr	r2, [pc, #56]	; (8002b08 <TIM_Base_SetConfig+0xe4>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d007      	beq.n	8002ae4 <TIM_Base_SetConfig+0xc0>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	4a0d      	ldr	r2, [pc, #52]	; (8002b0c <TIM_Base_SetConfig+0xe8>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d003      	beq.n	8002ae4 <TIM_Base_SetConfig+0xc0>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	4a0c      	ldr	r2, [pc, #48]	; (8002b10 <TIM_Base_SetConfig+0xec>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d103      	bne.n	8002aec <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	691a      	ldr	r2, [r3, #16]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2201      	movs	r2, #1
 8002af0:	615a      	str	r2, [r3, #20]
}
 8002af2:	bf00      	nop
 8002af4:	3714      	adds	r7, #20
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr
 8002afe:	bf00      	nop
 8002b00:	40012c00 	.word	0x40012c00
 8002b04:	40000400 	.word	0x40000400
 8002b08:	40014000 	.word	0x40014000
 8002b0c:	40014400 	.word	0x40014400
 8002b10:	40014800 	.word	0x40014800

08002b14 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b087      	sub	sp, #28
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	60f8      	str	r0, [r7, #12]
 8002b1c:	60b9      	str	r1, [r7, #8]
 8002b1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	6a1b      	ldr	r3, [r3, #32]
 8002b24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	6a1b      	ldr	r3, [r3, #32]
 8002b2a:	f023 0201 	bic.w	r2, r3, #1
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	699b      	ldr	r3, [r3, #24]
 8002b36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	011b      	lsls	r3, r3, #4
 8002b44:	693a      	ldr	r2, [r7, #16]
 8002b46:	4313      	orrs	r3, r2
 8002b48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	f023 030a 	bic.w	r3, r3, #10
 8002b50:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002b52:	697a      	ldr	r2, [r7, #20]
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	4313      	orrs	r3, r2
 8002b58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	693a      	ldr	r2, [r7, #16]
 8002b5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	697a      	ldr	r2, [r7, #20]
 8002b64:	621a      	str	r2, [r3, #32]
}
 8002b66:	bf00      	nop
 8002b68:	371c      	adds	r7, #28
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr

08002b72 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b72:	b480      	push	{r7}
 8002b74:	b087      	sub	sp, #28
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	60f8      	str	r0, [r7, #12]
 8002b7a:	60b9      	str	r1, [r7, #8]
 8002b7c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	6a1b      	ldr	r3, [r3, #32]
 8002b82:	f023 0210 	bic.w	r2, r3, #16
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	699b      	ldr	r3, [r3, #24]
 8002b8e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	6a1b      	ldr	r3, [r3, #32]
 8002b94:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002b9c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	031b      	lsls	r3, r3, #12
 8002ba2:	697a      	ldr	r2, [r7, #20]
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002bae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	011b      	lsls	r3, r3, #4
 8002bb4:	693a      	ldr	r2, [r7, #16]
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	697a      	ldr	r2, [r7, #20]
 8002bbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	693a      	ldr	r2, [r7, #16]
 8002bc4:	621a      	str	r2, [r3, #32]
}
 8002bc6:	bf00      	nop
 8002bc8:	371c      	adds	r7, #28
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr

08002bd2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002bd2:	b480      	push	{r7}
 8002bd4:	b085      	sub	sp, #20
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	6078      	str	r0, [r7, #4]
 8002bda:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002be8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002bea:	683a      	ldr	r2, [r7, #0]
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	f043 0307 	orr.w	r3, r3, #7
 8002bf4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	68fa      	ldr	r2, [r7, #12]
 8002bfa:	609a      	str	r2, [r3, #8]
}
 8002bfc:	bf00      	nop
 8002bfe:	3714      	adds	r7, #20
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr

08002c08 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b087      	sub	sp, #28
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	60f8      	str	r0, [r7, #12]
 8002c10:	60b9      	str	r1, [r7, #8]
 8002c12:	607a      	str	r2, [r7, #4]
 8002c14:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c22:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	021a      	lsls	r2, r3, #8
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	431a      	orrs	r2, r3
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	697a      	ldr	r2, [r7, #20]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	697a      	ldr	r2, [r7, #20]
 8002c3a:	609a      	str	r2, [r3, #8]
}
 8002c3c:	bf00      	nop
 8002c3e:	371c      	adds	r7, #28
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr

08002c48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b085      	sub	sp, #20
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d101      	bne.n	8002c60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002c5c:	2302      	movs	r3, #2
 8002c5e:	e054      	b.n	8002d0a <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2201      	movs	r2, #1
 8002c64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2202      	movs	r2, #2
 8002c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a24      	ldr	r2, [pc, #144]	; (8002d18 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d108      	bne.n	8002c9c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002c90:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	68fa      	ldr	r2, [r7, #12]
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ca2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	68fa      	ldr	r2, [r7, #12]
 8002caa:	4313      	orrs	r3, r2
 8002cac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	68fa      	ldr	r2, [r7, #12]
 8002cb4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a17      	ldr	r2, [pc, #92]	; (8002d18 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d00e      	beq.n	8002cde <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cc8:	d009      	beq.n	8002cde <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a13      	ldr	r2, [pc, #76]	; (8002d1c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d004      	beq.n	8002cde <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a11      	ldr	r2, [pc, #68]	; (8002d20 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d10c      	bne.n	8002cf8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ce4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	68ba      	ldr	r2, [r7, #8]
 8002cec:	4313      	orrs	r3, r2
 8002cee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	68ba      	ldr	r2, [r7, #8]
 8002cf6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2200      	movs	r2, #0
 8002d04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d08:	2300      	movs	r3, #0
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3714      	adds	r7, #20
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr
 8002d16:	bf00      	nop
 8002d18:	40012c00 	.word	0x40012c00
 8002d1c:	40000400 	.word	0x40000400
 8002d20:	40014000 	.word	0x40014000

08002d24 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b082      	sub	sp, #8
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d101      	bne.n	8002d36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e040      	b.n	8002db8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d106      	bne.n	8002d4c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2200      	movs	r2, #0
 8002d42:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f7fd fe2a 	bl	80009a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2224      	movs	r2, #36	; 0x24
 8002d50:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f022 0201 	bic.w	r2, r2, #1
 8002d60:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f000 f8c0 	bl	8002ee8 <UART_SetConfig>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d101      	bne.n	8002d72 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e022      	b.n	8002db8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d002      	beq.n	8002d80 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f000 f9ea 	bl	8003154 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	685a      	ldr	r2, [r3, #4]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d8e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	689a      	ldr	r2, [r3, #8]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d9e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f042 0201 	orr.w	r2, r2, #1
 8002dae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002db0:	6878      	ldr	r0, [r7, #4]
 8002db2:	f000 fa71 	bl	8003298 <UART_CheckIdleState>
 8002db6:	4603      	mov	r3, r0
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3708      	adds	r7, #8
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}

08002dc0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b08a      	sub	sp, #40	; 0x28
 8002dc4:	af02      	add	r7, sp, #8
 8002dc6:	60f8      	str	r0, [r7, #12]
 8002dc8:	60b9      	str	r1, [r7, #8]
 8002dca:	603b      	str	r3, [r7, #0]
 8002dcc:	4613      	mov	r3, r2
 8002dce:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002dd4:	2b20      	cmp	r3, #32
 8002dd6:	f040 8082 	bne.w	8002ede <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d002      	beq.n	8002de6 <HAL_UART_Transmit+0x26>
 8002de0:	88fb      	ldrh	r3, [r7, #6]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d101      	bne.n	8002dea <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e07a      	b.n	8002ee0 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d101      	bne.n	8002df8 <HAL_UART_Transmit+0x38>
 8002df4:	2302      	movs	r3, #2
 8002df6:	e073      	b.n	8002ee0 <HAL_UART_Transmit+0x120>
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2200      	movs	r2, #0
 8002e04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2221      	movs	r2, #33	; 0x21
 8002e0c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e0e:	f7fd ff5f 	bl	8000cd0 <HAL_GetTick>
 8002e12:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	88fa      	ldrh	r2, [r7, #6]
 8002e18:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	88fa      	ldrh	r2, [r7, #6]
 8002e20:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e2c:	d108      	bne.n	8002e40 <HAL_UART_Transmit+0x80>
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	691b      	ldr	r3, [r3, #16]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d104      	bne.n	8002e40 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002e36:	2300      	movs	r3, #0
 8002e38:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	61bb      	str	r3, [r7, #24]
 8002e3e:	e003      	b.n	8002e48 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e44:	2300      	movs	r3, #0
 8002e46:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002e50:	e02d      	b.n	8002eae <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	9300      	str	r3, [sp, #0]
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	2180      	movs	r1, #128	; 0x80
 8002e5c:	68f8      	ldr	r0, [r7, #12]
 8002e5e:	f000 fa64 	bl	800332a <UART_WaitOnFlagUntilTimeout>
 8002e62:	4603      	mov	r3, r0
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d001      	beq.n	8002e6c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002e68:	2303      	movs	r3, #3
 8002e6a:	e039      	b.n	8002ee0 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d10b      	bne.n	8002e8a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e72:	69bb      	ldr	r3, [r7, #24]
 8002e74:	881a      	ldrh	r2, [r3, #0]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e7e:	b292      	uxth	r2, r2
 8002e80:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002e82:	69bb      	ldr	r3, [r7, #24]
 8002e84:	3302      	adds	r3, #2
 8002e86:	61bb      	str	r3, [r7, #24]
 8002e88:	e008      	b.n	8002e9c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e8a:	69fb      	ldr	r3, [r7, #28]
 8002e8c:	781a      	ldrb	r2, [r3, #0]
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	b292      	uxth	r2, r2
 8002e94:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	3301      	adds	r3, #1
 8002e9a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002ea2:	b29b      	uxth	r3, r3
 8002ea4:	3b01      	subs	r3, #1
 8002ea6:	b29a      	uxth	r2, r3
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002eb4:	b29b      	uxth	r3, r3
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d1cb      	bne.n	8002e52 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	9300      	str	r3, [sp, #0]
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	2140      	movs	r1, #64	; 0x40
 8002ec4:	68f8      	ldr	r0, [r7, #12]
 8002ec6:	f000 fa30 	bl	800332a <UART_WaitOnFlagUntilTimeout>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d001      	beq.n	8002ed4 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002ed0:	2303      	movs	r3, #3
 8002ed2:	e005      	b.n	8002ee0 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2220      	movs	r2, #32
 8002ed8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002eda:	2300      	movs	r3, #0
 8002edc:	e000      	b.n	8002ee0 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8002ede:	2302      	movs	r3, #2
  }
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3720      	adds	r7, #32
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}

08002ee8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b088      	sub	sp, #32
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	689a      	ldr	r2, [r3, #8]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	691b      	ldr	r3, [r3, #16]
 8002efc:	431a      	orrs	r2, r3
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	695b      	ldr	r3, [r3, #20]
 8002f02:	431a      	orrs	r2, r3
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	69db      	ldr	r3, [r3, #28]
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	4b8a      	ldr	r3, [pc, #552]	; (800313c <UART_SetConfig+0x254>)
 8002f14:	4013      	ands	r3, r2
 8002f16:	687a      	ldr	r2, [r7, #4]
 8002f18:	6812      	ldr	r2, [r2, #0]
 8002f1a:	6979      	ldr	r1, [r7, #20]
 8002f1c:	430b      	orrs	r3, r1
 8002f1e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	68da      	ldr	r2, [r3, #12]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	430a      	orrs	r2, r1
 8002f34:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	699b      	ldr	r3, [r3, #24]
 8002f3a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6a1b      	ldr	r3, [r3, #32]
 8002f40:	697a      	ldr	r2, [r7, #20]
 8002f42:	4313      	orrs	r3, r2
 8002f44:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	697a      	ldr	r2, [r7, #20]
 8002f56:	430a      	orrs	r2, r1
 8002f58:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a78      	ldr	r2, [pc, #480]	; (8003140 <UART_SetConfig+0x258>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d120      	bne.n	8002fa6 <UART_SetConfig+0xbe>
 8002f64:	4b77      	ldr	r3, [pc, #476]	; (8003144 <UART_SetConfig+0x25c>)
 8002f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f68:	f003 0303 	and.w	r3, r3, #3
 8002f6c:	2b03      	cmp	r3, #3
 8002f6e:	d817      	bhi.n	8002fa0 <UART_SetConfig+0xb8>
 8002f70:	a201      	add	r2, pc, #4	; (adr r2, 8002f78 <UART_SetConfig+0x90>)
 8002f72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f76:	bf00      	nop
 8002f78:	08002f89 	.word	0x08002f89
 8002f7c:	08002f95 	.word	0x08002f95
 8002f80:	08002f9b 	.word	0x08002f9b
 8002f84:	08002f8f 	.word	0x08002f8f
 8002f88:	2300      	movs	r3, #0
 8002f8a:	77fb      	strb	r3, [r7, #31]
 8002f8c:	e01d      	b.n	8002fca <UART_SetConfig+0xe2>
 8002f8e:	2302      	movs	r3, #2
 8002f90:	77fb      	strb	r3, [r7, #31]
 8002f92:	e01a      	b.n	8002fca <UART_SetConfig+0xe2>
 8002f94:	2304      	movs	r3, #4
 8002f96:	77fb      	strb	r3, [r7, #31]
 8002f98:	e017      	b.n	8002fca <UART_SetConfig+0xe2>
 8002f9a:	2308      	movs	r3, #8
 8002f9c:	77fb      	strb	r3, [r7, #31]
 8002f9e:	e014      	b.n	8002fca <UART_SetConfig+0xe2>
 8002fa0:	2310      	movs	r3, #16
 8002fa2:	77fb      	strb	r3, [r7, #31]
 8002fa4:	e011      	b.n	8002fca <UART_SetConfig+0xe2>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a67      	ldr	r2, [pc, #412]	; (8003148 <UART_SetConfig+0x260>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d102      	bne.n	8002fb6 <UART_SetConfig+0xce>
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	77fb      	strb	r3, [r7, #31]
 8002fb4:	e009      	b.n	8002fca <UART_SetConfig+0xe2>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a64      	ldr	r2, [pc, #400]	; (800314c <UART_SetConfig+0x264>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d102      	bne.n	8002fc6 <UART_SetConfig+0xde>
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	77fb      	strb	r3, [r7, #31]
 8002fc4:	e001      	b.n	8002fca <UART_SetConfig+0xe2>
 8002fc6:	2310      	movs	r3, #16
 8002fc8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	69db      	ldr	r3, [r3, #28]
 8002fce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fd2:	d15b      	bne.n	800308c <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8002fd4:	7ffb      	ldrb	r3, [r7, #31]
 8002fd6:	2b08      	cmp	r3, #8
 8002fd8:	d827      	bhi.n	800302a <UART_SetConfig+0x142>
 8002fda:	a201      	add	r2, pc, #4	; (adr r2, 8002fe0 <UART_SetConfig+0xf8>)
 8002fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fe0:	08003005 	.word	0x08003005
 8002fe4:	0800300d 	.word	0x0800300d
 8002fe8:	08003015 	.word	0x08003015
 8002fec:	0800302b 	.word	0x0800302b
 8002ff0:	0800301b 	.word	0x0800301b
 8002ff4:	0800302b 	.word	0x0800302b
 8002ff8:	0800302b 	.word	0x0800302b
 8002ffc:	0800302b 	.word	0x0800302b
 8003000:	08003023 	.word	0x08003023
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003004:	f7ff fa2a 	bl	800245c <HAL_RCC_GetPCLK1Freq>
 8003008:	61b8      	str	r0, [r7, #24]
        break;
 800300a:	e013      	b.n	8003034 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800300c:	f7ff fa48 	bl	80024a0 <HAL_RCC_GetPCLK2Freq>
 8003010:	61b8      	str	r0, [r7, #24]
        break;
 8003012:	e00f      	b.n	8003034 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003014:	4b4e      	ldr	r3, [pc, #312]	; (8003150 <UART_SetConfig+0x268>)
 8003016:	61bb      	str	r3, [r7, #24]
        break;
 8003018:	e00c      	b.n	8003034 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800301a:	f7ff f9a9 	bl	8002370 <HAL_RCC_GetSysClockFreq>
 800301e:	61b8      	str	r0, [r7, #24]
        break;
 8003020:	e008      	b.n	8003034 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003022:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003026:	61bb      	str	r3, [r7, #24]
        break;
 8003028:	e004      	b.n	8003034 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800302a:	2300      	movs	r3, #0
 800302c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	77bb      	strb	r3, [r7, #30]
        break;
 8003032:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003034:	69bb      	ldr	r3, [r7, #24]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d074      	beq.n	8003124 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800303a:	69bb      	ldr	r3, [r7, #24]
 800303c:	005a      	lsls	r2, r3, #1
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	085b      	lsrs	r3, r3, #1
 8003044:	441a      	add	r2, r3
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	fbb2 f3f3 	udiv	r3, r2, r3
 800304e:	b29b      	uxth	r3, r3
 8003050:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	2b0f      	cmp	r3, #15
 8003056:	d916      	bls.n	8003086 <UART_SetConfig+0x19e>
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800305e:	d212      	bcs.n	8003086 <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	b29b      	uxth	r3, r3
 8003064:	f023 030f 	bic.w	r3, r3, #15
 8003068:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	085b      	lsrs	r3, r3, #1
 800306e:	b29b      	uxth	r3, r3
 8003070:	f003 0307 	and.w	r3, r3, #7
 8003074:	b29a      	uxth	r2, r3
 8003076:	89fb      	ldrh	r3, [r7, #14]
 8003078:	4313      	orrs	r3, r2
 800307a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	89fa      	ldrh	r2, [r7, #14]
 8003082:	60da      	str	r2, [r3, #12]
 8003084:	e04e      	b.n	8003124 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	77bb      	strb	r3, [r7, #30]
 800308a:	e04b      	b.n	8003124 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800308c:	7ffb      	ldrb	r3, [r7, #31]
 800308e:	2b08      	cmp	r3, #8
 8003090:	d827      	bhi.n	80030e2 <UART_SetConfig+0x1fa>
 8003092:	a201      	add	r2, pc, #4	; (adr r2, 8003098 <UART_SetConfig+0x1b0>)
 8003094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003098:	080030bd 	.word	0x080030bd
 800309c:	080030c5 	.word	0x080030c5
 80030a0:	080030cd 	.word	0x080030cd
 80030a4:	080030e3 	.word	0x080030e3
 80030a8:	080030d3 	.word	0x080030d3
 80030ac:	080030e3 	.word	0x080030e3
 80030b0:	080030e3 	.word	0x080030e3
 80030b4:	080030e3 	.word	0x080030e3
 80030b8:	080030db 	.word	0x080030db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80030bc:	f7ff f9ce 	bl	800245c <HAL_RCC_GetPCLK1Freq>
 80030c0:	61b8      	str	r0, [r7, #24]
        break;
 80030c2:	e013      	b.n	80030ec <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80030c4:	f7ff f9ec 	bl	80024a0 <HAL_RCC_GetPCLK2Freq>
 80030c8:	61b8      	str	r0, [r7, #24]
        break;
 80030ca:	e00f      	b.n	80030ec <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80030cc:	4b20      	ldr	r3, [pc, #128]	; (8003150 <UART_SetConfig+0x268>)
 80030ce:	61bb      	str	r3, [r7, #24]
        break;
 80030d0:	e00c      	b.n	80030ec <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80030d2:	f7ff f94d 	bl	8002370 <HAL_RCC_GetSysClockFreq>
 80030d6:	61b8      	str	r0, [r7, #24]
        break;
 80030d8:	e008      	b.n	80030ec <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030de:	61bb      	str	r3, [r7, #24]
        break;
 80030e0:	e004      	b.n	80030ec <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80030e2:	2300      	movs	r3, #0
 80030e4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	77bb      	strb	r3, [r7, #30]
        break;
 80030ea:	bf00      	nop
    }

    if (pclk != 0U)
 80030ec:	69bb      	ldr	r3, [r7, #24]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d018      	beq.n	8003124 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	085a      	lsrs	r2, r3, #1
 80030f8:	69bb      	ldr	r3, [r7, #24]
 80030fa:	441a      	add	r2, r3
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	fbb2 f3f3 	udiv	r3, r2, r3
 8003104:	b29b      	uxth	r3, r3
 8003106:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	2b0f      	cmp	r3, #15
 800310c:	d908      	bls.n	8003120 <UART_SetConfig+0x238>
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003114:	d204      	bcs.n	8003120 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	693a      	ldr	r2, [r7, #16]
 800311c:	60da      	str	r2, [r3, #12]
 800311e:	e001      	b.n	8003124 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2200      	movs	r2, #0
 8003128:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2200      	movs	r2, #0
 800312e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003130:	7fbb      	ldrb	r3, [r7, #30]
}
 8003132:	4618      	mov	r0, r3
 8003134:	3720      	adds	r7, #32
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	efff69f3 	.word	0xefff69f3
 8003140:	40013800 	.word	0x40013800
 8003144:	40021000 	.word	0x40021000
 8003148:	40004400 	.word	0x40004400
 800314c:	40004800 	.word	0x40004800
 8003150:	007a1200 	.word	0x007a1200

08003154 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003154:	b480      	push	{r7}
 8003156:	b083      	sub	sp, #12
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003160:	f003 0301 	and.w	r3, r3, #1
 8003164:	2b00      	cmp	r3, #0
 8003166:	d00a      	beq.n	800317e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	430a      	orrs	r2, r1
 800317c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003182:	f003 0302 	and.w	r3, r3, #2
 8003186:	2b00      	cmp	r3, #0
 8003188:	d00a      	beq.n	80031a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	430a      	orrs	r2, r1
 800319e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a4:	f003 0304 	and.w	r3, r3, #4
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d00a      	beq.n	80031c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	430a      	orrs	r2, r1
 80031c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c6:	f003 0308 	and.w	r3, r3, #8
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d00a      	beq.n	80031e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	430a      	orrs	r2, r1
 80031e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e8:	f003 0310 	and.w	r3, r3, #16
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d00a      	beq.n	8003206 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	430a      	orrs	r2, r1
 8003204:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800320a:	f003 0320 	and.w	r3, r3, #32
 800320e:	2b00      	cmp	r3, #0
 8003210:	d00a      	beq.n	8003228 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	430a      	orrs	r2, r1
 8003226:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800322c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003230:	2b00      	cmp	r3, #0
 8003232:	d01a      	beq.n	800326a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	430a      	orrs	r2, r1
 8003248:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003252:	d10a      	bne.n	800326a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	430a      	orrs	r2, r1
 8003268:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800326e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003272:	2b00      	cmp	r3, #0
 8003274:	d00a      	beq.n	800328c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	430a      	orrs	r2, r1
 800328a:	605a      	str	r2, [r3, #4]
  }
}
 800328c:	bf00      	nop
 800328e:	370c      	adds	r7, #12
 8003290:	46bd      	mov	sp, r7
 8003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003296:	4770      	bx	lr

08003298 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b086      	sub	sp, #24
 800329c:	af02      	add	r7, sp, #8
 800329e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2200      	movs	r2, #0
 80032a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80032a8:	f7fd fd12 	bl	8000cd0 <HAL_GetTick>
 80032ac:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 0308 	and.w	r3, r3, #8
 80032b8:	2b08      	cmp	r3, #8
 80032ba:	d10e      	bne.n	80032da <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80032bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80032c0:	9300      	str	r3, [sp, #0]
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2200      	movs	r2, #0
 80032c6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f000 f82d 	bl	800332a <UART_WaitOnFlagUntilTimeout>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d001      	beq.n	80032da <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	e023      	b.n	8003322 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 0304 	and.w	r3, r3, #4
 80032e4:	2b04      	cmp	r3, #4
 80032e6:	d10e      	bne.n	8003306 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80032e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80032ec:	9300      	str	r3, [sp, #0]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2200      	movs	r2, #0
 80032f2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f000 f817 	bl	800332a <UART_WaitOnFlagUntilTimeout>
 80032fc:	4603      	mov	r3, r0
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d001      	beq.n	8003306 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003302:	2303      	movs	r3, #3
 8003304:	e00d      	b.n	8003322 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2220      	movs	r2, #32
 800330a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2220      	movs	r2, #32
 8003310:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2200      	movs	r2, #0
 8003316:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2200      	movs	r2, #0
 800331c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003320:	2300      	movs	r3, #0
}
 8003322:	4618      	mov	r0, r3
 8003324:	3710      	adds	r7, #16
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}

0800332a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800332a:	b580      	push	{r7, lr}
 800332c:	b084      	sub	sp, #16
 800332e:	af00      	add	r7, sp, #0
 8003330:	60f8      	str	r0, [r7, #12]
 8003332:	60b9      	str	r1, [r7, #8]
 8003334:	603b      	str	r3, [r7, #0]
 8003336:	4613      	mov	r3, r2
 8003338:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800333a:	e05e      	b.n	80033fa <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800333c:	69bb      	ldr	r3, [r7, #24]
 800333e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003342:	d05a      	beq.n	80033fa <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003344:	f7fd fcc4 	bl	8000cd0 <HAL_GetTick>
 8003348:	4602      	mov	r2, r0
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	69ba      	ldr	r2, [r7, #24]
 8003350:	429a      	cmp	r2, r3
 8003352:	d302      	bcc.n	800335a <UART_WaitOnFlagUntilTimeout+0x30>
 8003354:	69bb      	ldr	r3, [r7, #24]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d11b      	bne.n	8003392 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003368:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	689a      	ldr	r2, [r3, #8]
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f022 0201 	bic.w	r2, r2, #1
 8003378:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2220      	movs	r2, #32
 800337e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2220      	movs	r2, #32
 8003384:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2200      	movs	r2, #0
 800338a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800338e:	2303      	movs	r3, #3
 8003390:	e043      	b.n	800341a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 0304 	and.w	r3, r3, #4
 800339c:	2b00      	cmp	r3, #0
 800339e:	d02c      	beq.n	80033fa <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	69db      	ldr	r3, [r3, #28]
 80033a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033ae:	d124      	bne.n	80033fa <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80033b8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80033c8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	689a      	ldr	r2, [r3, #8]
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f022 0201 	bic.w	r2, r2, #1
 80033d8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2220      	movs	r2, #32
 80033de:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2220      	movs	r2, #32
 80033e4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2220      	movs	r2, #32
 80033ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2200      	movs	r2, #0
 80033f2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80033f6:	2303      	movs	r3, #3
 80033f8:	e00f      	b.n	800341a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	69da      	ldr	r2, [r3, #28]
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	4013      	ands	r3, r2
 8003404:	68ba      	ldr	r2, [r7, #8]
 8003406:	429a      	cmp	r2, r3
 8003408:	bf0c      	ite	eq
 800340a:	2301      	moveq	r3, #1
 800340c:	2300      	movne	r3, #0
 800340e:	b2db      	uxtb	r3, r3
 8003410:	461a      	mov	r2, r3
 8003412:	79fb      	ldrb	r3, [r7, #7]
 8003414:	429a      	cmp	r2, r3
 8003416:	d091      	beq.n	800333c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003418:	2300      	movs	r3, #0
}
 800341a:	4618      	mov	r0, r3
 800341c:	3710      	adds	r7, #16
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
	...

08003424 <__errno>:
 8003424:	4b01      	ldr	r3, [pc, #4]	; (800342c <__errno+0x8>)
 8003426:	6818      	ldr	r0, [r3, #0]
 8003428:	4770      	bx	lr
 800342a:	bf00      	nop
 800342c:	2000000c 	.word	0x2000000c

08003430 <__libc_init_array>:
 8003430:	b570      	push	{r4, r5, r6, lr}
 8003432:	4d0d      	ldr	r5, [pc, #52]	; (8003468 <__libc_init_array+0x38>)
 8003434:	4c0d      	ldr	r4, [pc, #52]	; (800346c <__libc_init_array+0x3c>)
 8003436:	1b64      	subs	r4, r4, r5
 8003438:	10a4      	asrs	r4, r4, #2
 800343a:	2600      	movs	r6, #0
 800343c:	42a6      	cmp	r6, r4
 800343e:	d109      	bne.n	8003454 <__libc_init_array+0x24>
 8003440:	4d0b      	ldr	r5, [pc, #44]	; (8003470 <__libc_init_array+0x40>)
 8003442:	4c0c      	ldr	r4, [pc, #48]	; (8003474 <__libc_init_array+0x44>)
 8003444:	f001 f84c 	bl	80044e0 <_init>
 8003448:	1b64      	subs	r4, r4, r5
 800344a:	10a4      	asrs	r4, r4, #2
 800344c:	2600      	movs	r6, #0
 800344e:	42a6      	cmp	r6, r4
 8003450:	d105      	bne.n	800345e <__libc_init_array+0x2e>
 8003452:	bd70      	pop	{r4, r5, r6, pc}
 8003454:	f855 3b04 	ldr.w	r3, [r5], #4
 8003458:	4798      	blx	r3
 800345a:	3601      	adds	r6, #1
 800345c:	e7ee      	b.n	800343c <__libc_init_array+0xc>
 800345e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003462:	4798      	blx	r3
 8003464:	3601      	adds	r6, #1
 8003466:	e7f2      	b.n	800344e <__libc_init_array+0x1e>
 8003468:	080045e8 	.word	0x080045e8
 800346c:	080045e8 	.word	0x080045e8
 8003470:	080045e8 	.word	0x080045e8
 8003474:	080045ec 	.word	0x080045ec

08003478 <memset>:
 8003478:	4402      	add	r2, r0
 800347a:	4603      	mov	r3, r0
 800347c:	4293      	cmp	r3, r2
 800347e:	d100      	bne.n	8003482 <memset+0xa>
 8003480:	4770      	bx	lr
 8003482:	f803 1b01 	strb.w	r1, [r3], #1
 8003486:	e7f9      	b.n	800347c <memset+0x4>

08003488 <iprintf>:
 8003488:	b40f      	push	{r0, r1, r2, r3}
 800348a:	4b0a      	ldr	r3, [pc, #40]	; (80034b4 <iprintf+0x2c>)
 800348c:	b513      	push	{r0, r1, r4, lr}
 800348e:	681c      	ldr	r4, [r3, #0]
 8003490:	b124      	cbz	r4, 800349c <iprintf+0x14>
 8003492:	69a3      	ldr	r3, [r4, #24]
 8003494:	b913      	cbnz	r3, 800349c <iprintf+0x14>
 8003496:	4620      	mov	r0, r4
 8003498:	f000 f9f6 	bl	8003888 <__sinit>
 800349c:	ab05      	add	r3, sp, #20
 800349e:	9a04      	ldr	r2, [sp, #16]
 80034a0:	68a1      	ldr	r1, [r4, #8]
 80034a2:	9301      	str	r3, [sp, #4]
 80034a4:	4620      	mov	r0, r4
 80034a6:	f000 fbcf 	bl	8003c48 <_vfiprintf_r>
 80034aa:	b002      	add	sp, #8
 80034ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80034b0:	b004      	add	sp, #16
 80034b2:	4770      	bx	lr
 80034b4:	2000000c 	.word	0x2000000c

080034b8 <setbuf>:
 80034b8:	2900      	cmp	r1, #0
 80034ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034be:	bf0c      	ite	eq
 80034c0:	2202      	moveq	r2, #2
 80034c2:	2200      	movne	r2, #0
 80034c4:	f000 b800 	b.w	80034c8 <setvbuf>

080034c8 <setvbuf>:
 80034c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80034cc:	461d      	mov	r5, r3
 80034ce:	4b5d      	ldr	r3, [pc, #372]	; (8003644 <setvbuf+0x17c>)
 80034d0:	681f      	ldr	r7, [r3, #0]
 80034d2:	4604      	mov	r4, r0
 80034d4:	460e      	mov	r6, r1
 80034d6:	4690      	mov	r8, r2
 80034d8:	b127      	cbz	r7, 80034e4 <setvbuf+0x1c>
 80034da:	69bb      	ldr	r3, [r7, #24]
 80034dc:	b913      	cbnz	r3, 80034e4 <setvbuf+0x1c>
 80034de:	4638      	mov	r0, r7
 80034e0:	f000 f9d2 	bl	8003888 <__sinit>
 80034e4:	4b58      	ldr	r3, [pc, #352]	; (8003648 <setvbuf+0x180>)
 80034e6:	429c      	cmp	r4, r3
 80034e8:	d167      	bne.n	80035ba <setvbuf+0xf2>
 80034ea:	687c      	ldr	r4, [r7, #4]
 80034ec:	f1b8 0f02 	cmp.w	r8, #2
 80034f0:	d006      	beq.n	8003500 <setvbuf+0x38>
 80034f2:	f1b8 0f01 	cmp.w	r8, #1
 80034f6:	f200 809f 	bhi.w	8003638 <setvbuf+0x170>
 80034fa:	2d00      	cmp	r5, #0
 80034fc:	f2c0 809c 	blt.w	8003638 <setvbuf+0x170>
 8003500:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003502:	07db      	lsls	r3, r3, #31
 8003504:	d405      	bmi.n	8003512 <setvbuf+0x4a>
 8003506:	89a3      	ldrh	r3, [r4, #12]
 8003508:	0598      	lsls	r0, r3, #22
 800350a:	d402      	bmi.n	8003512 <setvbuf+0x4a>
 800350c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800350e:	f000 fa59 	bl	80039c4 <__retarget_lock_acquire_recursive>
 8003512:	4621      	mov	r1, r4
 8003514:	4638      	mov	r0, r7
 8003516:	f000 f923 	bl	8003760 <_fflush_r>
 800351a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800351c:	b141      	cbz	r1, 8003530 <setvbuf+0x68>
 800351e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003522:	4299      	cmp	r1, r3
 8003524:	d002      	beq.n	800352c <setvbuf+0x64>
 8003526:	4638      	mov	r0, r7
 8003528:	f000 faba 	bl	8003aa0 <_free_r>
 800352c:	2300      	movs	r3, #0
 800352e:	6363      	str	r3, [r4, #52]	; 0x34
 8003530:	2300      	movs	r3, #0
 8003532:	61a3      	str	r3, [r4, #24]
 8003534:	6063      	str	r3, [r4, #4]
 8003536:	89a3      	ldrh	r3, [r4, #12]
 8003538:	0619      	lsls	r1, r3, #24
 800353a:	d503      	bpl.n	8003544 <setvbuf+0x7c>
 800353c:	6921      	ldr	r1, [r4, #16]
 800353e:	4638      	mov	r0, r7
 8003540:	f000 faae 	bl	8003aa0 <_free_r>
 8003544:	89a3      	ldrh	r3, [r4, #12]
 8003546:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800354a:	f023 0303 	bic.w	r3, r3, #3
 800354e:	f1b8 0f02 	cmp.w	r8, #2
 8003552:	81a3      	strh	r3, [r4, #12]
 8003554:	d06c      	beq.n	8003630 <setvbuf+0x168>
 8003556:	ab01      	add	r3, sp, #4
 8003558:	466a      	mov	r2, sp
 800355a:	4621      	mov	r1, r4
 800355c:	4638      	mov	r0, r7
 800355e:	f000 fa33 	bl	80039c8 <__swhatbuf_r>
 8003562:	89a3      	ldrh	r3, [r4, #12]
 8003564:	4318      	orrs	r0, r3
 8003566:	81a0      	strh	r0, [r4, #12]
 8003568:	2d00      	cmp	r5, #0
 800356a:	d130      	bne.n	80035ce <setvbuf+0x106>
 800356c:	9d00      	ldr	r5, [sp, #0]
 800356e:	4628      	mov	r0, r5
 8003570:	f000 fa8e 	bl	8003a90 <malloc>
 8003574:	4606      	mov	r6, r0
 8003576:	2800      	cmp	r0, #0
 8003578:	d155      	bne.n	8003626 <setvbuf+0x15e>
 800357a:	f8dd 9000 	ldr.w	r9, [sp]
 800357e:	45a9      	cmp	r9, r5
 8003580:	d14a      	bne.n	8003618 <setvbuf+0x150>
 8003582:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8003586:	2200      	movs	r2, #0
 8003588:	60a2      	str	r2, [r4, #8]
 800358a:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800358e:	6022      	str	r2, [r4, #0]
 8003590:	6122      	str	r2, [r4, #16]
 8003592:	2201      	movs	r2, #1
 8003594:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003598:	6162      	str	r2, [r4, #20]
 800359a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800359c:	f043 0302 	orr.w	r3, r3, #2
 80035a0:	07d2      	lsls	r2, r2, #31
 80035a2:	81a3      	strh	r3, [r4, #12]
 80035a4:	d405      	bmi.n	80035b2 <setvbuf+0xea>
 80035a6:	f413 7f00 	tst.w	r3, #512	; 0x200
 80035aa:	d102      	bne.n	80035b2 <setvbuf+0xea>
 80035ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80035ae:	f000 fa0a 	bl	80039c6 <__retarget_lock_release_recursive>
 80035b2:	4628      	mov	r0, r5
 80035b4:	b003      	add	sp, #12
 80035b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80035ba:	4b24      	ldr	r3, [pc, #144]	; (800364c <setvbuf+0x184>)
 80035bc:	429c      	cmp	r4, r3
 80035be:	d101      	bne.n	80035c4 <setvbuf+0xfc>
 80035c0:	68bc      	ldr	r4, [r7, #8]
 80035c2:	e793      	b.n	80034ec <setvbuf+0x24>
 80035c4:	4b22      	ldr	r3, [pc, #136]	; (8003650 <setvbuf+0x188>)
 80035c6:	429c      	cmp	r4, r3
 80035c8:	bf08      	it	eq
 80035ca:	68fc      	ldreq	r4, [r7, #12]
 80035cc:	e78e      	b.n	80034ec <setvbuf+0x24>
 80035ce:	2e00      	cmp	r6, #0
 80035d0:	d0cd      	beq.n	800356e <setvbuf+0xa6>
 80035d2:	69bb      	ldr	r3, [r7, #24]
 80035d4:	b913      	cbnz	r3, 80035dc <setvbuf+0x114>
 80035d6:	4638      	mov	r0, r7
 80035d8:	f000 f956 	bl	8003888 <__sinit>
 80035dc:	f1b8 0f01 	cmp.w	r8, #1
 80035e0:	bf08      	it	eq
 80035e2:	89a3      	ldrheq	r3, [r4, #12]
 80035e4:	6026      	str	r6, [r4, #0]
 80035e6:	bf04      	itt	eq
 80035e8:	f043 0301 	orreq.w	r3, r3, #1
 80035ec:	81a3      	strheq	r3, [r4, #12]
 80035ee:	89a2      	ldrh	r2, [r4, #12]
 80035f0:	f012 0308 	ands.w	r3, r2, #8
 80035f4:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80035f8:	d01c      	beq.n	8003634 <setvbuf+0x16c>
 80035fa:	07d3      	lsls	r3, r2, #31
 80035fc:	bf41      	itttt	mi
 80035fe:	2300      	movmi	r3, #0
 8003600:	426d      	negmi	r5, r5
 8003602:	60a3      	strmi	r3, [r4, #8]
 8003604:	61a5      	strmi	r5, [r4, #24]
 8003606:	bf58      	it	pl
 8003608:	60a5      	strpl	r5, [r4, #8]
 800360a:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800360c:	f015 0501 	ands.w	r5, r5, #1
 8003610:	d115      	bne.n	800363e <setvbuf+0x176>
 8003612:	f412 7f00 	tst.w	r2, #512	; 0x200
 8003616:	e7c8      	b.n	80035aa <setvbuf+0xe2>
 8003618:	4648      	mov	r0, r9
 800361a:	f000 fa39 	bl	8003a90 <malloc>
 800361e:	4606      	mov	r6, r0
 8003620:	2800      	cmp	r0, #0
 8003622:	d0ae      	beq.n	8003582 <setvbuf+0xba>
 8003624:	464d      	mov	r5, r9
 8003626:	89a3      	ldrh	r3, [r4, #12]
 8003628:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800362c:	81a3      	strh	r3, [r4, #12]
 800362e:	e7d0      	b.n	80035d2 <setvbuf+0x10a>
 8003630:	2500      	movs	r5, #0
 8003632:	e7a8      	b.n	8003586 <setvbuf+0xbe>
 8003634:	60a3      	str	r3, [r4, #8]
 8003636:	e7e8      	b.n	800360a <setvbuf+0x142>
 8003638:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800363c:	e7b9      	b.n	80035b2 <setvbuf+0xea>
 800363e:	2500      	movs	r5, #0
 8003640:	e7b7      	b.n	80035b2 <setvbuf+0xea>
 8003642:	bf00      	nop
 8003644:	2000000c 	.word	0x2000000c
 8003648:	08004574 	.word	0x08004574
 800364c:	08004594 	.word	0x08004594
 8003650:	08004554 	.word	0x08004554

08003654 <__sflush_r>:
 8003654:	898a      	ldrh	r2, [r1, #12]
 8003656:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800365a:	4605      	mov	r5, r0
 800365c:	0710      	lsls	r0, r2, #28
 800365e:	460c      	mov	r4, r1
 8003660:	d458      	bmi.n	8003714 <__sflush_r+0xc0>
 8003662:	684b      	ldr	r3, [r1, #4]
 8003664:	2b00      	cmp	r3, #0
 8003666:	dc05      	bgt.n	8003674 <__sflush_r+0x20>
 8003668:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800366a:	2b00      	cmp	r3, #0
 800366c:	dc02      	bgt.n	8003674 <__sflush_r+0x20>
 800366e:	2000      	movs	r0, #0
 8003670:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003674:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003676:	2e00      	cmp	r6, #0
 8003678:	d0f9      	beq.n	800366e <__sflush_r+0x1a>
 800367a:	2300      	movs	r3, #0
 800367c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003680:	682f      	ldr	r7, [r5, #0]
 8003682:	602b      	str	r3, [r5, #0]
 8003684:	d032      	beq.n	80036ec <__sflush_r+0x98>
 8003686:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003688:	89a3      	ldrh	r3, [r4, #12]
 800368a:	075a      	lsls	r2, r3, #29
 800368c:	d505      	bpl.n	800369a <__sflush_r+0x46>
 800368e:	6863      	ldr	r3, [r4, #4]
 8003690:	1ac0      	subs	r0, r0, r3
 8003692:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003694:	b10b      	cbz	r3, 800369a <__sflush_r+0x46>
 8003696:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003698:	1ac0      	subs	r0, r0, r3
 800369a:	2300      	movs	r3, #0
 800369c:	4602      	mov	r2, r0
 800369e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80036a0:	6a21      	ldr	r1, [r4, #32]
 80036a2:	4628      	mov	r0, r5
 80036a4:	47b0      	blx	r6
 80036a6:	1c43      	adds	r3, r0, #1
 80036a8:	89a3      	ldrh	r3, [r4, #12]
 80036aa:	d106      	bne.n	80036ba <__sflush_r+0x66>
 80036ac:	6829      	ldr	r1, [r5, #0]
 80036ae:	291d      	cmp	r1, #29
 80036b0:	d82c      	bhi.n	800370c <__sflush_r+0xb8>
 80036b2:	4a2a      	ldr	r2, [pc, #168]	; (800375c <__sflush_r+0x108>)
 80036b4:	40ca      	lsrs	r2, r1
 80036b6:	07d6      	lsls	r6, r2, #31
 80036b8:	d528      	bpl.n	800370c <__sflush_r+0xb8>
 80036ba:	2200      	movs	r2, #0
 80036bc:	6062      	str	r2, [r4, #4]
 80036be:	04d9      	lsls	r1, r3, #19
 80036c0:	6922      	ldr	r2, [r4, #16]
 80036c2:	6022      	str	r2, [r4, #0]
 80036c4:	d504      	bpl.n	80036d0 <__sflush_r+0x7c>
 80036c6:	1c42      	adds	r2, r0, #1
 80036c8:	d101      	bne.n	80036ce <__sflush_r+0x7a>
 80036ca:	682b      	ldr	r3, [r5, #0]
 80036cc:	b903      	cbnz	r3, 80036d0 <__sflush_r+0x7c>
 80036ce:	6560      	str	r0, [r4, #84]	; 0x54
 80036d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80036d2:	602f      	str	r7, [r5, #0]
 80036d4:	2900      	cmp	r1, #0
 80036d6:	d0ca      	beq.n	800366e <__sflush_r+0x1a>
 80036d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80036dc:	4299      	cmp	r1, r3
 80036de:	d002      	beq.n	80036e6 <__sflush_r+0x92>
 80036e0:	4628      	mov	r0, r5
 80036e2:	f000 f9dd 	bl	8003aa0 <_free_r>
 80036e6:	2000      	movs	r0, #0
 80036e8:	6360      	str	r0, [r4, #52]	; 0x34
 80036ea:	e7c1      	b.n	8003670 <__sflush_r+0x1c>
 80036ec:	6a21      	ldr	r1, [r4, #32]
 80036ee:	2301      	movs	r3, #1
 80036f0:	4628      	mov	r0, r5
 80036f2:	47b0      	blx	r6
 80036f4:	1c41      	adds	r1, r0, #1
 80036f6:	d1c7      	bne.n	8003688 <__sflush_r+0x34>
 80036f8:	682b      	ldr	r3, [r5, #0]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d0c4      	beq.n	8003688 <__sflush_r+0x34>
 80036fe:	2b1d      	cmp	r3, #29
 8003700:	d001      	beq.n	8003706 <__sflush_r+0xb2>
 8003702:	2b16      	cmp	r3, #22
 8003704:	d101      	bne.n	800370a <__sflush_r+0xb6>
 8003706:	602f      	str	r7, [r5, #0]
 8003708:	e7b1      	b.n	800366e <__sflush_r+0x1a>
 800370a:	89a3      	ldrh	r3, [r4, #12]
 800370c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003710:	81a3      	strh	r3, [r4, #12]
 8003712:	e7ad      	b.n	8003670 <__sflush_r+0x1c>
 8003714:	690f      	ldr	r7, [r1, #16]
 8003716:	2f00      	cmp	r7, #0
 8003718:	d0a9      	beq.n	800366e <__sflush_r+0x1a>
 800371a:	0793      	lsls	r3, r2, #30
 800371c:	680e      	ldr	r6, [r1, #0]
 800371e:	bf08      	it	eq
 8003720:	694b      	ldreq	r3, [r1, #20]
 8003722:	600f      	str	r7, [r1, #0]
 8003724:	bf18      	it	ne
 8003726:	2300      	movne	r3, #0
 8003728:	eba6 0807 	sub.w	r8, r6, r7
 800372c:	608b      	str	r3, [r1, #8]
 800372e:	f1b8 0f00 	cmp.w	r8, #0
 8003732:	dd9c      	ble.n	800366e <__sflush_r+0x1a>
 8003734:	6a21      	ldr	r1, [r4, #32]
 8003736:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003738:	4643      	mov	r3, r8
 800373a:	463a      	mov	r2, r7
 800373c:	4628      	mov	r0, r5
 800373e:	47b0      	blx	r6
 8003740:	2800      	cmp	r0, #0
 8003742:	dc06      	bgt.n	8003752 <__sflush_r+0xfe>
 8003744:	89a3      	ldrh	r3, [r4, #12]
 8003746:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800374a:	81a3      	strh	r3, [r4, #12]
 800374c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003750:	e78e      	b.n	8003670 <__sflush_r+0x1c>
 8003752:	4407      	add	r7, r0
 8003754:	eba8 0800 	sub.w	r8, r8, r0
 8003758:	e7e9      	b.n	800372e <__sflush_r+0xda>
 800375a:	bf00      	nop
 800375c:	20400001 	.word	0x20400001

08003760 <_fflush_r>:
 8003760:	b538      	push	{r3, r4, r5, lr}
 8003762:	690b      	ldr	r3, [r1, #16]
 8003764:	4605      	mov	r5, r0
 8003766:	460c      	mov	r4, r1
 8003768:	b913      	cbnz	r3, 8003770 <_fflush_r+0x10>
 800376a:	2500      	movs	r5, #0
 800376c:	4628      	mov	r0, r5
 800376e:	bd38      	pop	{r3, r4, r5, pc}
 8003770:	b118      	cbz	r0, 800377a <_fflush_r+0x1a>
 8003772:	6983      	ldr	r3, [r0, #24]
 8003774:	b90b      	cbnz	r3, 800377a <_fflush_r+0x1a>
 8003776:	f000 f887 	bl	8003888 <__sinit>
 800377a:	4b14      	ldr	r3, [pc, #80]	; (80037cc <_fflush_r+0x6c>)
 800377c:	429c      	cmp	r4, r3
 800377e:	d11b      	bne.n	80037b8 <_fflush_r+0x58>
 8003780:	686c      	ldr	r4, [r5, #4]
 8003782:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d0ef      	beq.n	800376a <_fflush_r+0xa>
 800378a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800378c:	07d0      	lsls	r0, r2, #31
 800378e:	d404      	bmi.n	800379a <_fflush_r+0x3a>
 8003790:	0599      	lsls	r1, r3, #22
 8003792:	d402      	bmi.n	800379a <_fflush_r+0x3a>
 8003794:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003796:	f000 f915 	bl	80039c4 <__retarget_lock_acquire_recursive>
 800379a:	4628      	mov	r0, r5
 800379c:	4621      	mov	r1, r4
 800379e:	f7ff ff59 	bl	8003654 <__sflush_r>
 80037a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80037a4:	07da      	lsls	r2, r3, #31
 80037a6:	4605      	mov	r5, r0
 80037a8:	d4e0      	bmi.n	800376c <_fflush_r+0xc>
 80037aa:	89a3      	ldrh	r3, [r4, #12]
 80037ac:	059b      	lsls	r3, r3, #22
 80037ae:	d4dd      	bmi.n	800376c <_fflush_r+0xc>
 80037b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80037b2:	f000 f908 	bl	80039c6 <__retarget_lock_release_recursive>
 80037b6:	e7d9      	b.n	800376c <_fflush_r+0xc>
 80037b8:	4b05      	ldr	r3, [pc, #20]	; (80037d0 <_fflush_r+0x70>)
 80037ba:	429c      	cmp	r4, r3
 80037bc:	d101      	bne.n	80037c2 <_fflush_r+0x62>
 80037be:	68ac      	ldr	r4, [r5, #8]
 80037c0:	e7df      	b.n	8003782 <_fflush_r+0x22>
 80037c2:	4b04      	ldr	r3, [pc, #16]	; (80037d4 <_fflush_r+0x74>)
 80037c4:	429c      	cmp	r4, r3
 80037c6:	bf08      	it	eq
 80037c8:	68ec      	ldreq	r4, [r5, #12]
 80037ca:	e7da      	b.n	8003782 <_fflush_r+0x22>
 80037cc:	08004574 	.word	0x08004574
 80037d0:	08004594 	.word	0x08004594
 80037d4:	08004554 	.word	0x08004554

080037d8 <std>:
 80037d8:	2300      	movs	r3, #0
 80037da:	b510      	push	{r4, lr}
 80037dc:	4604      	mov	r4, r0
 80037de:	e9c0 3300 	strd	r3, r3, [r0]
 80037e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80037e6:	6083      	str	r3, [r0, #8]
 80037e8:	8181      	strh	r1, [r0, #12]
 80037ea:	6643      	str	r3, [r0, #100]	; 0x64
 80037ec:	81c2      	strh	r2, [r0, #14]
 80037ee:	6183      	str	r3, [r0, #24]
 80037f0:	4619      	mov	r1, r3
 80037f2:	2208      	movs	r2, #8
 80037f4:	305c      	adds	r0, #92	; 0x5c
 80037f6:	f7ff fe3f 	bl	8003478 <memset>
 80037fa:	4b05      	ldr	r3, [pc, #20]	; (8003810 <std+0x38>)
 80037fc:	6263      	str	r3, [r4, #36]	; 0x24
 80037fe:	4b05      	ldr	r3, [pc, #20]	; (8003814 <std+0x3c>)
 8003800:	62a3      	str	r3, [r4, #40]	; 0x28
 8003802:	4b05      	ldr	r3, [pc, #20]	; (8003818 <std+0x40>)
 8003804:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003806:	4b05      	ldr	r3, [pc, #20]	; (800381c <std+0x44>)
 8003808:	6224      	str	r4, [r4, #32]
 800380a:	6323      	str	r3, [r4, #48]	; 0x30
 800380c:	bd10      	pop	{r4, pc}
 800380e:	bf00      	nop
 8003810:	080041f1 	.word	0x080041f1
 8003814:	08004213 	.word	0x08004213
 8003818:	0800424b 	.word	0x0800424b
 800381c:	0800426f 	.word	0x0800426f

08003820 <_cleanup_r>:
 8003820:	4901      	ldr	r1, [pc, #4]	; (8003828 <_cleanup_r+0x8>)
 8003822:	f000 b8af 	b.w	8003984 <_fwalk_reent>
 8003826:	bf00      	nop
 8003828:	08003761 	.word	0x08003761

0800382c <__sfmoreglue>:
 800382c:	b570      	push	{r4, r5, r6, lr}
 800382e:	1e4a      	subs	r2, r1, #1
 8003830:	2568      	movs	r5, #104	; 0x68
 8003832:	4355      	muls	r5, r2
 8003834:	460e      	mov	r6, r1
 8003836:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800383a:	f000 f981 	bl	8003b40 <_malloc_r>
 800383e:	4604      	mov	r4, r0
 8003840:	b140      	cbz	r0, 8003854 <__sfmoreglue+0x28>
 8003842:	2100      	movs	r1, #0
 8003844:	e9c0 1600 	strd	r1, r6, [r0]
 8003848:	300c      	adds	r0, #12
 800384a:	60a0      	str	r0, [r4, #8]
 800384c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003850:	f7ff fe12 	bl	8003478 <memset>
 8003854:	4620      	mov	r0, r4
 8003856:	bd70      	pop	{r4, r5, r6, pc}

08003858 <__sfp_lock_acquire>:
 8003858:	4801      	ldr	r0, [pc, #4]	; (8003860 <__sfp_lock_acquire+0x8>)
 800385a:	f000 b8b3 	b.w	80039c4 <__retarget_lock_acquire_recursive>
 800385e:	bf00      	nop
 8003860:	20000268 	.word	0x20000268

08003864 <__sfp_lock_release>:
 8003864:	4801      	ldr	r0, [pc, #4]	; (800386c <__sfp_lock_release+0x8>)
 8003866:	f000 b8ae 	b.w	80039c6 <__retarget_lock_release_recursive>
 800386a:	bf00      	nop
 800386c:	20000268 	.word	0x20000268

08003870 <__sinit_lock_acquire>:
 8003870:	4801      	ldr	r0, [pc, #4]	; (8003878 <__sinit_lock_acquire+0x8>)
 8003872:	f000 b8a7 	b.w	80039c4 <__retarget_lock_acquire_recursive>
 8003876:	bf00      	nop
 8003878:	20000263 	.word	0x20000263

0800387c <__sinit_lock_release>:
 800387c:	4801      	ldr	r0, [pc, #4]	; (8003884 <__sinit_lock_release+0x8>)
 800387e:	f000 b8a2 	b.w	80039c6 <__retarget_lock_release_recursive>
 8003882:	bf00      	nop
 8003884:	20000263 	.word	0x20000263

08003888 <__sinit>:
 8003888:	b510      	push	{r4, lr}
 800388a:	4604      	mov	r4, r0
 800388c:	f7ff fff0 	bl	8003870 <__sinit_lock_acquire>
 8003890:	69a3      	ldr	r3, [r4, #24]
 8003892:	b11b      	cbz	r3, 800389c <__sinit+0x14>
 8003894:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003898:	f7ff bff0 	b.w	800387c <__sinit_lock_release>
 800389c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80038a0:	6523      	str	r3, [r4, #80]	; 0x50
 80038a2:	4b13      	ldr	r3, [pc, #76]	; (80038f0 <__sinit+0x68>)
 80038a4:	4a13      	ldr	r2, [pc, #76]	; (80038f4 <__sinit+0x6c>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	62a2      	str	r2, [r4, #40]	; 0x28
 80038aa:	42a3      	cmp	r3, r4
 80038ac:	bf04      	itt	eq
 80038ae:	2301      	moveq	r3, #1
 80038b0:	61a3      	streq	r3, [r4, #24]
 80038b2:	4620      	mov	r0, r4
 80038b4:	f000 f820 	bl	80038f8 <__sfp>
 80038b8:	6060      	str	r0, [r4, #4]
 80038ba:	4620      	mov	r0, r4
 80038bc:	f000 f81c 	bl	80038f8 <__sfp>
 80038c0:	60a0      	str	r0, [r4, #8]
 80038c2:	4620      	mov	r0, r4
 80038c4:	f000 f818 	bl	80038f8 <__sfp>
 80038c8:	2200      	movs	r2, #0
 80038ca:	60e0      	str	r0, [r4, #12]
 80038cc:	2104      	movs	r1, #4
 80038ce:	6860      	ldr	r0, [r4, #4]
 80038d0:	f7ff ff82 	bl	80037d8 <std>
 80038d4:	68a0      	ldr	r0, [r4, #8]
 80038d6:	2201      	movs	r2, #1
 80038d8:	2109      	movs	r1, #9
 80038da:	f7ff ff7d 	bl	80037d8 <std>
 80038de:	68e0      	ldr	r0, [r4, #12]
 80038e0:	2202      	movs	r2, #2
 80038e2:	2112      	movs	r1, #18
 80038e4:	f7ff ff78 	bl	80037d8 <std>
 80038e8:	2301      	movs	r3, #1
 80038ea:	61a3      	str	r3, [r4, #24]
 80038ec:	e7d2      	b.n	8003894 <__sinit+0xc>
 80038ee:	bf00      	nop
 80038f0:	08004550 	.word	0x08004550
 80038f4:	08003821 	.word	0x08003821

080038f8 <__sfp>:
 80038f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038fa:	4607      	mov	r7, r0
 80038fc:	f7ff ffac 	bl	8003858 <__sfp_lock_acquire>
 8003900:	4b1e      	ldr	r3, [pc, #120]	; (800397c <__sfp+0x84>)
 8003902:	681e      	ldr	r6, [r3, #0]
 8003904:	69b3      	ldr	r3, [r6, #24]
 8003906:	b913      	cbnz	r3, 800390e <__sfp+0x16>
 8003908:	4630      	mov	r0, r6
 800390a:	f7ff ffbd 	bl	8003888 <__sinit>
 800390e:	3648      	adds	r6, #72	; 0x48
 8003910:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003914:	3b01      	subs	r3, #1
 8003916:	d503      	bpl.n	8003920 <__sfp+0x28>
 8003918:	6833      	ldr	r3, [r6, #0]
 800391a:	b30b      	cbz	r3, 8003960 <__sfp+0x68>
 800391c:	6836      	ldr	r6, [r6, #0]
 800391e:	e7f7      	b.n	8003910 <__sfp+0x18>
 8003920:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003924:	b9d5      	cbnz	r5, 800395c <__sfp+0x64>
 8003926:	4b16      	ldr	r3, [pc, #88]	; (8003980 <__sfp+0x88>)
 8003928:	60e3      	str	r3, [r4, #12]
 800392a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800392e:	6665      	str	r5, [r4, #100]	; 0x64
 8003930:	f000 f847 	bl	80039c2 <__retarget_lock_init_recursive>
 8003934:	f7ff ff96 	bl	8003864 <__sfp_lock_release>
 8003938:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800393c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003940:	6025      	str	r5, [r4, #0]
 8003942:	61a5      	str	r5, [r4, #24]
 8003944:	2208      	movs	r2, #8
 8003946:	4629      	mov	r1, r5
 8003948:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800394c:	f7ff fd94 	bl	8003478 <memset>
 8003950:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003954:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003958:	4620      	mov	r0, r4
 800395a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800395c:	3468      	adds	r4, #104	; 0x68
 800395e:	e7d9      	b.n	8003914 <__sfp+0x1c>
 8003960:	2104      	movs	r1, #4
 8003962:	4638      	mov	r0, r7
 8003964:	f7ff ff62 	bl	800382c <__sfmoreglue>
 8003968:	4604      	mov	r4, r0
 800396a:	6030      	str	r0, [r6, #0]
 800396c:	2800      	cmp	r0, #0
 800396e:	d1d5      	bne.n	800391c <__sfp+0x24>
 8003970:	f7ff ff78 	bl	8003864 <__sfp_lock_release>
 8003974:	230c      	movs	r3, #12
 8003976:	603b      	str	r3, [r7, #0]
 8003978:	e7ee      	b.n	8003958 <__sfp+0x60>
 800397a:	bf00      	nop
 800397c:	08004550 	.word	0x08004550
 8003980:	ffff0001 	.word	0xffff0001

08003984 <_fwalk_reent>:
 8003984:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003988:	4606      	mov	r6, r0
 800398a:	4688      	mov	r8, r1
 800398c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003990:	2700      	movs	r7, #0
 8003992:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003996:	f1b9 0901 	subs.w	r9, r9, #1
 800399a:	d505      	bpl.n	80039a8 <_fwalk_reent+0x24>
 800399c:	6824      	ldr	r4, [r4, #0]
 800399e:	2c00      	cmp	r4, #0
 80039a0:	d1f7      	bne.n	8003992 <_fwalk_reent+0xe>
 80039a2:	4638      	mov	r0, r7
 80039a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80039a8:	89ab      	ldrh	r3, [r5, #12]
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d907      	bls.n	80039be <_fwalk_reent+0x3a>
 80039ae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80039b2:	3301      	adds	r3, #1
 80039b4:	d003      	beq.n	80039be <_fwalk_reent+0x3a>
 80039b6:	4629      	mov	r1, r5
 80039b8:	4630      	mov	r0, r6
 80039ba:	47c0      	blx	r8
 80039bc:	4307      	orrs	r7, r0
 80039be:	3568      	adds	r5, #104	; 0x68
 80039c0:	e7e9      	b.n	8003996 <_fwalk_reent+0x12>

080039c2 <__retarget_lock_init_recursive>:
 80039c2:	4770      	bx	lr

080039c4 <__retarget_lock_acquire_recursive>:
 80039c4:	4770      	bx	lr

080039c6 <__retarget_lock_release_recursive>:
 80039c6:	4770      	bx	lr

080039c8 <__swhatbuf_r>:
 80039c8:	b570      	push	{r4, r5, r6, lr}
 80039ca:	460e      	mov	r6, r1
 80039cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80039d0:	2900      	cmp	r1, #0
 80039d2:	b096      	sub	sp, #88	; 0x58
 80039d4:	4614      	mov	r4, r2
 80039d6:	461d      	mov	r5, r3
 80039d8:	da07      	bge.n	80039ea <__swhatbuf_r+0x22>
 80039da:	2300      	movs	r3, #0
 80039dc:	602b      	str	r3, [r5, #0]
 80039de:	89b3      	ldrh	r3, [r6, #12]
 80039e0:	061a      	lsls	r2, r3, #24
 80039e2:	d410      	bmi.n	8003a06 <__swhatbuf_r+0x3e>
 80039e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80039e8:	e00e      	b.n	8003a08 <__swhatbuf_r+0x40>
 80039ea:	466a      	mov	r2, sp
 80039ec:	f000 fd26 	bl	800443c <_fstat_r>
 80039f0:	2800      	cmp	r0, #0
 80039f2:	dbf2      	blt.n	80039da <__swhatbuf_r+0x12>
 80039f4:	9a01      	ldr	r2, [sp, #4]
 80039f6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80039fa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80039fe:	425a      	negs	r2, r3
 8003a00:	415a      	adcs	r2, r3
 8003a02:	602a      	str	r2, [r5, #0]
 8003a04:	e7ee      	b.n	80039e4 <__swhatbuf_r+0x1c>
 8003a06:	2340      	movs	r3, #64	; 0x40
 8003a08:	2000      	movs	r0, #0
 8003a0a:	6023      	str	r3, [r4, #0]
 8003a0c:	b016      	add	sp, #88	; 0x58
 8003a0e:	bd70      	pop	{r4, r5, r6, pc}

08003a10 <__smakebuf_r>:
 8003a10:	898b      	ldrh	r3, [r1, #12]
 8003a12:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003a14:	079d      	lsls	r5, r3, #30
 8003a16:	4606      	mov	r6, r0
 8003a18:	460c      	mov	r4, r1
 8003a1a:	d507      	bpl.n	8003a2c <__smakebuf_r+0x1c>
 8003a1c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003a20:	6023      	str	r3, [r4, #0]
 8003a22:	6123      	str	r3, [r4, #16]
 8003a24:	2301      	movs	r3, #1
 8003a26:	6163      	str	r3, [r4, #20]
 8003a28:	b002      	add	sp, #8
 8003a2a:	bd70      	pop	{r4, r5, r6, pc}
 8003a2c:	ab01      	add	r3, sp, #4
 8003a2e:	466a      	mov	r2, sp
 8003a30:	f7ff ffca 	bl	80039c8 <__swhatbuf_r>
 8003a34:	9900      	ldr	r1, [sp, #0]
 8003a36:	4605      	mov	r5, r0
 8003a38:	4630      	mov	r0, r6
 8003a3a:	f000 f881 	bl	8003b40 <_malloc_r>
 8003a3e:	b948      	cbnz	r0, 8003a54 <__smakebuf_r+0x44>
 8003a40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a44:	059a      	lsls	r2, r3, #22
 8003a46:	d4ef      	bmi.n	8003a28 <__smakebuf_r+0x18>
 8003a48:	f023 0303 	bic.w	r3, r3, #3
 8003a4c:	f043 0302 	orr.w	r3, r3, #2
 8003a50:	81a3      	strh	r3, [r4, #12]
 8003a52:	e7e3      	b.n	8003a1c <__smakebuf_r+0xc>
 8003a54:	4b0d      	ldr	r3, [pc, #52]	; (8003a8c <__smakebuf_r+0x7c>)
 8003a56:	62b3      	str	r3, [r6, #40]	; 0x28
 8003a58:	89a3      	ldrh	r3, [r4, #12]
 8003a5a:	6020      	str	r0, [r4, #0]
 8003a5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a60:	81a3      	strh	r3, [r4, #12]
 8003a62:	9b00      	ldr	r3, [sp, #0]
 8003a64:	6163      	str	r3, [r4, #20]
 8003a66:	9b01      	ldr	r3, [sp, #4]
 8003a68:	6120      	str	r0, [r4, #16]
 8003a6a:	b15b      	cbz	r3, 8003a84 <__smakebuf_r+0x74>
 8003a6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003a70:	4630      	mov	r0, r6
 8003a72:	f000 fcf5 	bl	8004460 <_isatty_r>
 8003a76:	b128      	cbz	r0, 8003a84 <__smakebuf_r+0x74>
 8003a78:	89a3      	ldrh	r3, [r4, #12]
 8003a7a:	f023 0303 	bic.w	r3, r3, #3
 8003a7e:	f043 0301 	orr.w	r3, r3, #1
 8003a82:	81a3      	strh	r3, [r4, #12]
 8003a84:	89a0      	ldrh	r0, [r4, #12]
 8003a86:	4305      	orrs	r5, r0
 8003a88:	81a5      	strh	r5, [r4, #12]
 8003a8a:	e7cd      	b.n	8003a28 <__smakebuf_r+0x18>
 8003a8c:	08003821 	.word	0x08003821

08003a90 <malloc>:
 8003a90:	4b02      	ldr	r3, [pc, #8]	; (8003a9c <malloc+0xc>)
 8003a92:	4601      	mov	r1, r0
 8003a94:	6818      	ldr	r0, [r3, #0]
 8003a96:	f000 b853 	b.w	8003b40 <_malloc_r>
 8003a9a:	bf00      	nop
 8003a9c:	2000000c 	.word	0x2000000c

08003aa0 <_free_r>:
 8003aa0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003aa2:	2900      	cmp	r1, #0
 8003aa4:	d048      	beq.n	8003b38 <_free_r+0x98>
 8003aa6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003aaa:	9001      	str	r0, [sp, #4]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	f1a1 0404 	sub.w	r4, r1, #4
 8003ab2:	bfb8      	it	lt
 8003ab4:	18e4      	addlt	r4, r4, r3
 8003ab6:	f000 fcf5 	bl	80044a4 <__malloc_lock>
 8003aba:	4a20      	ldr	r2, [pc, #128]	; (8003b3c <_free_r+0x9c>)
 8003abc:	9801      	ldr	r0, [sp, #4]
 8003abe:	6813      	ldr	r3, [r2, #0]
 8003ac0:	4615      	mov	r5, r2
 8003ac2:	b933      	cbnz	r3, 8003ad2 <_free_r+0x32>
 8003ac4:	6063      	str	r3, [r4, #4]
 8003ac6:	6014      	str	r4, [r2, #0]
 8003ac8:	b003      	add	sp, #12
 8003aca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003ace:	f000 bcef 	b.w	80044b0 <__malloc_unlock>
 8003ad2:	42a3      	cmp	r3, r4
 8003ad4:	d90b      	bls.n	8003aee <_free_r+0x4e>
 8003ad6:	6821      	ldr	r1, [r4, #0]
 8003ad8:	1862      	adds	r2, r4, r1
 8003ada:	4293      	cmp	r3, r2
 8003adc:	bf04      	itt	eq
 8003ade:	681a      	ldreq	r2, [r3, #0]
 8003ae0:	685b      	ldreq	r3, [r3, #4]
 8003ae2:	6063      	str	r3, [r4, #4]
 8003ae4:	bf04      	itt	eq
 8003ae6:	1852      	addeq	r2, r2, r1
 8003ae8:	6022      	streq	r2, [r4, #0]
 8003aea:	602c      	str	r4, [r5, #0]
 8003aec:	e7ec      	b.n	8003ac8 <_free_r+0x28>
 8003aee:	461a      	mov	r2, r3
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	b10b      	cbz	r3, 8003af8 <_free_r+0x58>
 8003af4:	42a3      	cmp	r3, r4
 8003af6:	d9fa      	bls.n	8003aee <_free_r+0x4e>
 8003af8:	6811      	ldr	r1, [r2, #0]
 8003afa:	1855      	adds	r5, r2, r1
 8003afc:	42a5      	cmp	r5, r4
 8003afe:	d10b      	bne.n	8003b18 <_free_r+0x78>
 8003b00:	6824      	ldr	r4, [r4, #0]
 8003b02:	4421      	add	r1, r4
 8003b04:	1854      	adds	r4, r2, r1
 8003b06:	42a3      	cmp	r3, r4
 8003b08:	6011      	str	r1, [r2, #0]
 8003b0a:	d1dd      	bne.n	8003ac8 <_free_r+0x28>
 8003b0c:	681c      	ldr	r4, [r3, #0]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	6053      	str	r3, [r2, #4]
 8003b12:	4421      	add	r1, r4
 8003b14:	6011      	str	r1, [r2, #0]
 8003b16:	e7d7      	b.n	8003ac8 <_free_r+0x28>
 8003b18:	d902      	bls.n	8003b20 <_free_r+0x80>
 8003b1a:	230c      	movs	r3, #12
 8003b1c:	6003      	str	r3, [r0, #0]
 8003b1e:	e7d3      	b.n	8003ac8 <_free_r+0x28>
 8003b20:	6825      	ldr	r5, [r4, #0]
 8003b22:	1961      	adds	r1, r4, r5
 8003b24:	428b      	cmp	r3, r1
 8003b26:	bf04      	itt	eq
 8003b28:	6819      	ldreq	r1, [r3, #0]
 8003b2a:	685b      	ldreq	r3, [r3, #4]
 8003b2c:	6063      	str	r3, [r4, #4]
 8003b2e:	bf04      	itt	eq
 8003b30:	1949      	addeq	r1, r1, r5
 8003b32:	6021      	streq	r1, [r4, #0]
 8003b34:	6054      	str	r4, [r2, #4]
 8003b36:	e7c7      	b.n	8003ac8 <_free_r+0x28>
 8003b38:	b003      	add	sp, #12
 8003b3a:	bd30      	pop	{r4, r5, pc}
 8003b3c:	200000a0 	.word	0x200000a0

08003b40 <_malloc_r>:
 8003b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b42:	1ccd      	adds	r5, r1, #3
 8003b44:	f025 0503 	bic.w	r5, r5, #3
 8003b48:	3508      	adds	r5, #8
 8003b4a:	2d0c      	cmp	r5, #12
 8003b4c:	bf38      	it	cc
 8003b4e:	250c      	movcc	r5, #12
 8003b50:	2d00      	cmp	r5, #0
 8003b52:	4606      	mov	r6, r0
 8003b54:	db01      	blt.n	8003b5a <_malloc_r+0x1a>
 8003b56:	42a9      	cmp	r1, r5
 8003b58:	d903      	bls.n	8003b62 <_malloc_r+0x22>
 8003b5a:	230c      	movs	r3, #12
 8003b5c:	6033      	str	r3, [r6, #0]
 8003b5e:	2000      	movs	r0, #0
 8003b60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b62:	f000 fc9f 	bl	80044a4 <__malloc_lock>
 8003b66:	4921      	ldr	r1, [pc, #132]	; (8003bec <_malloc_r+0xac>)
 8003b68:	680a      	ldr	r2, [r1, #0]
 8003b6a:	4614      	mov	r4, r2
 8003b6c:	b99c      	cbnz	r4, 8003b96 <_malloc_r+0x56>
 8003b6e:	4f20      	ldr	r7, [pc, #128]	; (8003bf0 <_malloc_r+0xb0>)
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	b923      	cbnz	r3, 8003b7e <_malloc_r+0x3e>
 8003b74:	4621      	mov	r1, r4
 8003b76:	4630      	mov	r0, r6
 8003b78:	f000 fb2a 	bl	80041d0 <_sbrk_r>
 8003b7c:	6038      	str	r0, [r7, #0]
 8003b7e:	4629      	mov	r1, r5
 8003b80:	4630      	mov	r0, r6
 8003b82:	f000 fb25 	bl	80041d0 <_sbrk_r>
 8003b86:	1c43      	adds	r3, r0, #1
 8003b88:	d123      	bne.n	8003bd2 <_malloc_r+0x92>
 8003b8a:	230c      	movs	r3, #12
 8003b8c:	6033      	str	r3, [r6, #0]
 8003b8e:	4630      	mov	r0, r6
 8003b90:	f000 fc8e 	bl	80044b0 <__malloc_unlock>
 8003b94:	e7e3      	b.n	8003b5e <_malloc_r+0x1e>
 8003b96:	6823      	ldr	r3, [r4, #0]
 8003b98:	1b5b      	subs	r3, r3, r5
 8003b9a:	d417      	bmi.n	8003bcc <_malloc_r+0x8c>
 8003b9c:	2b0b      	cmp	r3, #11
 8003b9e:	d903      	bls.n	8003ba8 <_malloc_r+0x68>
 8003ba0:	6023      	str	r3, [r4, #0]
 8003ba2:	441c      	add	r4, r3
 8003ba4:	6025      	str	r5, [r4, #0]
 8003ba6:	e004      	b.n	8003bb2 <_malloc_r+0x72>
 8003ba8:	6863      	ldr	r3, [r4, #4]
 8003baa:	42a2      	cmp	r2, r4
 8003bac:	bf0c      	ite	eq
 8003bae:	600b      	streq	r3, [r1, #0]
 8003bb0:	6053      	strne	r3, [r2, #4]
 8003bb2:	4630      	mov	r0, r6
 8003bb4:	f000 fc7c 	bl	80044b0 <__malloc_unlock>
 8003bb8:	f104 000b 	add.w	r0, r4, #11
 8003bbc:	1d23      	adds	r3, r4, #4
 8003bbe:	f020 0007 	bic.w	r0, r0, #7
 8003bc2:	1ac2      	subs	r2, r0, r3
 8003bc4:	d0cc      	beq.n	8003b60 <_malloc_r+0x20>
 8003bc6:	1a1b      	subs	r3, r3, r0
 8003bc8:	50a3      	str	r3, [r4, r2]
 8003bca:	e7c9      	b.n	8003b60 <_malloc_r+0x20>
 8003bcc:	4622      	mov	r2, r4
 8003bce:	6864      	ldr	r4, [r4, #4]
 8003bd0:	e7cc      	b.n	8003b6c <_malloc_r+0x2c>
 8003bd2:	1cc4      	adds	r4, r0, #3
 8003bd4:	f024 0403 	bic.w	r4, r4, #3
 8003bd8:	42a0      	cmp	r0, r4
 8003bda:	d0e3      	beq.n	8003ba4 <_malloc_r+0x64>
 8003bdc:	1a21      	subs	r1, r4, r0
 8003bde:	4630      	mov	r0, r6
 8003be0:	f000 faf6 	bl	80041d0 <_sbrk_r>
 8003be4:	3001      	adds	r0, #1
 8003be6:	d1dd      	bne.n	8003ba4 <_malloc_r+0x64>
 8003be8:	e7cf      	b.n	8003b8a <_malloc_r+0x4a>
 8003bea:	bf00      	nop
 8003bec:	200000a0 	.word	0x200000a0
 8003bf0:	200000a4 	.word	0x200000a4

08003bf4 <__sfputc_r>:
 8003bf4:	6893      	ldr	r3, [r2, #8]
 8003bf6:	3b01      	subs	r3, #1
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	b410      	push	{r4}
 8003bfc:	6093      	str	r3, [r2, #8]
 8003bfe:	da08      	bge.n	8003c12 <__sfputc_r+0x1e>
 8003c00:	6994      	ldr	r4, [r2, #24]
 8003c02:	42a3      	cmp	r3, r4
 8003c04:	db01      	blt.n	8003c0a <__sfputc_r+0x16>
 8003c06:	290a      	cmp	r1, #10
 8003c08:	d103      	bne.n	8003c12 <__sfputc_r+0x1e>
 8003c0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003c0e:	f000 bb33 	b.w	8004278 <__swbuf_r>
 8003c12:	6813      	ldr	r3, [r2, #0]
 8003c14:	1c58      	adds	r0, r3, #1
 8003c16:	6010      	str	r0, [r2, #0]
 8003c18:	7019      	strb	r1, [r3, #0]
 8003c1a:	4608      	mov	r0, r1
 8003c1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003c20:	4770      	bx	lr

08003c22 <__sfputs_r>:
 8003c22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c24:	4606      	mov	r6, r0
 8003c26:	460f      	mov	r7, r1
 8003c28:	4614      	mov	r4, r2
 8003c2a:	18d5      	adds	r5, r2, r3
 8003c2c:	42ac      	cmp	r4, r5
 8003c2e:	d101      	bne.n	8003c34 <__sfputs_r+0x12>
 8003c30:	2000      	movs	r0, #0
 8003c32:	e007      	b.n	8003c44 <__sfputs_r+0x22>
 8003c34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c38:	463a      	mov	r2, r7
 8003c3a:	4630      	mov	r0, r6
 8003c3c:	f7ff ffda 	bl	8003bf4 <__sfputc_r>
 8003c40:	1c43      	adds	r3, r0, #1
 8003c42:	d1f3      	bne.n	8003c2c <__sfputs_r+0xa>
 8003c44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003c48 <_vfiprintf_r>:
 8003c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c4c:	460d      	mov	r5, r1
 8003c4e:	b09d      	sub	sp, #116	; 0x74
 8003c50:	4614      	mov	r4, r2
 8003c52:	4698      	mov	r8, r3
 8003c54:	4606      	mov	r6, r0
 8003c56:	b118      	cbz	r0, 8003c60 <_vfiprintf_r+0x18>
 8003c58:	6983      	ldr	r3, [r0, #24]
 8003c5a:	b90b      	cbnz	r3, 8003c60 <_vfiprintf_r+0x18>
 8003c5c:	f7ff fe14 	bl	8003888 <__sinit>
 8003c60:	4b89      	ldr	r3, [pc, #548]	; (8003e88 <_vfiprintf_r+0x240>)
 8003c62:	429d      	cmp	r5, r3
 8003c64:	d11b      	bne.n	8003c9e <_vfiprintf_r+0x56>
 8003c66:	6875      	ldr	r5, [r6, #4]
 8003c68:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003c6a:	07d9      	lsls	r1, r3, #31
 8003c6c:	d405      	bmi.n	8003c7a <_vfiprintf_r+0x32>
 8003c6e:	89ab      	ldrh	r3, [r5, #12]
 8003c70:	059a      	lsls	r2, r3, #22
 8003c72:	d402      	bmi.n	8003c7a <_vfiprintf_r+0x32>
 8003c74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003c76:	f7ff fea5 	bl	80039c4 <__retarget_lock_acquire_recursive>
 8003c7a:	89ab      	ldrh	r3, [r5, #12]
 8003c7c:	071b      	lsls	r3, r3, #28
 8003c7e:	d501      	bpl.n	8003c84 <_vfiprintf_r+0x3c>
 8003c80:	692b      	ldr	r3, [r5, #16]
 8003c82:	b9eb      	cbnz	r3, 8003cc0 <_vfiprintf_r+0x78>
 8003c84:	4629      	mov	r1, r5
 8003c86:	4630      	mov	r0, r6
 8003c88:	f000 fb5a 	bl	8004340 <__swsetup_r>
 8003c8c:	b1c0      	cbz	r0, 8003cc0 <_vfiprintf_r+0x78>
 8003c8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003c90:	07dc      	lsls	r4, r3, #31
 8003c92:	d50e      	bpl.n	8003cb2 <_vfiprintf_r+0x6a>
 8003c94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003c98:	b01d      	add	sp, #116	; 0x74
 8003c9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c9e:	4b7b      	ldr	r3, [pc, #492]	; (8003e8c <_vfiprintf_r+0x244>)
 8003ca0:	429d      	cmp	r5, r3
 8003ca2:	d101      	bne.n	8003ca8 <_vfiprintf_r+0x60>
 8003ca4:	68b5      	ldr	r5, [r6, #8]
 8003ca6:	e7df      	b.n	8003c68 <_vfiprintf_r+0x20>
 8003ca8:	4b79      	ldr	r3, [pc, #484]	; (8003e90 <_vfiprintf_r+0x248>)
 8003caa:	429d      	cmp	r5, r3
 8003cac:	bf08      	it	eq
 8003cae:	68f5      	ldreq	r5, [r6, #12]
 8003cb0:	e7da      	b.n	8003c68 <_vfiprintf_r+0x20>
 8003cb2:	89ab      	ldrh	r3, [r5, #12]
 8003cb4:	0598      	lsls	r0, r3, #22
 8003cb6:	d4ed      	bmi.n	8003c94 <_vfiprintf_r+0x4c>
 8003cb8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003cba:	f7ff fe84 	bl	80039c6 <__retarget_lock_release_recursive>
 8003cbe:	e7e9      	b.n	8003c94 <_vfiprintf_r+0x4c>
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	9309      	str	r3, [sp, #36]	; 0x24
 8003cc4:	2320      	movs	r3, #32
 8003cc6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003cca:	f8cd 800c 	str.w	r8, [sp, #12]
 8003cce:	2330      	movs	r3, #48	; 0x30
 8003cd0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003e94 <_vfiprintf_r+0x24c>
 8003cd4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003cd8:	f04f 0901 	mov.w	r9, #1
 8003cdc:	4623      	mov	r3, r4
 8003cde:	469a      	mov	sl, r3
 8003ce0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003ce4:	b10a      	cbz	r2, 8003cea <_vfiprintf_r+0xa2>
 8003ce6:	2a25      	cmp	r2, #37	; 0x25
 8003ce8:	d1f9      	bne.n	8003cde <_vfiprintf_r+0x96>
 8003cea:	ebba 0b04 	subs.w	fp, sl, r4
 8003cee:	d00b      	beq.n	8003d08 <_vfiprintf_r+0xc0>
 8003cf0:	465b      	mov	r3, fp
 8003cf2:	4622      	mov	r2, r4
 8003cf4:	4629      	mov	r1, r5
 8003cf6:	4630      	mov	r0, r6
 8003cf8:	f7ff ff93 	bl	8003c22 <__sfputs_r>
 8003cfc:	3001      	adds	r0, #1
 8003cfe:	f000 80aa 	beq.w	8003e56 <_vfiprintf_r+0x20e>
 8003d02:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003d04:	445a      	add	r2, fp
 8003d06:	9209      	str	r2, [sp, #36]	; 0x24
 8003d08:	f89a 3000 	ldrb.w	r3, [sl]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	f000 80a2 	beq.w	8003e56 <_vfiprintf_r+0x20e>
 8003d12:	2300      	movs	r3, #0
 8003d14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003d18:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003d1c:	f10a 0a01 	add.w	sl, sl, #1
 8003d20:	9304      	str	r3, [sp, #16]
 8003d22:	9307      	str	r3, [sp, #28]
 8003d24:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003d28:	931a      	str	r3, [sp, #104]	; 0x68
 8003d2a:	4654      	mov	r4, sl
 8003d2c:	2205      	movs	r2, #5
 8003d2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d32:	4858      	ldr	r0, [pc, #352]	; (8003e94 <_vfiprintf_r+0x24c>)
 8003d34:	f7fc fa4c 	bl	80001d0 <memchr>
 8003d38:	9a04      	ldr	r2, [sp, #16]
 8003d3a:	b9d8      	cbnz	r0, 8003d74 <_vfiprintf_r+0x12c>
 8003d3c:	06d1      	lsls	r1, r2, #27
 8003d3e:	bf44      	itt	mi
 8003d40:	2320      	movmi	r3, #32
 8003d42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003d46:	0713      	lsls	r3, r2, #28
 8003d48:	bf44      	itt	mi
 8003d4a:	232b      	movmi	r3, #43	; 0x2b
 8003d4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003d50:	f89a 3000 	ldrb.w	r3, [sl]
 8003d54:	2b2a      	cmp	r3, #42	; 0x2a
 8003d56:	d015      	beq.n	8003d84 <_vfiprintf_r+0x13c>
 8003d58:	9a07      	ldr	r2, [sp, #28]
 8003d5a:	4654      	mov	r4, sl
 8003d5c:	2000      	movs	r0, #0
 8003d5e:	f04f 0c0a 	mov.w	ip, #10
 8003d62:	4621      	mov	r1, r4
 8003d64:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003d68:	3b30      	subs	r3, #48	; 0x30
 8003d6a:	2b09      	cmp	r3, #9
 8003d6c:	d94e      	bls.n	8003e0c <_vfiprintf_r+0x1c4>
 8003d6e:	b1b0      	cbz	r0, 8003d9e <_vfiprintf_r+0x156>
 8003d70:	9207      	str	r2, [sp, #28]
 8003d72:	e014      	b.n	8003d9e <_vfiprintf_r+0x156>
 8003d74:	eba0 0308 	sub.w	r3, r0, r8
 8003d78:	fa09 f303 	lsl.w	r3, r9, r3
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	9304      	str	r3, [sp, #16]
 8003d80:	46a2      	mov	sl, r4
 8003d82:	e7d2      	b.n	8003d2a <_vfiprintf_r+0xe2>
 8003d84:	9b03      	ldr	r3, [sp, #12]
 8003d86:	1d19      	adds	r1, r3, #4
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	9103      	str	r1, [sp, #12]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	bfbb      	ittet	lt
 8003d90:	425b      	neglt	r3, r3
 8003d92:	f042 0202 	orrlt.w	r2, r2, #2
 8003d96:	9307      	strge	r3, [sp, #28]
 8003d98:	9307      	strlt	r3, [sp, #28]
 8003d9a:	bfb8      	it	lt
 8003d9c:	9204      	strlt	r2, [sp, #16]
 8003d9e:	7823      	ldrb	r3, [r4, #0]
 8003da0:	2b2e      	cmp	r3, #46	; 0x2e
 8003da2:	d10c      	bne.n	8003dbe <_vfiprintf_r+0x176>
 8003da4:	7863      	ldrb	r3, [r4, #1]
 8003da6:	2b2a      	cmp	r3, #42	; 0x2a
 8003da8:	d135      	bne.n	8003e16 <_vfiprintf_r+0x1ce>
 8003daa:	9b03      	ldr	r3, [sp, #12]
 8003dac:	1d1a      	adds	r2, r3, #4
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	9203      	str	r2, [sp, #12]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	bfb8      	it	lt
 8003db6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003dba:	3402      	adds	r4, #2
 8003dbc:	9305      	str	r3, [sp, #20]
 8003dbe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003ea4 <_vfiprintf_r+0x25c>
 8003dc2:	7821      	ldrb	r1, [r4, #0]
 8003dc4:	2203      	movs	r2, #3
 8003dc6:	4650      	mov	r0, sl
 8003dc8:	f7fc fa02 	bl	80001d0 <memchr>
 8003dcc:	b140      	cbz	r0, 8003de0 <_vfiprintf_r+0x198>
 8003dce:	2340      	movs	r3, #64	; 0x40
 8003dd0:	eba0 000a 	sub.w	r0, r0, sl
 8003dd4:	fa03 f000 	lsl.w	r0, r3, r0
 8003dd8:	9b04      	ldr	r3, [sp, #16]
 8003dda:	4303      	orrs	r3, r0
 8003ddc:	3401      	adds	r4, #1
 8003dde:	9304      	str	r3, [sp, #16]
 8003de0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003de4:	482c      	ldr	r0, [pc, #176]	; (8003e98 <_vfiprintf_r+0x250>)
 8003de6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003dea:	2206      	movs	r2, #6
 8003dec:	f7fc f9f0 	bl	80001d0 <memchr>
 8003df0:	2800      	cmp	r0, #0
 8003df2:	d03f      	beq.n	8003e74 <_vfiprintf_r+0x22c>
 8003df4:	4b29      	ldr	r3, [pc, #164]	; (8003e9c <_vfiprintf_r+0x254>)
 8003df6:	bb1b      	cbnz	r3, 8003e40 <_vfiprintf_r+0x1f8>
 8003df8:	9b03      	ldr	r3, [sp, #12]
 8003dfa:	3307      	adds	r3, #7
 8003dfc:	f023 0307 	bic.w	r3, r3, #7
 8003e00:	3308      	adds	r3, #8
 8003e02:	9303      	str	r3, [sp, #12]
 8003e04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e06:	443b      	add	r3, r7
 8003e08:	9309      	str	r3, [sp, #36]	; 0x24
 8003e0a:	e767      	b.n	8003cdc <_vfiprintf_r+0x94>
 8003e0c:	fb0c 3202 	mla	r2, ip, r2, r3
 8003e10:	460c      	mov	r4, r1
 8003e12:	2001      	movs	r0, #1
 8003e14:	e7a5      	b.n	8003d62 <_vfiprintf_r+0x11a>
 8003e16:	2300      	movs	r3, #0
 8003e18:	3401      	adds	r4, #1
 8003e1a:	9305      	str	r3, [sp, #20]
 8003e1c:	4619      	mov	r1, r3
 8003e1e:	f04f 0c0a 	mov.w	ip, #10
 8003e22:	4620      	mov	r0, r4
 8003e24:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003e28:	3a30      	subs	r2, #48	; 0x30
 8003e2a:	2a09      	cmp	r2, #9
 8003e2c:	d903      	bls.n	8003e36 <_vfiprintf_r+0x1ee>
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d0c5      	beq.n	8003dbe <_vfiprintf_r+0x176>
 8003e32:	9105      	str	r1, [sp, #20]
 8003e34:	e7c3      	b.n	8003dbe <_vfiprintf_r+0x176>
 8003e36:	fb0c 2101 	mla	r1, ip, r1, r2
 8003e3a:	4604      	mov	r4, r0
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e7f0      	b.n	8003e22 <_vfiprintf_r+0x1da>
 8003e40:	ab03      	add	r3, sp, #12
 8003e42:	9300      	str	r3, [sp, #0]
 8003e44:	462a      	mov	r2, r5
 8003e46:	4b16      	ldr	r3, [pc, #88]	; (8003ea0 <_vfiprintf_r+0x258>)
 8003e48:	a904      	add	r1, sp, #16
 8003e4a:	4630      	mov	r0, r6
 8003e4c:	f3af 8000 	nop.w
 8003e50:	4607      	mov	r7, r0
 8003e52:	1c78      	adds	r0, r7, #1
 8003e54:	d1d6      	bne.n	8003e04 <_vfiprintf_r+0x1bc>
 8003e56:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003e58:	07d9      	lsls	r1, r3, #31
 8003e5a:	d405      	bmi.n	8003e68 <_vfiprintf_r+0x220>
 8003e5c:	89ab      	ldrh	r3, [r5, #12]
 8003e5e:	059a      	lsls	r2, r3, #22
 8003e60:	d402      	bmi.n	8003e68 <_vfiprintf_r+0x220>
 8003e62:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003e64:	f7ff fdaf 	bl	80039c6 <__retarget_lock_release_recursive>
 8003e68:	89ab      	ldrh	r3, [r5, #12]
 8003e6a:	065b      	lsls	r3, r3, #25
 8003e6c:	f53f af12 	bmi.w	8003c94 <_vfiprintf_r+0x4c>
 8003e70:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003e72:	e711      	b.n	8003c98 <_vfiprintf_r+0x50>
 8003e74:	ab03      	add	r3, sp, #12
 8003e76:	9300      	str	r3, [sp, #0]
 8003e78:	462a      	mov	r2, r5
 8003e7a:	4b09      	ldr	r3, [pc, #36]	; (8003ea0 <_vfiprintf_r+0x258>)
 8003e7c:	a904      	add	r1, sp, #16
 8003e7e:	4630      	mov	r0, r6
 8003e80:	f000 f880 	bl	8003f84 <_printf_i>
 8003e84:	e7e4      	b.n	8003e50 <_vfiprintf_r+0x208>
 8003e86:	bf00      	nop
 8003e88:	08004574 	.word	0x08004574
 8003e8c:	08004594 	.word	0x08004594
 8003e90:	08004554 	.word	0x08004554
 8003e94:	080045b4 	.word	0x080045b4
 8003e98:	080045be 	.word	0x080045be
 8003e9c:	00000000 	.word	0x00000000
 8003ea0:	08003c23 	.word	0x08003c23
 8003ea4:	080045ba 	.word	0x080045ba

08003ea8 <_printf_common>:
 8003ea8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003eac:	4616      	mov	r6, r2
 8003eae:	4699      	mov	r9, r3
 8003eb0:	688a      	ldr	r2, [r1, #8]
 8003eb2:	690b      	ldr	r3, [r1, #16]
 8003eb4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	bfb8      	it	lt
 8003ebc:	4613      	movlt	r3, r2
 8003ebe:	6033      	str	r3, [r6, #0]
 8003ec0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003ec4:	4607      	mov	r7, r0
 8003ec6:	460c      	mov	r4, r1
 8003ec8:	b10a      	cbz	r2, 8003ece <_printf_common+0x26>
 8003eca:	3301      	adds	r3, #1
 8003ecc:	6033      	str	r3, [r6, #0]
 8003ece:	6823      	ldr	r3, [r4, #0]
 8003ed0:	0699      	lsls	r1, r3, #26
 8003ed2:	bf42      	ittt	mi
 8003ed4:	6833      	ldrmi	r3, [r6, #0]
 8003ed6:	3302      	addmi	r3, #2
 8003ed8:	6033      	strmi	r3, [r6, #0]
 8003eda:	6825      	ldr	r5, [r4, #0]
 8003edc:	f015 0506 	ands.w	r5, r5, #6
 8003ee0:	d106      	bne.n	8003ef0 <_printf_common+0x48>
 8003ee2:	f104 0a19 	add.w	sl, r4, #25
 8003ee6:	68e3      	ldr	r3, [r4, #12]
 8003ee8:	6832      	ldr	r2, [r6, #0]
 8003eea:	1a9b      	subs	r3, r3, r2
 8003eec:	42ab      	cmp	r3, r5
 8003eee:	dc26      	bgt.n	8003f3e <_printf_common+0x96>
 8003ef0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003ef4:	1e13      	subs	r3, r2, #0
 8003ef6:	6822      	ldr	r2, [r4, #0]
 8003ef8:	bf18      	it	ne
 8003efa:	2301      	movne	r3, #1
 8003efc:	0692      	lsls	r2, r2, #26
 8003efe:	d42b      	bmi.n	8003f58 <_printf_common+0xb0>
 8003f00:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003f04:	4649      	mov	r1, r9
 8003f06:	4638      	mov	r0, r7
 8003f08:	47c0      	blx	r8
 8003f0a:	3001      	adds	r0, #1
 8003f0c:	d01e      	beq.n	8003f4c <_printf_common+0xa4>
 8003f0e:	6823      	ldr	r3, [r4, #0]
 8003f10:	68e5      	ldr	r5, [r4, #12]
 8003f12:	6832      	ldr	r2, [r6, #0]
 8003f14:	f003 0306 	and.w	r3, r3, #6
 8003f18:	2b04      	cmp	r3, #4
 8003f1a:	bf08      	it	eq
 8003f1c:	1aad      	subeq	r5, r5, r2
 8003f1e:	68a3      	ldr	r3, [r4, #8]
 8003f20:	6922      	ldr	r2, [r4, #16]
 8003f22:	bf0c      	ite	eq
 8003f24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003f28:	2500      	movne	r5, #0
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	bfc4      	itt	gt
 8003f2e:	1a9b      	subgt	r3, r3, r2
 8003f30:	18ed      	addgt	r5, r5, r3
 8003f32:	2600      	movs	r6, #0
 8003f34:	341a      	adds	r4, #26
 8003f36:	42b5      	cmp	r5, r6
 8003f38:	d11a      	bne.n	8003f70 <_printf_common+0xc8>
 8003f3a:	2000      	movs	r0, #0
 8003f3c:	e008      	b.n	8003f50 <_printf_common+0xa8>
 8003f3e:	2301      	movs	r3, #1
 8003f40:	4652      	mov	r2, sl
 8003f42:	4649      	mov	r1, r9
 8003f44:	4638      	mov	r0, r7
 8003f46:	47c0      	blx	r8
 8003f48:	3001      	adds	r0, #1
 8003f4a:	d103      	bne.n	8003f54 <_printf_common+0xac>
 8003f4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003f50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f54:	3501      	adds	r5, #1
 8003f56:	e7c6      	b.n	8003ee6 <_printf_common+0x3e>
 8003f58:	18e1      	adds	r1, r4, r3
 8003f5a:	1c5a      	adds	r2, r3, #1
 8003f5c:	2030      	movs	r0, #48	; 0x30
 8003f5e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003f62:	4422      	add	r2, r4
 8003f64:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003f68:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003f6c:	3302      	adds	r3, #2
 8003f6e:	e7c7      	b.n	8003f00 <_printf_common+0x58>
 8003f70:	2301      	movs	r3, #1
 8003f72:	4622      	mov	r2, r4
 8003f74:	4649      	mov	r1, r9
 8003f76:	4638      	mov	r0, r7
 8003f78:	47c0      	blx	r8
 8003f7a:	3001      	adds	r0, #1
 8003f7c:	d0e6      	beq.n	8003f4c <_printf_common+0xa4>
 8003f7e:	3601      	adds	r6, #1
 8003f80:	e7d9      	b.n	8003f36 <_printf_common+0x8e>
	...

08003f84 <_printf_i>:
 8003f84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003f88:	460c      	mov	r4, r1
 8003f8a:	4691      	mov	r9, r2
 8003f8c:	7e27      	ldrb	r7, [r4, #24]
 8003f8e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003f90:	2f78      	cmp	r7, #120	; 0x78
 8003f92:	4680      	mov	r8, r0
 8003f94:	469a      	mov	sl, r3
 8003f96:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003f9a:	d807      	bhi.n	8003fac <_printf_i+0x28>
 8003f9c:	2f62      	cmp	r7, #98	; 0x62
 8003f9e:	d80a      	bhi.n	8003fb6 <_printf_i+0x32>
 8003fa0:	2f00      	cmp	r7, #0
 8003fa2:	f000 80d8 	beq.w	8004156 <_printf_i+0x1d2>
 8003fa6:	2f58      	cmp	r7, #88	; 0x58
 8003fa8:	f000 80a3 	beq.w	80040f2 <_printf_i+0x16e>
 8003fac:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003fb0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003fb4:	e03a      	b.n	800402c <_printf_i+0xa8>
 8003fb6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003fba:	2b15      	cmp	r3, #21
 8003fbc:	d8f6      	bhi.n	8003fac <_printf_i+0x28>
 8003fbe:	a001      	add	r0, pc, #4	; (adr r0, 8003fc4 <_printf_i+0x40>)
 8003fc0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003fc4:	0800401d 	.word	0x0800401d
 8003fc8:	08004031 	.word	0x08004031
 8003fcc:	08003fad 	.word	0x08003fad
 8003fd0:	08003fad 	.word	0x08003fad
 8003fd4:	08003fad 	.word	0x08003fad
 8003fd8:	08003fad 	.word	0x08003fad
 8003fdc:	08004031 	.word	0x08004031
 8003fe0:	08003fad 	.word	0x08003fad
 8003fe4:	08003fad 	.word	0x08003fad
 8003fe8:	08003fad 	.word	0x08003fad
 8003fec:	08003fad 	.word	0x08003fad
 8003ff0:	0800413d 	.word	0x0800413d
 8003ff4:	08004061 	.word	0x08004061
 8003ff8:	0800411f 	.word	0x0800411f
 8003ffc:	08003fad 	.word	0x08003fad
 8004000:	08003fad 	.word	0x08003fad
 8004004:	0800415f 	.word	0x0800415f
 8004008:	08003fad 	.word	0x08003fad
 800400c:	08004061 	.word	0x08004061
 8004010:	08003fad 	.word	0x08003fad
 8004014:	08003fad 	.word	0x08003fad
 8004018:	08004127 	.word	0x08004127
 800401c:	680b      	ldr	r3, [r1, #0]
 800401e:	1d1a      	adds	r2, r3, #4
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	600a      	str	r2, [r1, #0]
 8004024:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004028:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800402c:	2301      	movs	r3, #1
 800402e:	e0a3      	b.n	8004178 <_printf_i+0x1f4>
 8004030:	6825      	ldr	r5, [r4, #0]
 8004032:	6808      	ldr	r0, [r1, #0]
 8004034:	062e      	lsls	r6, r5, #24
 8004036:	f100 0304 	add.w	r3, r0, #4
 800403a:	d50a      	bpl.n	8004052 <_printf_i+0xce>
 800403c:	6805      	ldr	r5, [r0, #0]
 800403e:	600b      	str	r3, [r1, #0]
 8004040:	2d00      	cmp	r5, #0
 8004042:	da03      	bge.n	800404c <_printf_i+0xc8>
 8004044:	232d      	movs	r3, #45	; 0x2d
 8004046:	426d      	negs	r5, r5
 8004048:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800404c:	485e      	ldr	r0, [pc, #376]	; (80041c8 <_printf_i+0x244>)
 800404e:	230a      	movs	r3, #10
 8004050:	e019      	b.n	8004086 <_printf_i+0x102>
 8004052:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004056:	6805      	ldr	r5, [r0, #0]
 8004058:	600b      	str	r3, [r1, #0]
 800405a:	bf18      	it	ne
 800405c:	b22d      	sxthne	r5, r5
 800405e:	e7ef      	b.n	8004040 <_printf_i+0xbc>
 8004060:	680b      	ldr	r3, [r1, #0]
 8004062:	6825      	ldr	r5, [r4, #0]
 8004064:	1d18      	adds	r0, r3, #4
 8004066:	6008      	str	r0, [r1, #0]
 8004068:	0628      	lsls	r0, r5, #24
 800406a:	d501      	bpl.n	8004070 <_printf_i+0xec>
 800406c:	681d      	ldr	r5, [r3, #0]
 800406e:	e002      	b.n	8004076 <_printf_i+0xf2>
 8004070:	0669      	lsls	r1, r5, #25
 8004072:	d5fb      	bpl.n	800406c <_printf_i+0xe8>
 8004074:	881d      	ldrh	r5, [r3, #0]
 8004076:	4854      	ldr	r0, [pc, #336]	; (80041c8 <_printf_i+0x244>)
 8004078:	2f6f      	cmp	r7, #111	; 0x6f
 800407a:	bf0c      	ite	eq
 800407c:	2308      	moveq	r3, #8
 800407e:	230a      	movne	r3, #10
 8004080:	2100      	movs	r1, #0
 8004082:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004086:	6866      	ldr	r6, [r4, #4]
 8004088:	60a6      	str	r6, [r4, #8]
 800408a:	2e00      	cmp	r6, #0
 800408c:	bfa2      	ittt	ge
 800408e:	6821      	ldrge	r1, [r4, #0]
 8004090:	f021 0104 	bicge.w	r1, r1, #4
 8004094:	6021      	strge	r1, [r4, #0]
 8004096:	b90d      	cbnz	r5, 800409c <_printf_i+0x118>
 8004098:	2e00      	cmp	r6, #0
 800409a:	d04d      	beq.n	8004138 <_printf_i+0x1b4>
 800409c:	4616      	mov	r6, r2
 800409e:	fbb5 f1f3 	udiv	r1, r5, r3
 80040a2:	fb03 5711 	mls	r7, r3, r1, r5
 80040a6:	5dc7      	ldrb	r7, [r0, r7]
 80040a8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80040ac:	462f      	mov	r7, r5
 80040ae:	42bb      	cmp	r3, r7
 80040b0:	460d      	mov	r5, r1
 80040b2:	d9f4      	bls.n	800409e <_printf_i+0x11a>
 80040b4:	2b08      	cmp	r3, #8
 80040b6:	d10b      	bne.n	80040d0 <_printf_i+0x14c>
 80040b8:	6823      	ldr	r3, [r4, #0]
 80040ba:	07df      	lsls	r7, r3, #31
 80040bc:	d508      	bpl.n	80040d0 <_printf_i+0x14c>
 80040be:	6923      	ldr	r3, [r4, #16]
 80040c0:	6861      	ldr	r1, [r4, #4]
 80040c2:	4299      	cmp	r1, r3
 80040c4:	bfde      	ittt	le
 80040c6:	2330      	movle	r3, #48	; 0x30
 80040c8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80040cc:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80040d0:	1b92      	subs	r2, r2, r6
 80040d2:	6122      	str	r2, [r4, #16]
 80040d4:	f8cd a000 	str.w	sl, [sp]
 80040d8:	464b      	mov	r3, r9
 80040da:	aa03      	add	r2, sp, #12
 80040dc:	4621      	mov	r1, r4
 80040de:	4640      	mov	r0, r8
 80040e0:	f7ff fee2 	bl	8003ea8 <_printf_common>
 80040e4:	3001      	adds	r0, #1
 80040e6:	d14c      	bne.n	8004182 <_printf_i+0x1fe>
 80040e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80040ec:	b004      	add	sp, #16
 80040ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040f2:	4835      	ldr	r0, [pc, #212]	; (80041c8 <_printf_i+0x244>)
 80040f4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80040f8:	6823      	ldr	r3, [r4, #0]
 80040fa:	680e      	ldr	r6, [r1, #0]
 80040fc:	061f      	lsls	r7, r3, #24
 80040fe:	f856 5b04 	ldr.w	r5, [r6], #4
 8004102:	600e      	str	r6, [r1, #0]
 8004104:	d514      	bpl.n	8004130 <_printf_i+0x1ac>
 8004106:	07d9      	lsls	r1, r3, #31
 8004108:	bf44      	itt	mi
 800410a:	f043 0320 	orrmi.w	r3, r3, #32
 800410e:	6023      	strmi	r3, [r4, #0]
 8004110:	b91d      	cbnz	r5, 800411a <_printf_i+0x196>
 8004112:	6823      	ldr	r3, [r4, #0]
 8004114:	f023 0320 	bic.w	r3, r3, #32
 8004118:	6023      	str	r3, [r4, #0]
 800411a:	2310      	movs	r3, #16
 800411c:	e7b0      	b.n	8004080 <_printf_i+0xfc>
 800411e:	6823      	ldr	r3, [r4, #0]
 8004120:	f043 0320 	orr.w	r3, r3, #32
 8004124:	6023      	str	r3, [r4, #0]
 8004126:	2378      	movs	r3, #120	; 0x78
 8004128:	4828      	ldr	r0, [pc, #160]	; (80041cc <_printf_i+0x248>)
 800412a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800412e:	e7e3      	b.n	80040f8 <_printf_i+0x174>
 8004130:	065e      	lsls	r6, r3, #25
 8004132:	bf48      	it	mi
 8004134:	b2ad      	uxthmi	r5, r5
 8004136:	e7e6      	b.n	8004106 <_printf_i+0x182>
 8004138:	4616      	mov	r6, r2
 800413a:	e7bb      	b.n	80040b4 <_printf_i+0x130>
 800413c:	680b      	ldr	r3, [r1, #0]
 800413e:	6826      	ldr	r6, [r4, #0]
 8004140:	6960      	ldr	r0, [r4, #20]
 8004142:	1d1d      	adds	r5, r3, #4
 8004144:	600d      	str	r5, [r1, #0]
 8004146:	0635      	lsls	r5, r6, #24
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	d501      	bpl.n	8004150 <_printf_i+0x1cc>
 800414c:	6018      	str	r0, [r3, #0]
 800414e:	e002      	b.n	8004156 <_printf_i+0x1d2>
 8004150:	0671      	lsls	r1, r6, #25
 8004152:	d5fb      	bpl.n	800414c <_printf_i+0x1c8>
 8004154:	8018      	strh	r0, [r3, #0]
 8004156:	2300      	movs	r3, #0
 8004158:	6123      	str	r3, [r4, #16]
 800415a:	4616      	mov	r6, r2
 800415c:	e7ba      	b.n	80040d4 <_printf_i+0x150>
 800415e:	680b      	ldr	r3, [r1, #0]
 8004160:	1d1a      	adds	r2, r3, #4
 8004162:	600a      	str	r2, [r1, #0]
 8004164:	681e      	ldr	r6, [r3, #0]
 8004166:	6862      	ldr	r2, [r4, #4]
 8004168:	2100      	movs	r1, #0
 800416a:	4630      	mov	r0, r6
 800416c:	f7fc f830 	bl	80001d0 <memchr>
 8004170:	b108      	cbz	r0, 8004176 <_printf_i+0x1f2>
 8004172:	1b80      	subs	r0, r0, r6
 8004174:	6060      	str	r0, [r4, #4]
 8004176:	6863      	ldr	r3, [r4, #4]
 8004178:	6123      	str	r3, [r4, #16]
 800417a:	2300      	movs	r3, #0
 800417c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004180:	e7a8      	b.n	80040d4 <_printf_i+0x150>
 8004182:	6923      	ldr	r3, [r4, #16]
 8004184:	4632      	mov	r2, r6
 8004186:	4649      	mov	r1, r9
 8004188:	4640      	mov	r0, r8
 800418a:	47d0      	blx	sl
 800418c:	3001      	adds	r0, #1
 800418e:	d0ab      	beq.n	80040e8 <_printf_i+0x164>
 8004190:	6823      	ldr	r3, [r4, #0]
 8004192:	079b      	lsls	r3, r3, #30
 8004194:	d413      	bmi.n	80041be <_printf_i+0x23a>
 8004196:	68e0      	ldr	r0, [r4, #12]
 8004198:	9b03      	ldr	r3, [sp, #12]
 800419a:	4298      	cmp	r0, r3
 800419c:	bfb8      	it	lt
 800419e:	4618      	movlt	r0, r3
 80041a0:	e7a4      	b.n	80040ec <_printf_i+0x168>
 80041a2:	2301      	movs	r3, #1
 80041a4:	4632      	mov	r2, r6
 80041a6:	4649      	mov	r1, r9
 80041a8:	4640      	mov	r0, r8
 80041aa:	47d0      	blx	sl
 80041ac:	3001      	adds	r0, #1
 80041ae:	d09b      	beq.n	80040e8 <_printf_i+0x164>
 80041b0:	3501      	adds	r5, #1
 80041b2:	68e3      	ldr	r3, [r4, #12]
 80041b4:	9903      	ldr	r1, [sp, #12]
 80041b6:	1a5b      	subs	r3, r3, r1
 80041b8:	42ab      	cmp	r3, r5
 80041ba:	dcf2      	bgt.n	80041a2 <_printf_i+0x21e>
 80041bc:	e7eb      	b.n	8004196 <_printf_i+0x212>
 80041be:	2500      	movs	r5, #0
 80041c0:	f104 0619 	add.w	r6, r4, #25
 80041c4:	e7f5      	b.n	80041b2 <_printf_i+0x22e>
 80041c6:	bf00      	nop
 80041c8:	080045c5 	.word	0x080045c5
 80041cc:	080045d6 	.word	0x080045d6

080041d0 <_sbrk_r>:
 80041d0:	b538      	push	{r3, r4, r5, lr}
 80041d2:	4d06      	ldr	r5, [pc, #24]	; (80041ec <_sbrk_r+0x1c>)
 80041d4:	2300      	movs	r3, #0
 80041d6:	4604      	mov	r4, r0
 80041d8:	4608      	mov	r0, r1
 80041da:	602b      	str	r3, [r5, #0]
 80041dc:	f7fc fcac 	bl	8000b38 <_sbrk>
 80041e0:	1c43      	adds	r3, r0, #1
 80041e2:	d102      	bne.n	80041ea <_sbrk_r+0x1a>
 80041e4:	682b      	ldr	r3, [r5, #0]
 80041e6:	b103      	cbz	r3, 80041ea <_sbrk_r+0x1a>
 80041e8:	6023      	str	r3, [r4, #0]
 80041ea:	bd38      	pop	{r3, r4, r5, pc}
 80041ec:	2000026c 	.word	0x2000026c

080041f0 <__sread>:
 80041f0:	b510      	push	{r4, lr}
 80041f2:	460c      	mov	r4, r1
 80041f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041f8:	f000 f960 	bl	80044bc <_read_r>
 80041fc:	2800      	cmp	r0, #0
 80041fe:	bfab      	itete	ge
 8004200:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004202:	89a3      	ldrhlt	r3, [r4, #12]
 8004204:	181b      	addge	r3, r3, r0
 8004206:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800420a:	bfac      	ite	ge
 800420c:	6563      	strge	r3, [r4, #84]	; 0x54
 800420e:	81a3      	strhlt	r3, [r4, #12]
 8004210:	bd10      	pop	{r4, pc}

08004212 <__swrite>:
 8004212:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004216:	461f      	mov	r7, r3
 8004218:	898b      	ldrh	r3, [r1, #12]
 800421a:	05db      	lsls	r3, r3, #23
 800421c:	4605      	mov	r5, r0
 800421e:	460c      	mov	r4, r1
 8004220:	4616      	mov	r6, r2
 8004222:	d505      	bpl.n	8004230 <__swrite+0x1e>
 8004224:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004228:	2302      	movs	r3, #2
 800422a:	2200      	movs	r2, #0
 800422c:	f000 f928 	bl	8004480 <_lseek_r>
 8004230:	89a3      	ldrh	r3, [r4, #12]
 8004232:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004236:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800423a:	81a3      	strh	r3, [r4, #12]
 800423c:	4632      	mov	r2, r6
 800423e:	463b      	mov	r3, r7
 8004240:	4628      	mov	r0, r5
 8004242:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004246:	f000 b869 	b.w	800431c <_write_r>

0800424a <__sseek>:
 800424a:	b510      	push	{r4, lr}
 800424c:	460c      	mov	r4, r1
 800424e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004252:	f000 f915 	bl	8004480 <_lseek_r>
 8004256:	1c43      	adds	r3, r0, #1
 8004258:	89a3      	ldrh	r3, [r4, #12]
 800425a:	bf15      	itete	ne
 800425c:	6560      	strne	r0, [r4, #84]	; 0x54
 800425e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004262:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004266:	81a3      	strheq	r3, [r4, #12]
 8004268:	bf18      	it	ne
 800426a:	81a3      	strhne	r3, [r4, #12]
 800426c:	bd10      	pop	{r4, pc}

0800426e <__sclose>:
 800426e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004272:	f000 b8d3 	b.w	800441c <_close_r>
	...

08004278 <__swbuf_r>:
 8004278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800427a:	460e      	mov	r6, r1
 800427c:	4614      	mov	r4, r2
 800427e:	4605      	mov	r5, r0
 8004280:	b118      	cbz	r0, 800428a <__swbuf_r+0x12>
 8004282:	6983      	ldr	r3, [r0, #24]
 8004284:	b90b      	cbnz	r3, 800428a <__swbuf_r+0x12>
 8004286:	f7ff faff 	bl	8003888 <__sinit>
 800428a:	4b21      	ldr	r3, [pc, #132]	; (8004310 <__swbuf_r+0x98>)
 800428c:	429c      	cmp	r4, r3
 800428e:	d12b      	bne.n	80042e8 <__swbuf_r+0x70>
 8004290:	686c      	ldr	r4, [r5, #4]
 8004292:	69a3      	ldr	r3, [r4, #24]
 8004294:	60a3      	str	r3, [r4, #8]
 8004296:	89a3      	ldrh	r3, [r4, #12]
 8004298:	071a      	lsls	r2, r3, #28
 800429a:	d52f      	bpl.n	80042fc <__swbuf_r+0x84>
 800429c:	6923      	ldr	r3, [r4, #16]
 800429e:	b36b      	cbz	r3, 80042fc <__swbuf_r+0x84>
 80042a0:	6923      	ldr	r3, [r4, #16]
 80042a2:	6820      	ldr	r0, [r4, #0]
 80042a4:	1ac0      	subs	r0, r0, r3
 80042a6:	6963      	ldr	r3, [r4, #20]
 80042a8:	b2f6      	uxtb	r6, r6
 80042aa:	4283      	cmp	r3, r0
 80042ac:	4637      	mov	r7, r6
 80042ae:	dc04      	bgt.n	80042ba <__swbuf_r+0x42>
 80042b0:	4621      	mov	r1, r4
 80042b2:	4628      	mov	r0, r5
 80042b4:	f7ff fa54 	bl	8003760 <_fflush_r>
 80042b8:	bb30      	cbnz	r0, 8004308 <__swbuf_r+0x90>
 80042ba:	68a3      	ldr	r3, [r4, #8]
 80042bc:	3b01      	subs	r3, #1
 80042be:	60a3      	str	r3, [r4, #8]
 80042c0:	6823      	ldr	r3, [r4, #0]
 80042c2:	1c5a      	adds	r2, r3, #1
 80042c4:	6022      	str	r2, [r4, #0]
 80042c6:	701e      	strb	r6, [r3, #0]
 80042c8:	6963      	ldr	r3, [r4, #20]
 80042ca:	3001      	adds	r0, #1
 80042cc:	4283      	cmp	r3, r0
 80042ce:	d004      	beq.n	80042da <__swbuf_r+0x62>
 80042d0:	89a3      	ldrh	r3, [r4, #12]
 80042d2:	07db      	lsls	r3, r3, #31
 80042d4:	d506      	bpl.n	80042e4 <__swbuf_r+0x6c>
 80042d6:	2e0a      	cmp	r6, #10
 80042d8:	d104      	bne.n	80042e4 <__swbuf_r+0x6c>
 80042da:	4621      	mov	r1, r4
 80042dc:	4628      	mov	r0, r5
 80042de:	f7ff fa3f 	bl	8003760 <_fflush_r>
 80042e2:	b988      	cbnz	r0, 8004308 <__swbuf_r+0x90>
 80042e4:	4638      	mov	r0, r7
 80042e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80042e8:	4b0a      	ldr	r3, [pc, #40]	; (8004314 <__swbuf_r+0x9c>)
 80042ea:	429c      	cmp	r4, r3
 80042ec:	d101      	bne.n	80042f2 <__swbuf_r+0x7a>
 80042ee:	68ac      	ldr	r4, [r5, #8]
 80042f0:	e7cf      	b.n	8004292 <__swbuf_r+0x1a>
 80042f2:	4b09      	ldr	r3, [pc, #36]	; (8004318 <__swbuf_r+0xa0>)
 80042f4:	429c      	cmp	r4, r3
 80042f6:	bf08      	it	eq
 80042f8:	68ec      	ldreq	r4, [r5, #12]
 80042fa:	e7ca      	b.n	8004292 <__swbuf_r+0x1a>
 80042fc:	4621      	mov	r1, r4
 80042fe:	4628      	mov	r0, r5
 8004300:	f000 f81e 	bl	8004340 <__swsetup_r>
 8004304:	2800      	cmp	r0, #0
 8004306:	d0cb      	beq.n	80042a0 <__swbuf_r+0x28>
 8004308:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800430c:	e7ea      	b.n	80042e4 <__swbuf_r+0x6c>
 800430e:	bf00      	nop
 8004310:	08004574 	.word	0x08004574
 8004314:	08004594 	.word	0x08004594
 8004318:	08004554 	.word	0x08004554

0800431c <_write_r>:
 800431c:	b538      	push	{r3, r4, r5, lr}
 800431e:	4d07      	ldr	r5, [pc, #28]	; (800433c <_write_r+0x20>)
 8004320:	4604      	mov	r4, r0
 8004322:	4608      	mov	r0, r1
 8004324:	4611      	mov	r1, r2
 8004326:	2200      	movs	r2, #0
 8004328:	602a      	str	r2, [r5, #0]
 800432a:	461a      	mov	r2, r3
 800432c:	f7fc faa0 	bl	8000870 <_write>
 8004330:	1c43      	adds	r3, r0, #1
 8004332:	d102      	bne.n	800433a <_write_r+0x1e>
 8004334:	682b      	ldr	r3, [r5, #0]
 8004336:	b103      	cbz	r3, 800433a <_write_r+0x1e>
 8004338:	6023      	str	r3, [r4, #0]
 800433a:	bd38      	pop	{r3, r4, r5, pc}
 800433c:	2000026c 	.word	0x2000026c

08004340 <__swsetup_r>:
 8004340:	4b32      	ldr	r3, [pc, #200]	; (800440c <__swsetup_r+0xcc>)
 8004342:	b570      	push	{r4, r5, r6, lr}
 8004344:	681d      	ldr	r5, [r3, #0]
 8004346:	4606      	mov	r6, r0
 8004348:	460c      	mov	r4, r1
 800434a:	b125      	cbz	r5, 8004356 <__swsetup_r+0x16>
 800434c:	69ab      	ldr	r3, [r5, #24]
 800434e:	b913      	cbnz	r3, 8004356 <__swsetup_r+0x16>
 8004350:	4628      	mov	r0, r5
 8004352:	f7ff fa99 	bl	8003888 <__sinit>
 8004356:	4b2e      	ldr	r3, [pc, #184]	; (8004410 <__swsetup_r+0xd0>)
 8004358:	429c      	cmp	r4, r3
 800435a:	d10f      	bne.n	800437c <__swsetup_r+0x3c>
 800435c:	686c      	ldr	r4, [r5, #4]
 800435e:	89a3      	ldrh	r3, [r4, #12]
 8004360:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004364:	0719      	lsls	r1, r3, #28
 8004366:	d42c      	bmi.n	80043c2 <__swsetup_r+0x82>
 8004368:	06dd      	lsls	r5, r3, #27
 800436a:	d411      	bmi.n	8004390 <__swsetup_r+0x50>
 800436c:	2309      	movs	r3, #9
 800436e:	6033      	str	r3, [r6, #0]
 8004370:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004374:	81a3      	strh	r3, [r4, #12]
 8004376:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800437a:	e03e      	b.n	80043fa <__swsetup_r+0xba>
 800437c:	4b25      	ldr	r3, [pc, #148]	; (8004414 <__swsetup_r+0xd4>)
 800437e:	429c      	cmp	r4, r3
 8004380:	d101      	bne.n	8004386 <__swsetup_r+0x46>
 8004382:	68ac      	ldr	r4, [r5, #8]
 8004384:	e7eb      	b.n	800435e <__swsetup_r+0x1e>
 8004386:	4b24      	ldr	r3, [pc, #144]	; (8004418 <__swsetup_r+0xd8>)
 8004388:	429c      	cmp	r4, r3
 800438a:	bf08      	it	eq
 800438c:	68ec      	ldreq	r4, [r5, #12]
 800438e:	e7e6      	b.n	800435e <__swsetup_r+0x1e>
 8004390:	0758      	lsls	r0, r3, #29
 8004392:	d512      	bpl.n	80043ba <__swsetup_r+0x7a>
 8004394:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004396:	b141      	cbz	r1, 80043aa <__swsetup_r+0x6a>
 8004398:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800439c:	4299      	cmp	r1, r3
 800439e:	d002      	beq.n	80043a6 <__swsetup_r+0x66>
 80043a0:	4630      	mov	r0, r6
 80043a2:	f7ff fb7d 	bl	8003aa0 <_free_r>
 80043a6:	2300      	movs	r3, #0
 80043a8:	6363      	str	r3, [r4, #52]	; 0x34
 80043aa:	89a3      	ldrh	r3, [r4, #12]
 80043ac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80043b0:	81a3      	strh	r3, [r4, #12]
 80043b2:	2300      	movs	r3, #0
 80043b4:	6063      	str	r3, [r4, #4]
 80043b6:	6923      	ldr	r3, [r4, #16]
 80043b8:	6023      	str	r3, [r4, #0]
 80043ba:	89a3      	ldrh	r3, [r4, #12]
 80043bc:	f043 0308 	orr.w	r3, r3, #8
 80043c0:	81a3      	strh	r3, [r4, #12]
 80043c2:	6923      	ldr	r3, [r4, #16]
 80043c4:	b94b      	cbnz	r3, 80043da <__swsetup_r+0x9a>
 80043c6:	89a3      	ldrh	r3, [r4, #12]
 80043c8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80043cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043d0:	d003      	beq.n	80043da <__swsetup_r+0x9a>
 80043d2:	4621      	mov	r1, r4
 80043d4:	4630      	mov	r0, r6
 80043d6:	f7ff fb1b 	bl	8003a10 <__smakebuf_r>
 80043da:	89a0      	ldrh	r0, [r4, #12]
 80043dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80043e0:	f010 0301 	ands.w	r3, r0, #1
 80043e4:	d00a      	beq.n	80043fc <__swsetup_r+0xbc>
 80043e6:	2300      	movs	r3, #0
 80043e8:	60a3      	str	r3, [r4, #8]
 80043ea:	6963      	ldr	r3, [r4, #20]
 80043ec:	425b      	negs	r3, r3
 80043ee:	61a3      	str	r3, [r4, #24]
 80043f0:	6923      	ldr	r3, [r4, #16]
 80043f2:	b943      	cbnz	r3, 8004406 <__swsetup_r+0xc6>
 80043f4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80043f8:	d1ba      	bne.n	8004370 <__swsetup_r+0x30>
 80043fa:	bd70      	pop	{r4, r5, r6, pc}
 80043fc:	0781      	lsls	r1, r0, #30
 80043fe:	bf58      	it	pl
 8004400:	6963      	ldrpl	r3, [r4, #20]
 8004402:	60a3      	str	r3, [r4, #8]
 8004404:	e7f4      	b.n	80043f0 <__swsetup_r+0xb0>
 8004406:	2000      	movs	r0, #0
 8004408:	e7f7      	b.n	80043fa <__swsetup_r+0xba>
 800440a:	bf00      	nop
 800440c:	2000000c 	.word	0x2000000c
 8004410:	08004574 	.word	0x08004574
 8004414:	08004594 	.word	0x08004594
 8004418:	08004554 	.word	0x08004554

0800441c <_close_r>:
 800441c:	b538      	push	{r3, r4, r5, lr}
 800441e:	4d06      	ldr	r5, [pc, #24]	; (8004438 <_close_r+0x1c>)
 8004420:	2300      	movs	r3, #0
 8004422:	4604      	mov	r4, r0
 8004424:	4608      	mov	r0, r1
 8004426:	602b      	str	r3, [r5, #0]
 8004428:	f7fc fb52 	bl	8000ad0 <_close>
 800442c:	1c43      	adds	r3, r0, #1
 800442e:	d102      	bne.n	8004436 <_close_r+0x1a>
 8004430:	682b      	ldr	r3, [r5, #0]
 8004432:	b103      	cbz	r3, 8004436 <_close_r+0x1a>
 8004434:	6023      	str	r3, [r4, #0]
 8004436:	bd38      	pop	{r3, r4, r5, pc}
 8004438:	2000026c 	.word	0x2000026c

0800443c <_fstat_r>:
 800443c:	b538      	push	{r3, r4, r5, lr}
 800443e:	4d07      	ldr	r5, [pc, #28]	; (800445c <_fstat_r+0x20>)
 8004440:	2300      	movs	r3, #0
 8004442:	4604      	mov	r4, r0
 8004444:	4608      	mov	r0, r1
 8004446:	4611      	mov	r1, r2
 8004448:	602b      	str	r3, [r5, #0]
 800444a:	f7fc fb4d 	bl	8000ae8 <_fstat>
 800444e:	1c43      	adds	r3, r0, #1
 8004450:	d102      	bne.n	8004458 <_fstat_r+0x1c>
 8004452:	682b      	ldr	r3, [r5, #0]
 8004454:	b103      	cbz	r3, 8004458 <_fstat_r+0x1c>
 8004456:	6023      	str	r3, [r4, #0]
 8004458:	bd38      	pop	{r3, r4, r5, pc}
 800445a:	bf00      	nop
 800445c:	2000026c 	.word	0x2000026c

08004460 <_isatty_r>:
 8004460:	b538      	push	{r3, r4, r5, lr}
 8004462:	4d06      	ldr	r5, [pc, #24]	; (800447c <_isatty_r+0x1c>)
 8004464:	2300      	movs	r3, #0
 8004466:	4604      	mov	r4, r0
 8004468:	4608      	mov	r0, r1
 800446a:	602b      	str	r3, [r5, #0]
 800446c:	f7fc fb4c 	bl	8000b08 <_isatty>
 8004470:	1c43      	adds	r3, r0, #1
 8004472:	d102      	bne.n	800447a <_isatty_r+0x1a>
 8004474:	682b      	ldr	r3, [r5, #0]
 8004476:	b103      	cbz	r3, 800447a <_isatty_r+0x1a>
 8004478:	6023      	str	r3, [r4, #0]
 800447a:	bd38      	pop	{r3, r4, r5, pc}
 800447c:	2000026c 	.word	0x2000026c

08004480 <_lseek_r>:
 8004480:	b538      	push	{r3, r4, r5, lr}
 8004482:	4d07      	ldr	r5, [pc, #28]	; (80044a0 <_lseek_r+0x20>)
 8004484:	4604      	mov	r4, r0
 8004486:	4608      	mov	r0, r1
 8004488:	4611      	mov	r1, r2
 800448a:	2200      	movs	r2, #0
 800448c:	602a      	str	r2, [r5, #0]
 800448e:	461a      	mov	r2, r3
 8004490:	f7fc fb45 	bl	8000b1e <_lseek>
 8004494:	1c43      	adds	r3, r0, #1
 8004496:	d102      	bne.n	800449e <_lseek_r+0x1e>
 8004498:	682b      	ldr	r3, [r5, #0]
 800449a:	b103      	cbz	r3, 800449e <_lseek_r+0x1e>
 800449c:	6023      	str	r3, [r4, #0]
 800449e:	bd38      	pop	{r3, r4, r5, pc}
 80044a0:	2000026c 	.word	0x2000026c

080044a4 <__malloc_lock>:
 80044a4:	4801      	ldr	r0, [pc, #4]	; (80044ac <__malloc_lock+0x8>)
 80044a6:	f7ff ba8d 	b.w	80039c4 <__retarget_lock_acquire_recursive>
 80044aa:	bf00      	nop
 80044ac:	20000264 	.word	0x20000264

080044b0 <__malloc_unlock>:
 80044b0:	4801      	ldr	r0, [pc, #4]	; (80044b8 <__malloc_unlock+0x8>)
 80044b2:	f7ff ba88 	b.w	80039c6 <__retarget_lock_release_recursive>
 80044b6:	bf00      	nop
 80044b8:	20000264 	.word	0x20000264

080044bc <_read_r>:
 80044bc:	b538      	push	{r3, r4, r5, lr}
 80044be:	4d07      	ldr	r5, [pc, #28]	; (80044dc <_read_r+0x20>)
 80044c0:	4604      	mov	r4, r0
 80044c2:	4608      	mov	r0, r1
 80044c4:	4611      	mov	r1, r2
 80044c6:	2200      	movs	r2, #0
 80044c8:	602a      	str	r2, [r5, #0]
 80044ca:	461a      	mov	r2, r3
 80044cc:	f7fc fae3 	bl	8000a96 <_read>
 80044d0:	1c43      	adds	r3, r0, #1
 80044d2:	d102      	bne.n	80044da <_read_r+0x1e>
 80044d4:	682b      	ldr	r3, [r5, #0]
 80044d6:	b103      	cbz	r3, 80044da <_read_r+0x1e>
 80044d8:	6023      	str	r3, [r4, #0]
 80044da:	bd38      	pop	{r3, r4, r5, pc}
 80044dc:	2000026c 	.word	0x2000026c

080044e0 <_init>:
 80044e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044e2:	bf00      	nop
 80044e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044e6:	bc08      	pop	{r3}
 80044e8:	469e      	mov	lr, r3
 80044ea:	4770      	bx	lr

080044ec <_fini>:
 80044ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044ee:	bf00      	nop
 80044f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044f2:	bc08      	pop	{r3}
 80044f4:	469e      	mov	lr, r3
 80044f6:	4770      	bx	lr
